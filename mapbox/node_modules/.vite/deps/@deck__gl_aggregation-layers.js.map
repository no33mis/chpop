{
  "version": 3,
  "sources": ["../../earcut/src/earcut.js", "../../@deck.gl/aggregation-layers/src/utils/aggregation-operation-utils.js", "../../@deck.gl/aggregation-layers/src/utils/gpu-grid-aggregation/gpu-grid-aggregator-constants.js", "../../@deck.gl/aggregation-layers/src/utils/gpu-grid-aggregation/aggregate-to-grid-vs.glsl.js", "../../@deck.gl/aggregation-layers/src/utils/gpu-grid-aggregation/aggregate-to-grid-fs.glsl.js", "../../@deck.gl/aggregation-layers/src/utils/gpu-grid-aggregation/aggregate-all-vs.glsl.js", "../../@deck.gl/aggregation-layers/src/utils/gpu-grid-aggregation/aggregate-all-fs.glsl.js", "../../@deck.gl/aggregation-layers/src/utils/gpu-grid-aggregation/transform-mean-vs.glsl.js", "../../@deck.gl/aggregation-layers/src/utils/resource-utils.js", "../../@deck.gl/aggregation-layers/src/utils/gpu-grid-aggregation/gpu-grid-aggregator.js", "../../@deck.gl/aggregation-layers/src/utils/color-utils.ts", "../../@deck.gl/aggregation-layers/src/screen-grid-layer/screen-grid-layer-vertex.glsl.ts", "../../@deck.gl/aggregation-layers/src/screen-grid-layer/screen-grid-layer-fragment.glsl.ts", "../../@deck.gl/aggregation-layers/src/screen-grid-layer/screen-grid-cell-layer.ts", "../../@deck.gl/aggregation-layers/src/utils/prop-utils.js", "../../@deck.gl/aggregation-layers/src/aggregation-layer.ts", "../../@deck.gl/aggregation-layers/src/utils/scale-utils.js", "../../@deck.gl/aggregation-layers/src/utils/bin-sorter.ts", "../../@deck.gl/aggregation-layers/src/utils/grid-aggregation-utils.js", "../../@deck.gl/aggregation-layers/src/cpu-grid-layer/grid-aggregator.js", "../../@deck.gl/aggregation-layers/src/grid-aggregation-layer.ts", "../../@deck.gl/aggregation-layers/src/screen-grid-layer/screen-grid-layer.ts", "../../@deck.gl/layers/src/arc-layer/arc-layer-vertex.glsl.ts", "../../@deck.gl/layers/src/arc-layer/arc-layer-fragment.glsl.ts", "../../@deck.gl/layers/src/arc-layer/arc-layer.ts", "../../@deck.gl/layers/src/bitmap-layer/create-mesh.ts", "../../@deck.gl/layers/src/bitmap-layer/bitmap-layer-vertex.ts", "../../@deck.gl/layers/src/bitmap-layer/bitmap-layer-fragment.ts", "../../@deck.gl/layers/src/bitmap-layer/bitmap-layer.ts", "../../@deck.gl/layers/src/icon-layer/icon-layer-vertex.glsl.ts", "../../@deck.gl/layers/src/icon-layer/icon-layer-fragment.glsl.ts", "../../@deck.gl/layers/src/icon-layer/icon-manager.ts", "../../@deck.gl/layers/src/icon-layer/icon-layer.ts", "../../@deck.gl/layers/src/line-layer/line-layer-vertex.glsl.ts", "../../@deck.gl/layers/src/line-layer/line-layer-fragment.glsl.ts", "../../@deck.gl/layers/src/line-layer/line-layer.ts", "../../@deck.gl/layers/src/point-cloud-layer/point-cloud-layer-vertex.glsl.ts", "../../@deck.gl/layers/src/point-cloud-layer/point-cloud-layer-fragment.glsl.ts", "../../@deck.gl/layers/src/point-cloud-layer/point-cloud-layer.ts", "../../@deck.gl/layers/src/scatterplot-layer/scatterplot-layer-vertex.glsl.ts", "../../@deck.gl/layers/src/scatterplot-layer/scatterplot-layer-fragment.glsl.ts", "../../@deck.gl/layers/src/scatterplot-layer/scatterplot-layer.ts", "../../@math.gl/polygon/src/polygon-utils.ts", "../../@math.gl/polygon/src/utils.ts", "../../@math.gl/polygon/src/lineclip.ts", "../../@math.gl/polygon/src/cut-by-grid.ts", "../../@math.gl/polygon/src/cut-by-mercator-bounds.ts", "../../@deck.gl/layers/src/column-layer/column-geometry.ts", "../../@deck.gl/layers/src/column-layer/column-layer-vertex.glsl.ts", "../../@deck.gl/layers/src/column-layer/column-layer-fragment.glsl.ts", "../../@deck.gl/layers/src/column-layer/column-layer.ts", "../../@deck.gl/layers/src/column-layer/grid-cell-layer.ts", "../../@deck.gl/layers/src/path-layer/path.ts", "../../@deck.gl/layers/src/path-layer/path-tesselator.ts", "../../@deck.gl/layers/src/path-layer/path-layer-vertex.glsl.ts", "../../@deck.gl/layers/src/path-layer/path-layer-fragment.glsl.ts", "../../@deck.gl/layers/src/path-layer/path-layer.ts", "../../@deck.gl/layers/src/solid-polygon-layer/polygon.ts", "../../@deck.gl/layers/src/solid-polygon-layer/polygon-tesselator.ts", "../../@deck.gl/layers/src/solid-polygon-layer/solid-polygon-layer-vertex-main.glsl.ts", "../../@deck.gl/layers/src/solid-polygon-layer/solid-polygon-layer-vertex-top.glsl.ts", "../../@deck.gl/layers/src/solid-polygon-layer/solid-polygon-layer-vertex-side.glsl.ts", "../../@deck.gl/layers/src/solid-polygon-layer/solid-polygon-layer-fragment.glsl.ts", "../../@deck.gl/layers/src/solid-polygon-layer/solid-polygon-layer.ts", "../../@deck.gl/layers/src/utils.ts", "../../@deck.gl/layers/src/polygon-layer/polygon-layer.ts", "../../@deck.gl/layers/src/geojson-layer/geojson-binary.ts", "../../@deck.gl/layers/src/text-layer/multi-icon-layer/multi-icon-layer-fragment.glsl.ts", "../../@deck.gl/layers/src/text-layer/multi-icon-layer/multi-icon-layer.ts", "../../@mapbox/tiny-sdf/index.js", "../../@deck.gl/layers/src/text-layer/utils.ts", "../../@deck.gl/layers/src/text-layer/lru-cache.ts", "../../@deck.gl/layers/src/text-layer/font-atlas-manager.ts", "../../@deck.gl/layers/src/text-layer/text-background-layer/text-background-layer-vertex.glsl.ts", "../../@deck.gl/layers/src/text-layer/text-background-layer/text-background-layer-fragment.glsl.ts", "../../@deck.gl/layers/src/text-layer/text-background-layer/text-background-layer.ts", "../../@deck.gl/layers/src/text-layer/text-layer.ts", "../../@deck.gl/layers/src/geojson-layer/sub-layer-map.ts", "../../@deck.gl/layers/src/geojson-layer/geojson.ts", "../../@deck.gl/layers/src/geojson-layer/geojson-layer-props.ts", "../../@deck.gl/layers/src/geojson-layer/geojson-layer.ts", "../../@deck.gl/aggregation-layers/src/utils/cpu-aggregator.js", "../../@deck.gl/aggregation-layers/src/cpu-grid-layer/cpu-grid-layer.ts", "../../d3-hexbin/src/hexbin.js", "../../@deck.gl/aggregation-layers/src/hexagon-layer/hexagon-aggregator.js", "../../@deck.gl/aggregation-layers/src/hexagon-layer/hexagon-layer.ts", "../../@deck.gl/aggregation-layers/src/contour-layer/marching-squares-codes.ts", "../../@deck.gl/aggregation-layers/src/contour-layer/marching-squares.ts", "../../@deck.gl/aggregation-layers/src/contour-layer/contour-utils.ts", "../../@deck.gl/aggregation-layers/src/contour-layer/contour-layer.ts", "../../@deck.gl/aggregation-layers/src/gpu-grid-layer/gpu-grid-cell-layer-vertex.glsl.ts", "../../@deck.gl/aggregation-layers/src/gpu-grid-layer/gpu-grid-cell-layer-fragment.glsl.ts", "../../@deck.gl/aggregation-layers/src/gpu-grid-layer/gpu-grid-cell-layer.ts", "../../@deck.gl/aggregation-layers/src/gpu-grid-layer/gpu-grid-layer.ts", "../../@deck.gl/aggregation-layers/src/grid-layer/grid-layer.ts", "../../@deck.gl/aggregation-layers/src/heatmap-layer/heatmap-layer-utils.ts", "../../@deck.gl/aggregation-layers/src/heatmap-layer/triangle-layer-vertex.glsl.ts", "../../@deck.gl/aggregation-layers/src/heatmap-layer/triangle-layer-fragment.glsl.ts", "../../@deck.gl/aggregation-layers/src/heatmap-layer/triangle-layer.ts", "../../@deck.gl/aggregation-layers/src/heatmap-layer/weights-vs.glsl.ts", "../../@deck.gl/aggregation-layers/src/heatmap-layer/weights-fs.glsl.ts", "../../@deck.gl/aggregation-layers/src/heatmap-layer/max-vs.glsl.ts", "../../@deck.gl/aggregation-layers/src/heatmap-layer/max-fs.glsl.ts", "../../@deck.gl/aggregation-layers/src/heatmap-layer/heatmap-layer.ts"],
  "sourcesContent": ["'use strict';\n\nmodule.exports = earcut;\nmodule.exports.default = earcut;\n\nfunction earcut(data, holeIndices, dim) {\n\n    dim = dim || 2;\n\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    var minX, minY, maxX, maxY, x, y, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n            x = data[i];\n            y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 32767 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n        prev, next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim | 0);\n            triangles.push(ear.i / dim | 0);\n            triangles.push(next.i / dim | 0);\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\n\n    var p = c.next;\n    while (p !== a) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(x0, y0, minX, minY, invSize),\n        maxZ = zOrder(x1, y1, minX, minY, invSize);\n\n    var p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i / dim | 0);\n            triangles.push(p.i / dim | 0);\n            triangles.push(b.i / dim | 0);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize, 0);\n                earcutLinked(c, triangles, dim, minX, minY, invSize, 0);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        outerNode = eliminateHole(queue[i], outerNode);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    var bridge = findHoleBridge(hole, outerNode);\n    if (!bridge) {\n        return outerNode;\n    }\n\n    var bridgeReverse = splitPolygon(bridge, hole);\n\n    // filter collinear points around the cuts\n    filterPoints(bridgeReverse, bridgeReverse.next);\n    return filterPoints(bridge, bridge.next);\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                m = p.x < p.next.x ? p : p.next;\n                if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize,\n        inSize = 1;\n\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = (x - minX) * invSize | 0;\n    y = (y - minY) * invSize | 0;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) &&\n           (ax - px) * (by - py) >= (bx - px) * (ay - py) &&\n           (bx - px) * (cy - py) >= (cx - px) * (by - py);\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    var o1 = sign(area(p1, q1, p2));\n    var o2 = sign(area(p1, q1, q2));\n    var o3 = sign(area(p2, q2, p1));\n    var o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = 0;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\n            var start = holeIndices[i] * dim;\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    var trianglesArea = 0;\n    for (i = 0; i < triangles.length; i += 3) {\n        var a = triangles[i] * dim;\n        var b = triangles[i + 1] * dim;\n        var c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n    return result;\n};\n", "// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport const AGGREGATION_OPERATION = {\n  SUM: 1,\n  MEAN: 2,\n  MIN: 3,\n  MAX: 4\n};\n\nfunction sumReducer(accu, cur) {\n  return accu + cur;\n}\n\nfunction maxReducer(accu, cur) {\n  return cur > accu ? cur : accu;\n}\n\nfunction minReducer(accu, cur) {\n  return cur < accu ? cur : accu;\n}\n\nexport function getMean(pts, accessor) {\n  if (Number.isFinite(accessor)) {\n    return pts.length ? accessor : null;\n  }\n  const filtered = pts.map(accessor).filter(Number.isFinite);\n\n  return filtered.length ? filtered.reduce(sumReducer, 0) / filtered.length : null;\n}\n\nexport function getSum(pts, accessor) {\n  if (Number.isFinite(accessor)) {\n    return pts.length ? pts.length * accessor : null;\n  }\n  const filtered = pts.map(accessor).filter(Number.isFinite);\n\n  return filtered.length ? filtered.reduce(sumReducer, 0) : null;\n}\n\nexport function getMax(pts, accessor) {\n  if (Number.isFinite(accessor)) {\n    return pts.length ? accessor : null;\n  }\n  const filtered = pts.map(accessor).filter(Number.isFinite);\n\n  return filtered.length ? filtered.reduce(maxReducer, -Infinity) : null;\n}\n\nexport function getMin(pts, accessor) {\n  if (Number.isFinite(accessor)) {\n    return pts.length ? accessor : null;\n  }\n  const filtered = pts.map(accessor).filter(Number.isFinite);\n\n  return filtered.length ? filtered.reduce(minReducer, Infinity) : null;\n}\n\n// Function to convert from aggregation/accessor props (like colorAggregation and getColorWeight) to getValue prop (like getColorValue)\nexport function getValueFunc(aggregation, accessor, context) {\n  const op = AGGREGATION_OPERATION[aggregation] || AGGREGATION_OPERATION.SUM;\n  accessor = wrapAccessor(accessor, context);\n  switch (op) {\n    case AGGREGATION_OPERATION.MIN:\n      return pts => getMin(pts, accessor);\n    case AGGREGATION_OPERATION.SUM:\n      return pts => getSum(pts, accessor);\n    case AGGREGATION_OPERATION.MEAN:\n      return pts => getMean(pts, accessor);\n    case AGGREGATION_OPERATION.MAX:\n      return pts => getMax(pts, accessor);\n    default:\n      return null;\n  }\n}\n\nfunction wrapAccessor(accessor, context = {}) {\n  if (Number.isFinite(accessor)) {\n    return accessor;\n  }\n  return pt => {\n    context.index = pt.index;\n    return accessor(pt.source, context);\n  };\n}\n\nexport function wrapGetValueFunc(getValue, context = {}) {\n  return pts => {\n    context.indices = pts.map(pt => pt.index);\n    return getValue(\n      pts.map(pt => pt.source),\n      context\n    );\n  };\n}\n", "import GL from '@luma.gl/constants';\nimport {AGGREGATION_OPERATION} from '../aggregation-operation-utils';\n\nexport const DEFAULT_RUN_PARAMS = {\n  projectPoints: false,\n  viewport: null,\n  createBufferObjects: true,\n  moduleSettings: {}\n};\n\nexport const MAX_32_BIT_FLOAT = 3.402823466e38;\nexport const MIN_BLEND_EQUATION = [GL.MIN, GL.FUNC_ADD];\nexport const MAX_BLEND_EQUATION = [GL.MAX, GL.FUNC_ADD];\nexport const MAX_MIN_BLEND_EQUATION = [GL.MAX, GL.MIN];\nexport const EQUATION_MAP = {\n  [AGGREGATION_OPERATION.SUM]: GL.FUNC_ADD,\n  [AGGREGATION_OPERATION.MEAN]: GL.FUNC_ADD,\n  [AGGREGATION_OPERATION.MIN]: MIN_BLEND_EQUATION,\n  [AGGREGATION_OPERATION.MAX]: MAX_BLEND_EQUATION\n};\n\nexport const ELEMENTCOUNT = 4;\nexport const DEFAULT_WEIGHT_PARAMS = {\n  size: 1,\n  operation: AGGREGATION_OPERATION.SUM,\n  needMin: false,\n  needMax: false,\n  combineMaxMin: false\n};\n\nexport const PIXEL_SIZE = 4; // RGBA32F\nexport const WEIGHT_SIZE = 3;\n\nexport const MAX_MIN_TEXTURE_OPTS = {\n  format: GL.RGBA32F,\n  type: GL.FLOAT,\n  border: 0,\n  mipmaps: false,\n  parameters: {\n    [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n    [GL.TEXTURE_MIN_FILTER]: GL.NEAREST\n  },\n  dataFormat: GL.RGBA,\n  width: 1,\n  height: 1\n};\n", "// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME gpu-aggregation-to-grid-vs\n\nattribute vec3 positions;\nattribute vec3 positions64Low;\nattribute vec3 weights;\nuniform vec2 cellSize;\nuniform vec2 gridSize;\nuniform bool projectPoints;\nuniform vec2 translation;\nuniform vec3 scaling;\n\nvarying vec3 vWeights;\n\nvec2 project_to_pixel(vec4 pos) {\n  vec4 result;\n  pos.xy = pos.xy/pos.w;\n  result = pos + vec4(translation, 0., 0.);\n  result.xy = scaling.z > 0. ? result.xy * scaling.xy : result.xy;\n  return result.xy;\n}\n\nvoid main(void) {\n\n  vWeights = weights;\n\n  vec4 windowPos = vec4(positions, 1.);\n  if (projectPoints) {\n    windowPos = project_position_to_clipspace(positions, positions64Low, vec3(0));\n  }\n\n  vec2 pos = project_to_pixel(windowPos);\n\n  vec2 pixelXY64[2];\n  pixelXY64[0] = vec2(pos.x, 0.);\n  pixelXY64[1] = vec2(pos.y, 0.);\n\n  // Transform (0,0):windowSize -> (0, 0): gridSize\n  vec2 gridXY64[2];\n  gridXY64[0] = div_fp64(pixelXY64[0], vec2(cellSize.x, 0));\n  gridXY64[1] = div_fp64(pixelXY64[1], vec2(cellSize.y, 0));\n  float x = floor(gridXY64[0].x);\n  float y = floor(gridXY64[1].x);\n  pos = vec2(x, y);\n\n  // Transform (0,0):gridSize -> (-1, -1):(1,1)\n  pos = (pos * (2., 2.) / (gridSize)) - (1., 1.);\n\n  // Move to pixel center, pixel-size in screen sapce (2/gridSize) * 0.5 => 1/gridSize\n  vec2 offset = 1.0 / gridSize;\n  pos = pos + offset;\n\n  gl_Position = vec4(pos, 0.0, 1.0);\n\n  // Enforce default value for ANGLE issue (https://bugs.chromium.org/p/angleproject/issues/detail?id=3941)\n  gl_PointSize = 1.0;\n}\n`;\n", "// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME gpu-aggregation-to-grid-fs\n\nprecision highp float;\n\nvarying vec3 vWeights;\n\nvoid main(void) {\n  gl_FragColor = vec4(vWeights, 1.0);\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n", "// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#version 300 es\n#define SHADER_NAME gpu-aggregation-all-vs-64\n\nin vec2 position;\nuniform ivec2 gridSize;\nout vec2 vTextureCoord;\n\nvoid main(void) {\n  // Map each position to single pixel\n  vec2 pos = vec2(-1.0, -1.0);\n\n  // Move to pixel center, pixel-size in screen sapce (2/gridSize) * 0.5 => 1/gridSize\n  vec2 offset = 1.0 / vec2(gridSize);\n  pos = pos + offset;\n\n  gl_Position = vec4(pos, 0.0, 1.0);\n\n  int yIndex = gl_InstanceID / gridSize[0];\n  int xIndex = gl_InstanceID - (yIndex * gridSize[0]);\n\n  vec2 yIndexFP64 = vec2(float(yIndex), 0.);\n  vec2 xIndexFP64 = vec2(float(xIndex), 0.);\n  vec2 gridSizeYFP64 = vec2(gridSize[1], 0.);\n  vec2 gridSizeXFP64 = vec2(gridSize[0], 0.);\n\n  vec2 texCoordXFP64 = div_fp64(yIndexFP64, gridSizeYFP64);\n  vec2 texCoordYFP64 = div_fp64(xIndexFP64, gridSizeXFP64);\n\n  vTextureCoord = vec2(texCoordYFP64.x, texCoordXFP64.x);\n  // Enforce default value for ANGLE issue (https://bugs.chromium.org/p/angleproject/issues/detail?id=3941)\n  gl_PointSize = 1.0;\n}\n`;\n", "// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#version 300 es\n#define SHADER_NAME gpu-aggregation-all-fs\n\nprecision highp float;\n\nin vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform bool combineMaxMin;\nout vec4 fragColor;\nvoid main(void) {\n  vec4 textureColor = texture(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\n  if (textureColor.a == 0.) {\n    discard;\n  }\n  fragColor.rgb = textureColor.rgb;\n  // if combineMinMax is true, use Alpha channel for first weights min value.\n  fragColor.a = combineMaxMin ? textureColor.r : textureColor.a;\n}\n`;\n", "// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME gpu-aggregation-transform-mean-vs\nattribute vec4 aggregationValues;\nvarying vec4 meanValues;\n\nvoid main()\n{\n  // TODO: Use 64-bit division ?? not needed given this is aggregation ??\n  bool isCellValid = bool(aggregationValues.w > 0.);\n  // aggregationValues:  XYZ contain aggregated values, W contains count\n  meanValues.xyz = isCellValid ? aggregationValues.xyz/aggregationValues.w : vec3(0, 0, 0);\n  meanValues.w = aggregationValues.w;\n\n  // Enforce default value for ANGLE issue (https://bugs.chromium.org/p/angleproject/issues/detail?id=3941)\n  gl_PointSize = 1.0;\n}\n`;\n", "import GL from '@luma.gl/constants';\nimport {Framebuffer, Texture2D, isWebGL2} from '@luma.gl/core';\n\nconst DEFAULT_PARAMETERS = {\n  [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n  [GL.TEXTURE_MIN_FILTER]: GL.NEAREST\n};\n\nexport function getFloatTexture(gl, opts = {}) {\n  const {\n    width = 1,\n    height = 1,\n    data = null,\n    unpackFlipY = true,\n    parameters = DEFAULT_PARAMETERS\n  } = opts;\n  const texture = new Texture2D(gl, {\n    data,\n    format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n    type: GL.FLOAT,\n    border: 0,\n    mipmaps: false,\n    parameters,\n    dataFormat: GL.RGBA,\n    width,\n    height,\n    unpackFlipY\n  });\n  return texture;\n}\n\nexport function getFramebuffer(gl, opts) {\n  const {id, width = 1, height = 1, texture} = opts;\n  const fb = new Framebuffer(gl, {\n    id,\n    width,\n    height,\n    attachments: {\n      [GL.COLOR_ATTACHMENT0]: texture\n    }\n  });\n\n  return fb;\n}\n\nexport function getFloatArray(array, size, fillValue = 0) {\n  if (!array || array.length < size) {\n    return new Float32Array(size).fill(fillValue);\n  }\n  return array;\n}\n", "// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {\n  Model,\n  Transform,\n  FEATURES,\n  hasFeatures,\n  isWebGL2,\n  readPixelsToBuffer,\n  withParameters\n} from '@luma.gl/core';\nimport {fp64arithmetic} from '@luma.gl/shadertools';\nimport {log, project32, _mergeShaders as mergeShaders} from '@deck.gl/core';\n\nimport {\n  DEFAULT_RUN_PARAMS,\n  MAX_32_BIT_FLOAT,\n  MIN_BLEND_EQUATION,\n  MAX_BLEND_EQUATION,\n  MAX_MIN_BLEND_EQUATION,\n  EQUATION_MAP,\n  DEFAULT_WEIGHT_PARAMS,\n  PIXEL_SIZE\n} from './gpu-grid-aggregator-constants';\nimport {AGGREGATION_OPERATION} from '../aggregation-operation-utils';\n\nimport AGGREGATE_TO_GRID_VS from './aggregate-to-grid-vs.glsl';\nimport AGGREGATE_TO_GRID_FS from './aggregate-to-grid-fs.glsl';\nimport AGGREGATE_ALL_VS from './aggregate-all-vs.glsl';\nimport AGGREGATE_ALL_FS from './aggregate-all-fs.glsl';\nimport TRANSFORM_MEAN_VS from './transform-mean-vs.glsl';\nimport {getFloatTexture, getFramebuffer} from './../resource-utils.js';\n\nconst BUFFER_NAMES = ['aggregationBuffer', 'maxMinBuffer', 'minBuffer', 'maxBuffer'];\nconst ARRAY_BUFFER_MAP = {\n  maxData: 'maxBuffer',\n  minData: 'minBuffer',\n  maxMinData: 'maxMinBuffer'\n};\n\nconst REQUIRED_FEATURES = [\n  FEATURES.WEBGL2, // TODO: Remove after trannsform refactor\n  FEATURES.COLOR_ATTACHMENT_RGBA32F,\n  FEATURES.BLEND_EQUATION_MINMAX,\n  FEATURES.FLOAT_BLEND,\n  FEATURES.TEXTURE_FLOAT\n];\n\nexport default class GPUGridAggregator {\n  // Decode and return aggregation data of given pixel.\n  static getAggregationData({aggregationData, maxData, minData, maxMinData, pixelIndex}) {\n    const index = pixelIndex * PIXEL_SIZE;\n    const results = {};\n    if (aggregationData) {\n      results.cellCount = aggregationData[index + 3];\n      results.cellWeight = aggregationData[index];\n    }\n    if (maxMinData) {\n      results.maxCellWieght = maxMinData[0];\n      results.minCellWeight = maxMinData[3];\n    } else {\n      if (maxData) {\n        results.maxCellWieght = maxData[0];\n        results.totalCount = maxData[3];\n      }\n      if (minData) {\n        results.minCellWeight = minData[0];\n        results.totalCount = maxData[3];\n      }\n    }\n    return results;\n  }\n\n  // Decodes and retuns counts and weights of all cells\n  static getCellData({countsData, size = 1}) {\n    const numCells = countsData.length / 4;\n    const cellWeights = new Float32Array(numCells * size);\n    const cellCounts = new Uint32Array(numCells);\n    for (let i = 0; i < numCells; i++) {\n      // weights in RGB channels\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        cellWeights[i * size + sizeIndex] = countsData[i * 4 + sizeIndex];\n      }\n      // count in Alpha channel\n      cellCounts[i] = countsData[i * 4 + 3];\n    }\n    return {cellCounts, cellWeights};\n  }\n\n  static isSupported(gl) {\n    return hasFeatures(gl, REQUIRED_FEATURES);\n  }\n\n  // DEBUG ONLY\n  // static logData({aggregationBuffer, minBuffer, maxBuffer, maxMinBuffer, limit = 10}) {\n  //   if (aggregationBuffer) {\n  //     console.log('Aggregation Data:');\n  //     const agrData = aggregationBuffer.getData();\n  //     for (let index = 0; index < agrData.length && limit > 0; index += 4) {\n  //       if (agrData[index + 3] > 0) {\n  //         console.log(\n  //           `index: ${index} weights: ${agrData[index]} ${agrData[index + 1]} ${\n  //             agrData[index + 2]\n  //           } count: ${agrData[index + 3]}`\n  //         );\n  //         limit--;\n  //       }\n  //     }\n  //   }\n  //   const obj = {minBuffer, maxBuffer, maxMinBuffer};\n  //   for (const key in obj) {\n  //     if (obj[key]) {\n  //       const data = obj[key].getData();\n  //       console.log(`${key} data : R: ${data[0]} G: ${data[1]} B: ${data[2]} A: ${data[3]}`);\n  //     }\n  //   }\n  // }\n\n  constructor(gl, opts = {}) {\n    this.id = opts.id || 'gpu-grid-aggregator';\n    this.gl = gl;\n    this.state = {\n      // per weight GPU resources\n      weightAttributes: {},\n      textures: {},\n      meanTextures: {},\n      buffers: {},\n      framebuffers: {},\n      maxMinFramebuffers: {},\n      minFramebuffers: {},\n      maxFramebuffers: {},\n      equations: {},\n\n      // common resources to be deleted\n      resources: {},\n\n      // results\n      results: {}\n    };\n    this._hasGPUSupport =\n      isWebGL2(gl) && // gl_InstanceID usage in min/max calculation shaders\n      hasFeatures(\n        this.gl,\n        FEATURES.BLEND_EQUATION_MINMAX, // set min/max blend modes\n        FEATURES.COLOR_ATTACHMENT_RGBA32F, // render to float texture\n        FEATURES.TEXTURE_FLOAT // sample from a float texture\n      );\n    if (this._hasGPUSupport) {\n      this._setupModels();\n    }\n  }\n\n  // Delete owned resources.\n  delete() {\n    const {gridAggregationModel, allAggregationModel, meanTransform} = this;\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      resources\n    } = this.state;\n\n    gridAggregationModel?.delete();\n    allAggregationModel?.delete();\n    meanTransform?.delete();\n\n    deleteResources([\n      framebuffers,\n      textures,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      resources\n    ]);\n  }\n\n  // Perform aggregation and retun the results\n  run(opts = {}) {\n    // reset results\n    this.setState({results: {}});\n    const aggregationParams = this._normalizeAggregationParams(opts);\n    if (!this._hasGPUSupport) {\n      log.log(1, 'GPUGridAggregator: not supported')();\n    }\n    return this._runAggregation(aggregationParams);\n  }\n\n  // Reads aggregation data into JS Array object\n  // For WebGL1, data is available in JS Array objects already.\n  // For WebGL2, data is read from Buffer objects and cached for subsequent queries.\n  getData(weightId) {\n    const data = {};\n    const results = this.state.results;\n    if (!results[weightId].aggregationData) {\n      // cache the results if reading from the buffer (WebGL2 path)\n      results[weightId].aggregationData = results[weightId].aggregationBuffer.getData();\n    }\n    data.aggregationData = results[weightId].aggregationData;\n\n    // Check for optional results\n    for (const arrayName in ARRAY_BUFFER_MAP) {\n      const bufferName = ARRAY_BUFFER_MAP[arrayName];\n\n      if (results[weightId][arrayName] || results[weightId][bufferName]) {\n        // cache the result\n        results[weightId][arrayName] =\n          results[weightId][arrayName] || results[weightId][bufferName].getData();\n        data[arrayName] = results[weightId][arrayName];\n      }\n    }\n    return data;\n  }\n\n  updateShaders(shaderOptions = {}) {\n    this.setState({shaderOptions, modelDirty: true});\n  }\n\n  // PRIVATE\n\n  _normalizeAggregationParams(opts) {\n    const aggregationParams = {...DEFAULT_RUN_PARAMS, ...opts};\n    const {weights} = aggregationParams;\n    if (weights) {\n      aggregationParams.weights = normalizeWeightParams(weights);\n    }\n    return aggregationParams;\n  }\n\n  // Update priveate state\n  setState(updateObject) {\n    Object.assign(this.state, updateObject);\n  }\n\n  // GPU Aggregation methods\n\n  _getAggregateData(opts) {\n    const results = {};\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      resources\n    } = this.state;\n    const {weights} = opts;\n\n    for (const id in weights) {\n      results[id] = {};\n      const {needMin, needMax, combineMaxMin} = weights[id];\n      results[id].aggregationTexture = textures[id];\n      results[id].aggregationBuffer = readPixelsToBuffer(framebuffers[id], {\n        target: weights[id].aggregationBuffer, // update if a buffer is provided\n        sourceType: GL.FLOAT\n      });\n      if (needMin && needMax && combineMaxMin) {\n        results[id].maxMinBuffer = readPixelsToBuffer(maxMinFramebuffers[id], {\n          target: weights[id].maxMinBuffer, // update if a buffer is provided\n          sourceType: GL.FLOAT\n        });\n        results[id].maxMinTexture = resources[`${id}-maxMinTexture`];\n      } else {\n        if (needMin) {\n          results[id].minBuffer = readPixelsToBuffer(minFramebuffers[id], {\n            target: weights[id].minBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n          results[id].minTexture = resources[`${id}-minTexture`];\n        }\n        if (needMax) {\n          results[id].maxBuffer = readPixelsToBuffer(maxFramebuffers[id], {\n            target: weights[id].maxBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n          results[id].maxTexture = resources[`${id}-maxTexture`];\n        }\n      }\n    }\n    this._trackGPUResultBuffers(results, weights);\n    return results;\n  }\n\n  _renderAggregateData(opts) {\n    const {\n      cellSize,\n      projectPoints,\n      attributes,\n      moduleSettings,\n      numCol,\n      numRow,\n      weights,\n      translation,\n      scaling\n    } = opts;\n    const {maxMinFramebuffers, minFramebuffers, maxFramebuffers} = this.state;\n\n    const gridSize = [numCol, numRow];\n    const parameters = {\n      blend: true,\n      depthTest: false,\n      blendFunc: [GL.ONE, GL.ONE]\n    };\n    const uniforms = {\n      cellSize,\n      gridSize,\n      projectPoints,\n      translation,\n      scaling\n    };\n\n    for (const id in weights) {\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      this._renderToWeightsTexture({\n        id,\n        parameters,\n        moduleSettings,\n        uniforms,\n        gridSize,\n        attributes,\n        weights\n      });\n      if (combineMaxMin) {\n        this._renderToMaxMinTexture({\n          id,\n          parameters: {...parameters, blendEquation: MAX_MIN_BLEND_EQUATION},\n          gridSize,\n          minOrMaxFb: maxMinFramebuffers[id],\n          clearParams: {clearColor: [0, 0, 0, MAX_32_BIT_FLOAT]},\n          combineMaxMin\n        });\n      } else {\n        if (needMin) {\n          this._renderToMaxMinTexture({\n            id,\n            parameters: {...parameters, blendEquation: MIN_BLEND_EQUATION},\n            gridSize,\n            minOrMaxFb: minFramebuffers[id],\n            clearParams: {clearColor: [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]},\n            combineMaxMin\n          });\n        }\n        if (needMax) {\n          this._renderToMaxMinTexture({\n            id,\n            parameters: {...parameters, blendEquation: MAX_BLEND_EQUATION},\n            gridSize,\n            minOrMaxFb: maxFramebuffers[id],\n            clearParams: {clearColor: [0, 0, 0, 0]},\n            combineMaxMin\n          });\n        }\n      }\n    }\n  }\n\n  // render all aggregated grid-cells to generate Min, Max or MaxMin data texture\n  _renderToMaxMinTexture(opts) {\n    const {id, parameters, gridSize, minOrMaxFb, combineMaxMin, clearParams = {}} = opts;\n    const {framebuffers} = this.state;\n    const {gl, allAggregationModel} = this;\n\n    withParameters(\n      gl,\n      {\n        ...clearParams,\n        framebuffer: minOrMaxFb,\n        viewport: [0, 0, gridSize[0], gridSize[1]]\n      },\n      () => {\n        gl.clear(gl.COLOR_BUFFER_BIT);\n\n        allAggregationModel.draw({\n          parameters,\n          uniforms: {\n            uSampler: framebuffers[id].texture,\n            gridSize,\n            combineMaxMin\n          }\n        });\n      }\n    );\n  }\n\n  // render all data points to aggregate weights\n  _renderToWeightsTexture(opts) {\n    const {id, parameters, moduleSettings, uniforms, gridSize, weights} = opts;\n    const {framebuffers, equations, weightAttributes} = this.state;\n    const {gl, gridAggregationModel} = this;\n    const {operation} = weights[id];\n\n    const clearColor =\n      operation === AGGREGATION_OPERATION.MIN\n        ? [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]\n        : [0, 0, 0, 0];\n    withParameters(\n      gl,\n      {\n        framebuffer: framebuffers[id],\n        viewport: [0, 0, gridSize[0], gridSize[1]],\n        clearColor\n      },\n      () => {\n        gl.clear(gl.COLOR_BUFFER_BIT);\n\n        const attributes = {weights: weightAttributes[id]};\n        gridAggregationModel.draw({\n          parameters: {...parameters, blendEquation: equations[id]},\n          moduleSettings,\n          uniforms,\n          attributes\n        });\n      }\n    );\n\n    if (operation === AGGREGATION_OPERATION.MEAN) {\n      const {meanTextures, textures} = this.state;\n      const transformOptions = {\n        _sourceTextures: {aggregationValues: meanTextures[id]}, // contains aggregated data\n        _targetTexture: textures[id], // store mean values,\n        elementCount: textures[id].width * textures[id].height\n      };\n      if (this.meanTransform) {\n        this.meanTransform.update(transformOptions);\n      } else {\n        this.meanTransform = getMeanTransform(gl, transformOptions);\n      }\n      this.meanTransform.run({\n        parameters: {\n          blend: false,\n          depthTest: false\n        }\n      });\n\n      // update framebuffer with mean results so readPixelsToBuffer returns mean values\n      framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: textures[id]});\n    }\n  }\n\n  _runAggregation(opts) {\n    this._updateModels(opts);\n    this._setupFramebuffers(opts);\n    this._renderAggregateData(opts);\n    const results = this._getAggregateData(opts);\n    this.setState({results});\n    return results;\n  }\n\n  // set up framebuffer for each weight\n  /* eslint-disable complexity, max-depth, max-statements*/\n  _setupFramebuffers(opts) {\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      equations\n    } = this.state;\n    const {weights} = opts;\n    const {numCol, numRow} = opts;\n    const framebufferSize = {width: numCol, height: numRow};\n    for (const id in weights) {\n      const {needMin, needMax, combineMaxMin, operation} = weights[id];\n      textures[id] =\n        weights[id].aggregationTexture ||\n        textures[id] ||\n        getFloatTexture(this.gl, {id: `${id}-texture`, width: numCol, height: numRow});\n      textures[id].resize(framebufferSize);\n      let texture = textures[id];\n      if (operation === AGGREGATION_OPERATION.MEAN) {\n        // For MEAN, we first aggregatet into a temp texture\n        meanTextures[id] =\n          meanTextures[id] ||\n          getFloatTexture(this.gl, {id: `${id}-mean-texture`, width: numCol, height: numRow});\n        meanTextures[id].resize(framebufferSize);\n        texture = meanTextures[id];\n      }\n      if (framebuffers[id]) {\n        framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: texture});\n      } else {\n        framebuffers[id] = getFramebuffer(this.gl, {\n          id: `${id}-fb`,\n          width: numCol,\n          height: numRow,\n          texture\n        });\n      }\n      framebuffers[id].resize(framebufferSize);\n      equations[id] = EQUATION_MAP[operation] || EQUATION_MAP.SUM;\n      // For min/max framebuffers will use default size 1X1\n      if (needMin || needMax) {\n        if (needMin && needMax && combineMaxMin) {\n          if (!maxMinFramebuffers[id]) {\n            texture = weights[id].maxMinTexture || this._getMinMaxTexture(`${id}-maxMinTexture`);\n            maxMinFramebuffers[id] = getFramebuffer(this.gl, {id: `${id}-maxMinFb`, texture});\n          }\n        } else {\n          if (needMin) {\n            if (!minFramebuffers[id]) {\n              texture = weights[id].minTexture || this._getMinMaxTexture(`${id}-minTexture`);\n              minFramebuffers[id] = getFramebuffer(this.gl, {\n                id: `${id}-minFb`,\n                texture\n              });\n            }\n          }\n          if (needMax) {\n            if (!maxFramebuffers[id]) {\n              texture = weights[id].maxTexture || this._getMinMaxTexture(`${id}-maxTexture`);\n              maxFramebuffers[id] = getFramebuffer(this.gl, {\n                id: `${id}-maxFb`,\n                texture\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n  /* eslint-enable complexity, max-depth, max-statements */\n\n  _getMinMaxTexture(name) {\n    const {resources} = this.state;\n    if (!resources[name]) {\n      resources[name] = getFloatTexture(this.gl, {id: `resourceName`});\n    }\n    return resources[name];\n  }\n\n  _setupModels({numCol = 0, numRow = 0} = {}) {\n    const {gl} = this;\n    const {shaderOptions} = this.state;\n    this.gridAggregationModel?.delete();\n    this.gridAggregationModel = getAggregationModel(gl, shaderOptions);\n    if (!this.allAggregationModel) {\n      const instanceCount = numCol * numRow;\n      this.allAggregationModel = getAllAggregationModel(gl, instanceCount);\n    }\n  }\n\n  // set up buffers for all weights\n  _setupWeightAttributes(opts) {\n    const {weightAttributes} = this.state;\n    const {weights} = opts;\n    for (const id in weights) {\n      weightAttributes[id] = opts.attributes[id];\n    }\n  }\n\n  // GPU Aggregation results are provided in Buffers, if new Buffer objects are created track them for later deletion.\n  /* eslint-disable max-depth */\n  _trackGPUResultBuffers(results, weights) {\n    const {resources} = this.state;\n    for (const id in results) {\n      if (results[id]) {\n        for (const bufferName of BUFFER_NAMES) {\n          if (results[id][bufferName] && weights[id][bufferName] !== results[id][bufferName]) {\n            // No result buffer is provided in weights object, `readPixelsToBuffer` has created a new Buffer object\n            // collect the new buffer for garabge collection\n            const name = `gpu-result-${id}-${bufferName}`;\n            if (resources[name]) {\n              resources[name].delete();\n            }\n            resources[name] = results[id][bufferName];\n          }\n        }\n      }\n    }\n  }\n  /* eslint-enable max-depth */\n\n  _updateModels(opts) {\n    const {vertexCount, attributes, numCol, numRow} = opts;\n    const {modelDirty} = this.state;\n\n    if (modelDirty) {\n      this._setupModels(opts);\n      this.setState({modelDirty: false});\n    }\n\n    // this maps color/elevation to weight name.\n    this._setupWeightAttributes(opts);\n\n    this.gridAggregationModel.setVertexCount(vertexCount);\n    this.gridAggregationModel.setAttributes(attributes);\n\n    this.allAggregationModel.setInstanceCount(numCol * numRow);\n  }\n}\n\n// HELPER METHODS\n\nfunction normalizeWeightParams(weights) {\n  const result = {};\n  for (const id in weights) {\n    result[id] = {...DEFAULT_WEIGHT_PARAMS, ...weights[id]};\n  }\n  return result;\n}\n\nfunction deleteResources(resources) {\n  resources = Array.isArray(resources) ? resources : [resources];\n  resources.forEach(obj => {\n    for (const name in obj) {\n      obj[name].delete();\n    }\n  });\n}\n\nfunction getAggregationModel(gl, shaderOptions) {\n  const shaders = mergeShaders(\n    {\n      vs: AGGREGATE_TO_GRID_VS,\n      fs: AGGREGATE_TO_GRID_FS,\n      modules: [fp64arithmetic, project32]\n    },\n    shaderOptions\n  );\n\n  return new Model(gl, {\n    id: 'Gird-Aggregation-Model',\n    vertexCount: 1,\n    drawMode: GL.POINTS,\n    ...shaders\n  });\n}\n\nfunction getAllAggregationModel(gl, instanceCount) {\n  return new Model(gl, {\n    id: 'All-Aggregation-Model',\n    vs: AGGREGATE_ALL_VS,\n    fs: AGGREGATE_ALL_FS,\n    modules: [fp64arithmetic],\n    vertexCount: 1,\n    drawMode: GL.POINTS,\n    isInstanced: true,\n    instanceCount,\n    attributes: {\n      position: [0, 0]\n    }\n  });\n}\n\nfunction getMeanTransform(gl, opts) {\n  return new Transform(gl, {\n    vs: TRANSFORM_MEAN_VS,\n    _targetTextureVarying: 'meanValues',\n    ...opts\n  });\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport const defaultColorRange: [number, number, number][] = [\n  [255, 255, 178],\n  [254, 217, 118],\n  [254, 178, 76],\n  [253, 141, 60],\n  [240, 59, 32],\n  [189, 0, 38]\n];\n\n// Converts a colorRange array to a flat array with 4 components per color\nexport function colorRangeToFlatArray(colorRange, normalize = false, ArrayType = Float32Array) {\n  let flatArray;\n\n  if (Number.isFinite(colorRange[0])) {\n    // its already a flat array.\n    flatArray = new ArrayType(colorRange);\n  } else {\n    // flatten it\n    flatArray = new ArrayType(colorRange.length * 4);\n    let index = 0;\n\n    for (let i = 0; i < colorRange.length; i++) {\n      const color = colorRange[i];\n      flatArray[index++] = color[0];\n      flatArray[index++] = color[1];\n      flatArray[index++] = color[2];\n      flatArray[index++] = Number.isFinite(color[3]) ? color[3] : 255;\n    }\n  }\n\n  if (normalize) {\n    for (let i = 0; i < flatArray.length; i++) {\n      flatArray[i] /= 255;\n    }\n  }\n  return flatArray;\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME screen-grid-layer-vertex-shader\n#define RANGE_COUNT 6\n\nattribute vec3 positions;\nattribute vec3 instancePositions;\nattribute vec4 instanceCounts;\nattribute vec3 instancePickingColors;\n\nuniform float opacity;\nuniform vec3 cellScale;\nuniform vec4 minColor;\nuniform vec4 maxColor;\nuniform vec4 colorRange[RANGE_COUNT];\nuniform vec2 colorDomain;\nuniform bool shouldUseMinMax;\nuniform sampler2D maxTexture;\n\nvarying vec4 vColor;\nvarying float vSampleCount;\n\nvec4 quantizeScale(vec2 domain, vec4 range[RANGE_COUNT], float value) {\n  vec4 outColor = vec4(0., 0., 0., 0.);\n  if (value >= domain.x && value <= domain.y) {\n    float domainRange = domain.y - domain.x;\n    if (domainRange <= 0.) {\n      outColor = colorRange[0];\n    } else {\n      float rangeCount = float(RANGE_COUNT);\n      float rangeStep = domainRange / rangeCount;\n      float idx = floor((value - domain.x) / rangeStep);\n      idx = clamp(idx, 0., rangeCount - 1.);\n      int intIdx = int(idx);\n      outColor = colorRange[intIdx];\n    }\n  }\n  outColor = outColor / 255.;\n  return outColor;\n}\n\nvoid main(void) {\n  vSampleCount = instanceCounts.a;\n\n  float weight = instanceCounts.r;\n  float maxWeight = texture2D(maxTexture, vec2(0.5)).r;\n\n  float step = weight / maxWeight;\n  vec4 minMaxColor = mix(minColor, maxColor, step) / 255.;\n\n  vec2 domain = colorDomain;\n  float domainMaxValid = float(colorDomain.y != 0.);\n  domain.y = mix(maxWeight, colorDomain.y, domainMaxValid);\n  vec4 rangeColor = quantizeScale(domain, colorRange, weight);\n\n  float rangeMinMax = float(shouldUseMinMax);\n  vec4 color = mix(rangeColor, minMaxColor, rangeMinMax);\n  vColor = vec4(color.rgb, color.a * opacity);\n\n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\n  picking_setPickingColor(instancePickingColors);\n\n  gl_Position = vec4(instancePositions + positions * cellScale, 1.);\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* fragment shader for the grid-layer */\nexport default `\\\n#define SHADER_NAME screen-grid-layer-fragment-shader\n\nprecision highp float;\n\nvarying vec4 vColor;\nvarying float vSampleCount;\n\nvoid main(void) {\n  if (vSampleCount <= 0.0) {\n    discard;\n  }\n  gl_FragColor = vColor;\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n", "// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, FEATURES, hasFeatures, Texture2D, DefaultProps} from '@luma.gl/core';\nimport {Layer, LayerProps, log, picking, UpdateParameters} from '@deck.gl/core';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport vs from './screen-grid-layer-vertex.glsl';\nimport fs from './screen-grid-layer-fragment.glsl';\nimport type {_ScreenGridLayerProps} from './screen-grid-layer';\n\nconst DEFAULT_MINCOLOR = [0, 0, 0, 0];\nconst DEFAULT_MAXCOLOR = [0, 255, 0, 255];\nconst COLOR_PROPS = ['minColor', 'maxColor', 'colorRange', 'colorDomain'];\n\nconst defaultProps: DefaultProps<ScreenGridCellLayerProps> = {\n  cellSizePixels: {value: 100, min: 1},\n  cellMarginPixels: {value: 2, min: 0, max: 5},\n\n  colorDomain: null,\n  colorRange: defaultColorRange\n};\n\n/** All properties supported by ScreenGridCellLayer. */\nexport type ScreenGridCellLayerProps<DataT = any> = _ScreenGridCellLayerProps<DataT> & LayerProps;\n\n/** Proprties added by ScreenGridCellLayer. */\nexport type _ScreenGridCellLayerProps<DataT> = _ScreenGridLayerProps<DataT> & {\n  maxTexture: Texture2D;\n};\n\nexport default class ScreenGridCellLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_ScreenGridCellLayerProps<DataT>>\n> {\n  static layerName = 'ScreenGridCellLayer';\n  static defaultProps = defaultProps;\n\n  static isSupported(gl) {\n    return hasFeatures(gl, [FEATURES.TEXTURE_FLOAT]);\n  }\n\n  state!: Layer['state'] & {\n    model: Model;\n  };\n  getShaders() {\n    return {vs, fs, modules: [picking]};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.addInstanced({\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      instancePositions: {size: 3, update: this.calculateInstancePositions},\n      instanceCounts: {size: 4, noAlloc: true}\n    });\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n\n  shouldUpdateState({changeFlags}) {\n    // 'instanceCounts' buffer contetns change on viewport change.\n    return changeFlags.somethingChanged;\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n\n    const {oldProps, props, changeFlags} = params;\n\n    const attributeManager = this.getAttributeManager()!;\n    if (props.numInstances !== oldProps.numInstances) {\n      attributeManager.invalidateAll();\n    } else if (oldProps.cellSizePixels !== props.cellSizePixels) {\n      attributeManager.invalidate('instancePositions');\n    }\n\n    this._updateUniforms(oldProps, props, changeFlags);\n  }\n\n  draw({uniforms}) {\n    const {parameters, maxTexture} = this.props;\n    const minColor = this.props.minColor || DEFAULT_MINCOLOR;\n    const maxColor = this.props.maxColor || DEFAULT_MAXCOLOR;\n\n    // If colorDomain not specified we use default domain [1, maxCount]\n    // maxCount value will be sampled form maxTexture in vertex shader.\n    const colorDomain = this.props.colorDomain || [1, 0];\n    const {model} = this.state;\n    model\n      .setUniforms(uniforms)\n      .setUniforms({\n        minColor,\n        maxColor,\n        maxTexture,\n        colorDomain\n      })\n      .draw({\n        parameters: {\n          depthTest: false,\n          depthMask: false,\n          ...parameters\n        }\n      });\n  }\n\n  calculateInstancePositions(attribute, {numInstances}) {\n    const {width, height} = this.context.viewport;\n    const {cellSizePixels} = this.props;\n    const numCol = Math.ceil(width / cellSizePixels);\n\n    const {value, size} = attribute;\n\n    for (let i = 0; i < numInstances; i++) {\n      const x = i % numCol;\n      const y = Math.floor(i / numCol);\n      value[i * size + 0] = ((x * cellSizePixels) / width) * 2 - 1;\n      value[i * size + 1] = 1 - ((y * cellSizePixels) / height) * 2;\n      value[i * size + 2] = 0;\n    }\n  }\n\n  // Private Methods\n\n  _getModel(gl: WebGLRenderingContext): Model {\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        attributes: {\n          positions: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  _shouldUseMinMax(): boolean {\n    const {minColor, maxColor, colorDomain, colorRange} = this.props;\n    if (minColor || maxColor) {\n      log.deprecated('ScreenGridLayer props: minColor and maxColor', 'colorRange, colorDomain')();\n      return true;\n    }\n    // minColor and maxColor not supplied, check if colorRange or colorDomain supplied.\n    // NOTE: colorDomain and colorRange are experimental features, use them only when supplied.\n    if (colorDomain || colorRange) {\n      return false;\n    }\n    // None specified, use default minColor and maxColor\n    return true;\n  }\n\n  _updateUniforms(oldProps, props, changeFlags): void {\n    const {model} = this.state;\n    if (COLOR_PROPS.some(key => oldProps[key] !== props[key])) {\n      model.setUniforms({shouldUseMinMax: this._shouldUseMinMax()});\n    }\n\n    if (oldProps.colorRange !== props.colorRange) {\n      model.setUniforms({colorRange: colorRangeToFlatArray(props.colorRange)});\n    }\n\n    if (\n      oldProps.cellMarginPixels !== props.cellMarginPixels ||\n      oldProps.cellSizePixels !== props.cellSizePixels ||\n      changeFlags.viewportChanged\n    ) {\n      const {width, height} = this.context.viewport;\n      const {cellSizePixels, cellMarginPixels} = this.props;\n      const margin = cellSizePixels > cellMarginPixels ? cellMarginPixels : 0;\n\n      const cellScale = new Float32Array([\n        ((cellSizePixels - margin) / width) * 2,\n        (-(cellSizePixels - margin) / height) * 2,\n        1\n      ]);\n      model.setUniforms({cellScale});\n    }\n  }\n}\n", "// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport function filterProps(props, filterKeys) {\n  const filteredProps = {};\n  for (const key in props) {\n    if (!filterKeys.includes(key)) {\n      filteredProps[key] = props[key];\n    }\n  }\n  return filteredProps;\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  CompositeLayer,\n  AttributeManager,\n  LayerDataSource,\n  _compareProps as compareProps,\n  UpdateParameters,\n  CompositeLayerProps\n} from '@deck.gl/core';\nimport {cssToDeviceRatio} from '@luma.gl/core';\nimport {filterProps} from './utils/prop-utils';\n\nexport type AggregationLayerProps<DataT> = CompositeLayerProps & {\n  data: LayerDataSource<DataT>;\n};\n\nexport default abstract class AggregationLayer<\n  DataT,\n  ExtraPropsT extends {} = {}\n> extends CompositeLayer<Required<AggregationLayer<DataT>> & ExtraPropsT> {\n  static layerName = 'AggregationLayer';\n\n  state!: CompositeLayer['state'] & {\n    ignoreProps?: Record<string, any>;\n    dimensions?: any;\n  };\n\n  initializeAggregationLayer(dimensions: any) {\n    super.initializeState(this.context);\n\n    this.setState({\n      // Layer props , when changed doesn't require updating aggregation\n      ignoreProps: filterProps((this.constructor as any)._propTypes, dimensions.data.props),\n      dimensions\n    });\n  }\n\n  updateState(opts: UpdateParameters<this>) {\n    super.updateState(opts);\n    const {changeFlags} = opts;\n    if (changeFlags.extensionsChanged) {\n      const shaders = this.getShaders({});\n      if (shaders && shaders.defines) {\n        shaders.defines.NON_INSTANCED_MODEL = 1;\n      }\n      this.updateShaders(shaders);\n    }\n\n    // Explictly call to update attributes as 'CompositeLayer' doesn't call this\n    this._updateAttributes();\n  }\n\n  updateAttributes(changedAttributes) {\n    // Super classes, can refer to state.changedAttributes to determine what\n    // attributes changed\n    this.setState({changedAttributes});\n  }\n\n  getAttributes() {\n    return this.getAttributeManager()!.getShaderAttributes();\n  }\n\n  getModuleSettings() {\n    // For regular layer draw this happens during draw cycle (_drawLayersInViewport) not during update cycle\n    // For aggregation layers this is called during updateState to update aggregation data\n    // NOTE: it is similar to LayerPass._getModuleParameters() but doesn't inlcude `effects` it is not needed for aggregation\n    const {viewport, mousePosition, gl} = this.context;\n    const moduleSettings = Object.assign(Object.create(this.props), {\n      viewport,\n      mousePosition,\n      pickingActive: 0,\n      devicePixelRatio: cssToDeviceRatio(gl)\n    });\n    return moduleSettings;\n  }\n\n  updateShaders(shaders) {\n    // Default implemention is empty, subclasses can update their Model objects if needed\n  }\n\n  /**\n   * Checks if aggregation is dirty\n   * @param {Object} updateOpts - object {props, oldProps, changeFlags}\n   * @param {Object} params - object {dimension, compareAll}\n   * @param {Object} params.dimension - {props, accessors} array of props and/or accessors\n   * @param {Boolean} params.compareAll - when `true` it will include non layer props for comparision\n   * @returns {Boolean} - returns true if dimensions' prop or accessor is changed\n   **/\n  isAggregationDirty(\n    updateOpts,\n    params: {compareAll?: boolean; dimension?: any} = {}\n  ): string | boolean {\n    const {props, oldProps, changeFlags} = updateOpts;\n    const {compareAll = false, dimension} = params;\n    const {ignoreProps} = this.state;\n    const {props: dataProps, accessors = []} = dimension;\n    const {updateTriggersChanged} = changeFlags;\n    if (changeFlags.dataChanged) {\n      return true;\n    }\n    if (updateTriggersChanged) {\n      if (updateTriggersChanged.all) {\n        return true;\n      }\n      for (const accessor of accessors) {\n        if (updateTriggersChanged[accessor]) {\n          return true;\n        }\n      }\n    }\n    if (compareAll) {\n      if (changeFlags.extensionsChanged) {\n        return true;\n      }\n      // Compare non layer props too (like extension props)\n      // ignoreprops refers to all Layer props other than aggregation props that need to be comapred\n      return compareProps({\n        oldProps,\n        newProps: props,\n        ignoreProps,\n        propTypes: (this.constructor as any)._propTypes\n      });\n    }\n    // Compare props of the dimension\n    for (const name of dataProps) {\n      if (props[name] !== oldProps[name]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks if an attribute is changed\n   * @param {String} name - name of the attribute\n   * @returns {Boolean} - `true` if attribute `name` is changed, `false` otherwise,\n   *                       If `name` is not passed or `undefiend`, `true` if any attribute is changed, `false` otherwise\n   **/\n  isAttributeChanged(name?: string) {\n    const {changedAttributes} = this.state;\n    if (!name) {\n      // if name not specified return true if any attribute is changed\n      return !isObjectEmpty(changedAttributes);\n    }\n    return changedAttributes && changedAttributes[name] !== undefined;\n  }\n\n  // Private\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n}\n\n// Helper methods\n\n// Returns true if given object is empty, false otherwise.\nfunction isObjectEmpty(obj) {\n  let isEmpty = true;\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n  return isEmpty;\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {log} from '@deck.gl/core';\n\n// a scale function wrapper just like d3-scales\nexport function getScale(domain, range, scaleFunction) {\n  const scale = scaleFunction;\n  scale.domain = () => domain;\n  scale.range = () => range;\n\n  return scale;\n}\n\n// Quantize scale is similar to linear scales,\n// except it uses a discrete rather than continuous range\n// return a quantize scale function\nexport function getQuantizeScale(domain, range) {\n  const scaleFunction = value => quantizeScale(domain, range, value);\n\n  return getScale(domain, range, scaleFunction);\n}\n\n// return a linear scale function\nexport function getLinearScale(domain, range) {\n  const scaleFunction = value => linearScale(domain, range, value);\n\n  return getScale(domain, range, scaleFunction);\n}\n\nexport function getQuantileScale(domain, range) {\n  // calculate threshold\n  const sortedDomain = domain.sort(ascending);\n  let i = 0;\n  const n = Math.max(1, range.length);\n  const thresholds = new Array(n - 1);\n  while (++i < n) {\n    thresholds[i - 1] = threshold(sortedDomain, i / n);\n  }\n\n  const scaleFunction = value => thresholdsScale(thresholds, range, value);\n  scaleFunction.thresholds = () => thresholds;\n\n  return getScale(domain, range, scaleFunction);\n}\n\nfunction ascending(a, b) {\n  return a - b;\n}\n\nfunction threshold(domain, fraction) {\n  const domainLength = domain.length;\n  if (fraction <= 0 || domainLength < 2) {\n    return domain[0];\n  }\n  if (fraction >= 1) {\n    return domain[domainLength - 1];\n  }\n\n  const domainFraction = (domainLength - 1) * fraction;\n  const lowIndex = Math.floor(domainFraction);\n  const low = domain[lowIndex];\n  const high = domain[lowIndex + 1];\n  return low + (high - low) * (domainFraction - lowIndex);\n}\n\nfunction bisectRight(a, x) {\n  let lo = 0;\n  let hi = a.length;\n  while (lo < hi) {\n    const mid = (lo + hi) >>> 1;\n    if (ascending(a[mid], x) > 0) {\n      hi = mid;\n    } else {\n      lo = mid + 1;\n    }\n  }\n  return lo;\n}\n\n// return a quantize scale function\nfunction thresholdsScale(thresholds, range, value) {\n  return range[bisectRight(thresholds, value)];\n}\n\n// ordinal Scale\nfunction ordinalScale(domain, domainMap, range, value) {\n  const key = `${value}`;\n  let d = domainMap.get(key);\n  if (d === undefined) {\n    // update the domain\n    d = domain.push(value);\n    domainMap.set(key, d);\n  }\n  return range[(d - 1) % range.length];\n}\n\nexport function getOrdinalScale(domain, range) {\n  const domainMap = new Map();\n  const uniqueDomain = [];\n  for (const d of domain) {\n    const key = `${d}`;\n    if (!domainMap.has(key)) {\n      domainMap.set(key, uniqueDomain.push(d));\n    }\n  }\n\n  const scaleFunction = value => ordinalScale(uniqueDomain, domainMap, range, value);\n\n  return getScale(domain, range, scaleFunction);\n}\n\n// Quantize scale is similar to linear scales,\n// except it uses a discrete rather than continuous range\nexport function quantizeScale(domain, range, value) {\n  const domainRange = domain[1] - domain[0];\n  if (domainRange <= 0) {\n    log.warn('quantizeScale: invalid domain, returning range[0]')();\n    return range[0];\n  }\n  const step = domainRange / range.length;\n  const idx = Math.floor((value - domain[0]) / step);\n  const clampIdx = Math.max(Math.min(idx, range.length - 1), 0);\n\n  return range[clampIdx];\n}\n\n// Linear scale maps continuous domain to continuous range\nexport function linearScale(domain, range, value) {\n  return ((value - domain[0]) / (domain[1] - domain[0])) * (range[1] - range[0]) + range[0];\n}\n\n// get scale domains\nfunction notNullOrUndefined(d) {\n  return d !== undefined && d !== null;\n}\n\nexport function unique(values) {\n  const results = [];\n  values.forEach(v => {\n    if (!results.includes(v) && notNullOrUndefined(v)) {\n      results.push(v);\n    }\n  });\n\n  return results;\n}\n\nfunction getTruthyValues(data, valueAccessor) {\n  const values = typeof valueAccessor === 'function' ? data.map(valueAccessor) : data;\n  return values.filter(notNullOrUndefined);\n}\n\nexport function getLinearDomain(data, valueAccessor) {\n  const sorted = getTruthyValues(data, valueAccessor).sort();\n  return sorted.length ? [sorted[0], sorted[sorted.length - 1]] : [0, 0];\n}\n\nexport function getQuantileDomain(data, valueAccessor) {\n  return getTruthyValues(data, valueAccessor);\n}\n\nexport function getOrdinalDomain(data, valueAccessor) {\n  return unique(getTruthyValues(data, valueAccessor));\n}\n\nexport function getScaleDomain(scaleType, data, valueAccessor) {\n  switch (scaleType) {\n    case 'quantize':\n    case 'linear':\n      return getLinearDomain(data, valueAccessor);\n\n    case 'quantile':\n      return getQuantileDomain(data, valueAccessor);\n\n    case 'ordinal':\n      return getOrdinalDomain(data, valueAccessor);\n\n    default:\n      return getLinearDomain(data, valueAccessor);\n  }\n}\n\nexport function clamp(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\n\nexport function getScaleFunctionByScaleType(scaleType) {\n  switch (scaleType) {\n    case 'quantize':\n      return getQuantizeScale;\n    case 'linear':\n      return getLinearScale;\n    case 'quantile':\n      return getQuantileScale;\n    case 'ordinal':\n      return getOrdinalScale;\n\n    default:\n      return getQuantizeScale;\n  }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// getValue takes an array of points returns a value to sort the bins on.\n// by default it returns the number of points\n// this is where to pass in a function to color the bins by\n// avg/mean/max of specific value of the point\nconst defaultGetValue = points => points.length;\n\nimport {clamp, getQuantileDomain, getOrdinalDomain} from './scale-utils';\n\nconst MAX_32_BIT_FLOAT = 3.402823466e38;\n\n// access array of points in each bin\nconst defaultGetPoints = bin => bin.points;\n// access index of each bin\nconst defaultGetIndex = bin => bin.index;\n\n// d3-scending\nconst ascending = (a, b) => (a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN);\n\nconst defaultProps = {\n  getValue: defaultGetValue,\n  getPoints: defaultGetPoints,\n  getIndex: defaultGetIndex,\n  filterData: null\n};\n\nexport type AggregatedBin = {\n  i: number;\n  value: any;\n  counts: number;\n};\n\nexport default class BinSorter {\n  maxCount!: number;\n  maxValue!: number;\n  minValue!: number;\n  totalCount!: number;\n\n  aggregatedBins: AggregatedBin[];\n  sortedBins!: AggregatedBin[];\n  binMap: Record<number, AggregatedBin>;\n\n  constructor(bins = [], props: Partial<typeof defaultProps> = defaultProps) {\n    this.aggregatedBins = this.getAggregatedBins(bins, props);\n    this._updateMinMaxValues();\n    this.binMap = this.getBinMap();\n  }\n\n  /**\n   * Get an array of object with aggregated values and index of bins\n   * Array object will be sorted by value optionally.\n   * @param {Array} bins\n   * @param {Function} getValue\n   * @return {Array} array of values and index lookup\n   */\n  getAggregatedBins(bins, props): AggregatedBin[] {\n    const {\n      getValue = defaultGetValue,\n      getPoints = defaultGetPoints,\n      getIndex = defaultGetIndex,\n      filterData\n    } = props;\n\n    const hasFilter = typeof filterData === 'function';\n    const binCount = bins.length;\n    const aggregatedBins: AggregatedBin[] = [];\n    let index = 0;\n\n    for (let binIndex = 0; binIndex < binCount; binIndex++) {\n      const bin = bins[binIndex];\n      const points = getPoints(bin);\n      const i = getIndex(bin);\n\n      const filteredPoints = hasFilter ? points.filter(filterData) : points;\n\n      bin.filteredPoints = hasFilter ? filteredPoints : null;\n\n      const value = filteredPoints.length ? getValue(filteredPoints) : null;\n\n      if (value !== null && value !== undefined) {\n        // filter bins if value is null or undefined\n        aggregatedBins[index] = {\n          i: Number.isFinite(i) ? i : binIndex,\n          value,\n          counts: filteredPoints.length\n        };\n        index++;\n      }\n    }\n    return aggregatedBins;\n  }\n\n  _percentileToIndex(percentileRange): [number, number] {\n    const len = this.sortedBins.length;\n    if (len < 2) {\n      return [0, 0];\n    }\n\n    const [lower, upper] = percentileRange.map(n => clamp(n, 0, 100));\n\n    const lowerIdx = Math.ceil((lower / 100) * (len - 1));\n    const upperIdx = Math.floor((upper / 100) * (len - 1));\n\n    return [lowerIdx, upperIdx];\n  }\n\n  /**\n   * Get a mapping from cell/hexagon index to sorted bin\n   * This is used to retrieve bin value for color calculation\n   * @return {Object} bin index to aggregatedBins\n   */\n  getBinMap(): Record<number, AggregatedBin> {\n    const binMap = {};\n    for (const bin of this.aggregatedBins) {\n      binMap[bin.i] = bin;\n    }\n    return binMap;\n  }\n\n  // Private\n\n  /**\n   * Get ths max count of all bins\n   */\n  _updateMinMaxValues(): void {\n    let maxCount = 0;\n    let maxValue = 0;\n    let minValue = MAX_32_BIT_FLOAT;\n    let totalCount = 0;\n    for (const x of this.aggregatedBins) {\n      maxCount = maxCount > x.counts ? maxCount : x.counts;\n      maxValue = maxValue > x.value ? maxValue : x.value;\n      minValue = minValue < x.value ? minValue : x.value;\n      totalCount += x.counts;\n    }\n    this.maxCount = maxCount;\n    this.maxValue = maxValue;\n    this.minValue = minValue;\n    this.totalCount = totalCount;\n  }\n\n  /**\n   * Get range of values of all bins\n   * @param {Number[]} range\n   * @param {Number} range[0] - lower bound\n   * @param {Number} range[1] - upper bound\n   * @return {Array} array of new value range\n   */\n  getValueRange(percentileRange: [number, number]): [number, number] {\n    if (!this.sortedBins) {\n      this.sortedBins = this.aggregatedBins.sort((a, b) => ascending(a.value, b.value));\n    }\n    if (!this.sortedBins.length) {\n      // @ts-expect-error\n      return [];\n    }\n    let lowerIdx = 0;\n    let upperIdx = this.sortedBins.length - 1;\n\n    if (Array.isArray(percentileRange)) {\n      const idxRange = this._percentileToIndex(percentileRange);\n      lowerIdx = idxRange[0];\n      upperIdx = idxRange[1];\n    }\n\n    return [this.sortedBins[lowerIdx].value, this.sortedBins[upperIdx].value];\n  }\n\n  getValueDomainByScale(scale: string, [lower = 0, upper = 100] = []) {\n    if (!this.sortedBins) {\n      this.sortedBins = this.aggregatedBins.sort((a, b) => ascending(a.value, b.value));\n    }\n    if (!this.sortedBins.length) {\n      return [];\n    }\n    const indexEdge = this._percentileToIndex([lower, upper]);\n\n    return this._getScaleDomain(scale, indexEdge);\n  }\n\n  _getScaleDomain(scaleType: string, [lowerIdx, upperIdx]: [number, number]): [number, number] {\n    const bins = this.sortedBins;\n\n    switch (scaleType) {\n      case 'quantize':\n      case 'linear':\n        return [bins[lowerIdx].value, bins[upperIdx].value];\n\n      case 'quantile':\n        return getQuantileDomain(bins.slice(lowerIdx, upperIdx + 1), d => d.value);\n\n      case 'ordinal':\n        return getOrdinalDomain(bins, d => d.value) as [number, number];\n\n      default:\n        return [bins[lowerIdx].value, bins[upperIdx].value];\n    }\n  }\n}\n", "import {log, COORDINATE_SYSTEM} from '@deck.gl/core';\nconst R_EARTH = 6378000;\n\nfunction toFinite(n) {\n  return Number.isFinite(n) ? n : 0;\n}\n\n// Parse input data to build positions, wights and bounding box.\n/* eslint-disable max-statements */\nexport function getBoundingBox(attributes, vertexCount) {\n  // TODO - value might not exist (e.g. attribute transition)\n  const positions = attributes.positions.value;\n\n  let yMin = Infinity;\n  let yMax = -Infinity;\n  let xMin = Infinity;\n  let xMax = -Infinity;\n  let y;\n  let x;\n\n  for (let i = 0; i < vertexCount; i++) {\n    x = positions[i * 3];\n    y = positions[i * 3 + 1];\n    yMin = y < yMin ? y : yMin;\n    yMax = y > yMax ? y : yMax;\n    xMin = x < xMin ? x : xMin;\n    xMax = x > xMax ? x : xMax;\n  }\n\n  const boundingBox = {\n    xMin: toFinite(xMin),\n    xMax: toFinite(xMax),\n    yMin: toFinite(yMin),\n    yMax: toFinite(yMax)\n  };\n\n  return boundingBox;\n}\n/* eslint-enable max-statements */\n\n// Returns XY translation for positions to peform aggregation in +ve sapce\nfunction getTranslation(boundingBox, gridOffset, coordinateSystem, viewport) {\n  const {width, height} = viewport;\n\n  // Origin to define grid\n  // DEFAULT coordinate system is treated as LNGLAT\n  const worldOrigin =\n    coordinateSystem === COORDINATE_SYSTEM.CARTESIAN ? [-width / 2, -height / 2] : [-180, -90];\n\n  // Other coordinate systems not supported/verified yet\n  log.assert(\n    coordinateSystem === COORDINATE_SYSTEM.CARTESIAN ||\n      coordinateSystem === COORDINATE_SYSTEM.LNGLAT ||\n      coordinateSystem === COORDINATE_SYSTEM.DEFAULT\n  );\n\n  const {xMin, yMin} = boundingBox;\n  return [\n    // Align origin to match grid cell boundaries in CPU and GPU aggregations\n    -1 * (alignToCell(xMin - worldOrigin[0], gridOffset.xOffset) + worldOrigin[0]),\n    -1 * (alignToCell(yMin - worldOrigin[1], gridOffset.yOffset) + worldOrigin[1])\n  ];\n}\n\n// Aligns `inValue` to given `cellSize`\nexport function alignToCell(inValue, cellSize) {\n  const sign = inValue < 0 ? -1 : 1;\n\n  let value = sign < 0 ? Math.abs(inValue) + cellSize : Math.abs(inValue);\n\n  value = Math.floor(value / cellSize) * cellSize;\n\n  return value * sign;\n}\n\n/**\n * Based on geometric center of sample points, calculate cellSize in lng/lat (degree) space\n * @param {object} boundingBox - {xMin, yMin, xMax, yMax} contains bounding box of data\n * @param {number} cellSize - grid cell size in meters\n * @param {boolean, optional} converToDegrees - when true offsets are converted from meters to lng/lat (degree) space\n * @returns {xOffset, yOffset} - cellSize size\n */\n\nexport function getGridOffset(boundingBox, cellSize, convertToMeters = true) {\n  if (!convertToMeters) {\n    return {xOffset: cellSize, yOffset: cellSize};\n  }\n\n  const {yMin, yMax} = boundingBox;\n  const centerLat = (yMin + yMax) / 2;\n\n  return calculateGridLatLonOffset(cellSize, centerLat);\n}\n\nexport function getGridParams(boundingBox, cellSize, viewport, coordinateSystem) {\n  const gridOffset = getGridOffset(\n    boundingBox,\n    cellSize,\n    coordinateSystem !== COORDINATE_SYSTEM.CARTESIAN\n  );\n\n  const translation = getTranslation(boundingBox, gridOffset, coordinateSystem, viewport);\n\n  const {xMin, yMin, xMax, yMax} = boundingBox;\n\n  const width = xMax - xMin + gridOffset.xOffset;\n  const height = yMax - yMin + gridOffset.yOffset;\n\n  const numCol = Math.ceil(width / gridOffset.xOffset);\n  const numRow = Math.ceil(height / gridOffset.yOffset);\n  return {gridOffset, translation, width, height, numCol, numRow};\n}\n\n/**\n * calculate grid layer cell size in lat lon based on world unit size\n * and current latitude\n * @param {number} cellSize\n * @param {number} latitude\n * @returns {object} - lat delta and lon delta\n */\nfunction calculateGridLatLonOffset(cellSize, latitude) {\n  const yOffset = calculateLatOffset(cellSize);\n  const xOffset = calculateLonOffset(latitude, cellSize);\n  return {yOffset, xOffset};\n}\n\n/**\n * with a given x-km change, calculate the increment of latitude\n * based on stackoverflow http://stackoverflow.com/questions/7477003\n * @param {number} dy - change in km\n * @return {number} - increment in latitude\n */\nfunction calculateLatOffset(dy) {\n  return (dy / R_EARTH) * (180 / Math.PI);\n}\n\n/**\n * with a given x-km change, and current latitude\n * calculate the increment of longitude\n * based on stackoverflow http://stackoverflow.com/questions/7477003\n * @param {number} lat - latitude of current location (based on city)\n * @param {number} dx - change in km\n * @return {number} - increment in longitude\n */\nfunction calculateLonOffset(lat, dx) {\n  return ((dx / R_EARTH) * (180 / Math.PI)) / Math.cos((lat * Math.PI) / 180);\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {createIterable} from '@deck.gl/core';\nimport {getGridOffset} from '../utils/grid-aggregation-utils';\n\n/**\n * Calculate density grid from an array of points\n * @param {Object} props - object containing :\n * @param {Iterable} [props.data] - data objects to be aggregated\n * @param {Integer} [props.cellSize] - size of the grid cell\n *\n * @param {Object} aggregationParams - object containing :\n * @param {Object} gridOffset - {xOffset, yOffset} cell size in meters\n * @param {Integer} width - width of the grid\n * @param {Integer} height - height of the grid\n * @param {Boolean} projectPoints - `true` if doing screen space projection, `false` otherwise\n * @param {Array} attributes - attributes array containing position values\n * @param {Viewport} viewport - viewport to be used for projection\n * @param {Array} posOffset - [xOffset, yOffset] offset to be applied to positions to get cell index\n * @param {Object} boundingBox - {xMin, yMin, xMax, yMax} bounding box of input data\n *\n * @returns {object} - grid data, cell dimension\n */\nexport function pointToDensityGridDataCPU(props, aggregationParams) {\n  const hashInfo = pointsToGridHashing(props, aggregationParams);\n  const result = getGridLayerDataFromGridHash(hashInfo);\n\n  return {\n    gridHash: hashInfo.gridHash,\n    gridOffset: hashInfo.gridOffset,\n    data: result\n  };\n}\n\n/**\n * Project points into each cell, return a hash table of cells\n * @param {Iterable} points\n * @param {number} cellSize - unit size in meters\n * @param {function} getPosition - position accessor\n * @returns {object} - grid hash and cell dimension\n */\n/* eslint-disable max-statements, complexity */\nfunction pointsToGridHashing(props, aggregationParams) {\n  const {data = [], cellSize} = props;\n  const {attributes, viewport, projectPoints, numInstances} = aggregationParams;\n  const positions = attributes.positions.value;\n  const {size} = attributes.positions.getAccessor();\n  const boundingBox =\n    aggregationParams.boundingBox || getPositionBoundingBox(attributes.positions, numInstances);\n  const offsets = aggregationParams.posOffset || [180, 90];\n  const gridOffset = aggregationParams.gridOffset || getGridOffset(boundingBox, cellSize);\n\n  if (gridOffset.xOffset <= 0 || gridOffset.yOffset <= 0) {\n    return {gridHash: {}, gridOffset};\n  }\n\n  const {width, height} = viewport;\n  const numCol = Math.ceil(width / gridOffset.xOffset);\n  const numRow = Math.ceil(height / gridOffset.yOffset);\n\n  // calculate count per cell\n  const gridHash = {};\n\n  const {iterable, objectInfo} = createIterable(data);\n  const position = new Array(3);\n  for (const pt of iterable) {\n    objectInfo.index++;\n    position[0] = positions[objectInfo.index * size];\n    position[1] = positions[objectInfo.index * size + 1];\n    position[2] = size >= 3 ? positions[objectInfo.index * size + 2] : 0;\n    const [x, y] = projectPoints ? viewport.project(position) : position;\n    if (Number.isFinite(x) && Number.isFinite(y)) {\n      const yIndex = Math.floor((y + offsets[1]) / gridOffset.yOffset);\n      const xIndex = Math.floor((x + offsets[0]) / gridOffset.xOffset);\n      if (\n        !projectPoints ||\n        // when doing screen space agggregation (projectPoints = true), filter points outside of the viewport range.\n        (xIndex >= 0 && xIndex < numCol && yIndex >= 0 && yIndex < numRow)\n      ) {\n        const key = `${yIndex}-${xIndex}`;\n\n        gridHash[key] = gridHash[key] || {count: 0, points: [], lonIdx: xIndex, latIdx: yIndex};\n        gridHash[key].count += 1;\n        gridHash[key].points.push({\n          source: pt,\n          index: objectInfo.index\n        });\n      }\n    }\n  }\n\n  return {gridHash, gridOffset, offsets: [offsets[0] * -1, offsets[1] * -1]};\n}\n/* eslint-enable max-statements, complexity */\n\nfunction getGridLayerDataFromGridHash({gridHash, gridOffset, offsets}) {\n  const data = new Array(Object.keys(gridHash).length);\n  let i = 0;\n  for (const key in gridHash) {\n    const idxs = key.split('-');\n    const latIdx = parseInt(idxs[0], 10);\n    const lonIdx = parseInt(idxs[1], 10);\n    const index = i++;\n\n    data[index] = {\n      index,\n      position: [\n        offsets[0] + gridOffset.xOffset * lonIdx,\n        offsets[1] + gridOffset.yOffset * latIdx\n      ],\n      ...gridHash[key]\n    };\n  }\n  return data;\n}\n\n// Calculate bounding box of position attribute\nfunction getPositionBoundingBox(positionAttribute, numInstance) {\n  // TODO - value might not exist (e.g. attribute transition)\n  const positions = positionAttribute.value;\n  const {size} = positionAttribute.getAccessor();\n\n  let yMin = Infinity;\n  let yMax = -Infinity;\n  let xMin = Infinity;\n  let xMax = -Infinity;\n  let y;\n  let x;\n\n  for (let i = 0; i < numInstance; i++) {\n    x = positions[i * size];\n    y = positions[i * size + 1];\n    if (Number.isFinite(x) && Number.isFinite(y)) {\n      yMin = y < yMin ? y : yMin;\n      yMax = y > yMax ? y : yMax;\n      xMin = x < xMin ? x : xMin;\n      xMax = x > xMax ? x : xMax;\n    }\n  }\n\n  return {xMin, xMax, yMin, yMax};\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport AggregationLayer, {AggregationLayerProps} from './aggregation-layer';\nimport GPUGridAggregator from './utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {Buffer} from '@luma.gl/core';\nimport {LayerContext, log, UpdateParameters} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport BinSorter from './utils/bin-sorter';\nimport {pointToDensityGridDataCPU} from './cpu-grid-layer/grid-aggregator';\n\nexport type GridAggregationLayerProps<DataT> = AggregationLayerProps<DataT>;\n\nexport default abstract class GridAggregationLayer<\n  DataT,\n  ExtraPropsT extends {} = {}\n> extends AggregationLayer<DataT, ExtraPropsT> {\n  static layerName = 'GridAggregationLayer';\n\n  state!: AggregationLayer<DataT>['state'] & {\n    aggregationDataDirty?: any;\n    aggregationWeightsDirty?: any;\n    gpuAggregation?: any;\n    getValue?: () => any;\n    sortedBins?: BinSorter;\n  };\n\n  initializeAggregationLayer({dimensions}) {\n    const {gl} = this.context;\n    super.initializeAggregationLayer(dimensions);\n    this.setState({\n      // CPU aggregation results\n      layerData: {},\n      gpuGridAggregator: new GPUGridAggregator(gl, {id: `${this.id}-gpu-aggregator`}),\n      cpuGridAggregator: pointToDensityGridDataCPU\n    });\n  }\n\n  updateState(opts: UpdateParameters<this>) {\n    // get current attributes\n    super.updateState(opts);\n\n    this.updateAggregationState(opts);\n\n    const {aggregationDataDirty, aggregationWeightsDirty, gpuAggregation} = this.state;\n    if (this.getNumInstances() <= 0) {\n      return;\n    }\n    let aggregationDirty = false;\n    // CPU aggregation is two steps\n    // 1. Create bins (based on cellSize and position) 2. Aggregate weights for each bin\n    // For GPU aggregation both above steps are combined into one step\n\n    // step-1\n    if (aggregationDataDirty || (gpuAggregation && aggregationWeightsDirty)) {\n      this._updateAggregation(opts);\n      aggregationDirty = true;\n    }\n    // step-2 (Applicalbe for CPU aggregation only)\n    if (!gpuAggregation && (aggregationDataDirty || aggregationWeightsDirty)) {\n      this._updateWeightBins();\n      this._uploadAggregationResults();\n      aggregationDirty = true;\n    }\n\n    this.setState({aggregationDirty});\n  }\n\n  finalizeState(context: LayerContext) {\n    const {count} = this.state.weights;\n    if (count && count.aggregationBuffer) {\n      count.aggregationBuffer.delete();\n    }\n    this.state.gpuGridAggregator?.delete();\n    super.finalizeState(context);\n  }\n\n  updateShaders(shaders: any): void {\n    if (this.state.gpuAggregation) {\n      this.state.gpuGridAggregator.updateShaders(shaders);\n    }\n  }\n\n  // Methods that can be overriden by subclasses for customizations\n\n  updateAggregationState(opts) {\n    // Sublayers should implement this method.\n    log.assert(false);\n  }\n\n  allocateResources(numRow, numCol) {\n    if (this.state.numRow !== numRow || this.state.numCol !== numCol) {\n      const dataBytes = numCol * numRow * 4 * 4;\n      const gl = this.context.gl;\n      const {weights} = this.state;\n      for (const name in weights) {\n        const weight = weights[name];\n        if (weight.aggregationBuffer) {\n          weight.aggregationBuffer.delete();\n        }\n        weight.aggregationBuffer = new Buffer(gl, {\n          byteLength: dataBytes,\n          accessor: {\n            size: 4,\n            type: GL.FLOAT,\n            divisor: 1\n          }\n        });\n      }\n    }\n  }\n\n  updateResults({aggregationData, maxMinData, maxData, minData}) {\n    const {count} = this.state.weights;\n    if (count) {\n      count.aggregationData = aggregationData;\n      count.maxMinData = maxMinData;\n      count.maxData = maxData;\n      count.minData = minData;\n    }\n  }\n\n  // Private\n\n  _updateAggregation(opts) {\n    const {\n      cpuGridAggregator,\n      gpuGridAggregator,\n      gridOffset,\n      posOffset,\n      translation = [0, 0],\n      scaling = [0, 0, 0],\n      boundingBox,\n      projectPoints,\n      gpuAggregation,\n      numCol,\n      numRow\n    } = this.state;\n    const {props} = opts;\n    const {viewport} = this.context;\n    const attributes = this.getAttributes();\n    const vertexCount = this.getNumInstances();\n\n    if (!gpuAggregation) {\n      const result = cpuGridAggregator(props, {\n        gridOffset,\n        projectPoints,\n        attributes,\n        viewport,\n        posOffset,\n        boundingBox\n      });\n      this.setState({\n        layerData: result\n      });\n    } else {\n      const {weights} = this.state;\n      gpuGridAggregator.run({\n        weights,\n        cellSize: [gridOffset.xOffset, gridOffset.yOffset],\n        numCol,\n        numRow,\n        translation,\n        scaling,\n        vertexCount,\n        projectPoints,\n        attributes,\n        moduleSettings: this.getModuleSettings()\n      });\n    }\n  }\n\n  _updateWeightBins() {\n    const {getValue} = this.state;\n\n    const sortedBins = new BinSorter(this.state.layerData.data || [], {getValue});\n    this.setState({sortedBins});\n  }\n\n  _uploadAggregationResults(): void {\n    const {numCol, numRow} = this.state;\n    const {data} = this.state.layerData;\n    const {aggregatedBins, minValue, maxValue, totalCount} = this.state.sortedBins!;\n\n    const ELEMENTCOUNT = 4;\n    const aggregationSize = numCol * numRow * ELEMENTCOUNT;\n    const aggregationData = new Float32Array(aggregationSize).fill(0);\n    for (const bin of aggregatedBins) {\n      const {lonIdx, latIdx} = data[bin.i];\n      const {value, counts} = bin;\n      const cellIndex = (lonIdx + latIdx * numCol) * ELEMENTCOUNT;\n      aggregationData[cellIndex] = value;\n      aggregationData[cellIndex + ELEMENTCOUNT - 1] = counts;\n    }\n    const maxMinData = new Float32Array([maxValue, 0, 0, minValue]);\n    const maxData = new Float32Array([maxValue, 0, 0, totalCount]);\n    const minData = new Float32Array([minValue, 0, 0, totalCount]);\n    this.updateResults({aggregationData, maxMinData, maxData, minData});\n  }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Accessor,\n  Color,\n  GetPickingInfoParams,\n  Layer,\n  LayerContext,\n  LayersList,\n  log,\n  PickingInfo,\n  Position,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport type {Texture2D} from '@luma.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION, getValueFunc} from '../utils/aggregation-operation-utils';\nimport ScreenGridCellLayer from './screen-grid-cell-layer';\nimport GridAggregationLayer, {GridAggregationLayerProps} from '../grid-aggregation-layer';\nimport {getFloatTexture} from '../utils/resource-utils.js';\n\nconst defaultProps: DefaultProps<ScreenGridLayerProps> = {\n  ...ScreenGridCellLayer.defaultProps,\n  getPosition: {type: 'accessor', value: d => d.position},\n  getWeight: {type: 'accessor', value: 1},\n\n  gpuAggregation: true,\n  aggregation: 'SUM'\n};\n\nconst POSITION_ATTRIBUTE_NAME = 'positions';\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSizePixels']\n  },\n  weights: {\n    props: ['aggregation'],\n    accessors: ['getWeight']\n  }\n};\n\n/** All properties supported by ScreenGridLayer. */\nexport type ScreenGridLayerProps<DataT = any> = _ScreenGridLayerProps<DataT> &\n  GridAggregationLayerProps<DataT>;\n\n/** Properties added by ScreenGridLayer. */\nexport type _ScreenGridLayerProps<DataT> = {\n  /**\n   * Unit width/height of the bins.\n   * @default 100\n   */\n  cellSizePixels?: number;\n\n  /**\n   * Cell margin size in pixels.\n   * @default 2\n   */\n  cellMarginPixels?: number;\n\n  /**\n   * Expressed as an rgba array, minimal color that could be rendered by a tile.\n   * @default [0, 0, 0, 255]\n   * @deprecated Deprecated in version 5.2.0, use `colorRange` and `colorDomain` instead.\n   */\n  minColor?: Color | null;\n\n  /**\n   * Expressed as an rgba array, maximal color that could be rendered by a tile.\n   * @default [0, 255, 0, 255]\n   * @deprecated Deprecated in version 5.2.0, use `colorRange` and `colorDomain` instead.\n   */\n  maxColor?: Color | null;\n\n  /**\n   * Color scale input domain. The color scale maps continues numeric domain into discrete color range.\n   * @default [1, max(weight)]\n   */\n  colorDomain?: [number, number] | null;\n\n  /**\n   * Specified as an array of colors [color1, color2, ...].\n   *\n   * @default `6-class YlOrRd` - [colorbrewer](http://colorbrewer2.org/#type=sequential&scheme=YlOrRd&n=6)\n   */\n  colorRange?: Color[];\n\n  /**\n   * Method called to retrieve the position of each object.\n   *\n   * @default d => d.position\n   */\n  getPosition?: Accessor<DataT, Position>;\n\n  /**\n   * The weight of each object.\n   *\n   * @default 1\n   */\n  getWeight?: Accessor<DataT, number>;\n\n  /**\n   * Perform aggregation is performed on GPU.\n   *\n   * NOTE: GPU Aggregation requires WebGL2 support by the browser.\n   * When `gpuAggregation` is set to true and browser doesn't support WebGL2, aggregation falls back to CPU.\n   *\n   * @default true\n   */\n  gpuAggregation?: boolean;\n\n  /**\n   * Defines the type of aggregation operation\n   *\n   * V valid values are 'SUM', 'MEAN', 'MIN' and 'MAX'.\n   *\n   * @default 'SUM'\n   */\n  aggregation?: 'SUM' | 'MEAN' | 'MIN' | 'MAX';\n};\n\n/** Aggregates data into histogram bins and renders them as a grid. */\nexport default class ScreenGridLayer<\n  DataT = any,\n  ExtraProps extends {} = {}\n> extends GridAggregationLayer<DataT, ExtraProps & Required<_ScreenGridLayerProps<DataT>>> {\n  static layerName = 'ScreenGridLayer';\n  static defaultProps = defaultProps;\n\n  state!: GridAggregationLayer<DataT>['state'] & {\n    supported: boolean;\n    gpuGridAggregator?: any;\n    gpuAggregation?: any;\n    weights?: any;\n    maxTexture?: Texture2D;\n  };\n\n  initializeState() {\n    const {gl} = this.context;\n    if (!ScreenGridCellLayer.isSupported(gl)) {\n      // max aggregated value is sampled from a float texture\n      this.setState({supported: false});\n      log.error(`ScreenGridLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    super.initializeAggregationLayer({\n      dimensions: DIMENSIONS,\n      // @ts-expect-error\n      getCellSize: props => props.cellSizePixels // TODO\n    });\n    const weights = {\n      count: {\n        size: 1,\n        operation: AGGREGATION_OPERATION.SUM,\n        needMax: true,\n        maxTexture: getFloatTexture(gl, {id: `${this.id}-max-texture`})\n      }\n    };\n    this.setState({\n      supported: true,\n      projectPoints: true, // aggregation in screen space\n      weights,\n      subLayerData: {attributes: {}},\n      maxTexture: weights.count.maxTexture,\n      positionAttributeName: 'positions',\n      posOffset: [0, 0],\n      translation: [1, -1]\n    });\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions()\n      },\n      // this attribute is used in gpu aggregation path only\n      count: {size: 3, accessor: 'getWeight'}\n    });\n  }\n\n  shouldUpdateState({changeFlags}: UpdateParameters<this>) {\n    return this.state.supported && changeFlags.somethingChanged;\n  }\n\n  updateState(opts: UpdateParameters<this>) {\n    super.updateState(opts);\n  }\n\n  renderLayers(): LayersList | Layer {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {maxTexture, numRow, numCol, weights} = this.state;\n    const {updateTriggers} = this.props;\n    const {aggregationBuffer} = weights.count;\n    const CellLayerClass = this.getSubLayerClass('cells', ScreenGridCellLayer);\n\n    return new CellLayerClass(\n      this.props,\n      this.getSubLayerProps({\n        id: 'cell-layer',\n        updateTriggers\n      }),\n      {\n        data: {attributes: {instanceCounts: aggregationBuffer}},\n        maxTexture,\n        numInstances: numRow * numCol\n      }\n    );\n  }\n\n  finalizeState(context: LayerContext): void {\n    super.finalizeState(context);\n\n    const {aggregationBuffer, maxBuffer, maxTexture} = this.state;\n\n    aggregationBuffer?.delete();\n    maxBuffer?.delete();\n    maxTexture?.delete();\n  }\n\n  getPickingInfo({info}: GetPickingInfoParams): PickingInfo {\n    const {index} = info;\n    if (index >= 0) {\n      const {gpuGridAggregator, gpuAggregation, weights} = this.state;\n      // Get count aggregation results\n      const aggregationResults = gpuAggregation\n        ? gpuGridAggregator.getData('count')\n        : weights.count;\n\n      // Each instance (one cell) is aggregated into single pixel,\n      // Get current instance's aggregation details.\n      info.object = GPUGridAggregator.getAggregationData({\n        pixelIndex: index,\n        ...aggregationResults\n      });\n    }\n\n    return info;\n  }\n\n  // Aggregation Overrides\n\n  updateResults({aggregationData, maxData}) {\n    const {count} = this.state.weights;\n    count.aggregationData = aggregationData;\n    count.aggregationBuffer.setData({data: aggregationData});\n    count.maxData = maxData;\n    count.maxTexture.setImageData({data: maxData});\n  }\n\n  /* eslint-disable complexity, max-statements */\n  updateAggregationState(opts) {\n    const cellSize = opts.props.cellSizePixels;\n    const cellSizeChanged = opts.oldProps.cellSizePixels !== cellSize;\n    const {viewportChanged} = opts.changeFlags;\n    let gpuAggregation = opts.props.gpuAggregation;\n    if (this.state.gpuAggregation !== opts.props.gpuAggregation) {\n      if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.gl)) {\n        log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n        gpuAggregation = false;\n      }\n    }\n    const gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n    this.setState({\n      gpuAggregation\n    });\n\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n\n    const {dimensions} = this.state;\n    const {data, weights} = dimensions;\n    const aggregationDataDirty =\n      positionsChanged ||\n      gpuAggregationChanged ||\n      viewportChanged ||\n      this.isAggregationDirty(opts, {\n        compareAll: gpuAggregation, // check for all (including extentions props) when using gpu aggregation\n        dimension: data\n      });\n    const aggregationWeightsDirty = this.isAggregationDirty(opts, {dimension: weights});\n\n    this.setState({\n      aggregationDataDirty,\n      aggregationWeightsDirty\n    });\n\n    const {viewport} = this.context;\n\n    if (viewportChanged || cellSizeChanged) {\n      const {width, height} = viewport;\n      const numCol = Math.ceil(width / cellSize);\n      const numRow = Math.ceil(height / cellSize);\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        // transformation from clipspace to screen(pixel) space\n        scaling: [width / 2, -height / 2, 1],\n\n        gridOffset: {xOffset: cellSize, yOffset: cellSize},\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n\n    if (aggregationWeightsDirty) {\n      this._updateAccessors(opts);\n    }\n    if (aggregationDataDirty || aggregationWeightsDirty) {\n      this._resetResults();\n    }\n  }\n  /* eslint-enable complexity, max-statements */\n\n  // Private\n\n  _updateAccessors(opts) {\n    const {getWeight, aggregation, data} = opts.props;\n    const {count} = this.state.weights;\n    if (count) {\n      count.getWeight = getWeight;\n      count.operation = AGGREGATION_OPERATION[aggregation];\n    }\n    this.setState({getValue: getValueFunc(aggregation, getWeight, {data})});\n  }\n\n  _resetResults() {\n    const {count} = this.state.weights;\n    if (count) {\n      count.aggregationData = null;\n    }\n  }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME arc-layer-vertex-shader\n\nattribute vec3 positions;\nattribute vec4 instanceSourceColors;\nattribute vec4 instanceTargetColors;\nattribute vec3 instanceSourcePositions;\nattribute vec3 instanceSourcePositions64Low;\nattribute vec3 instanceTargetPositions;\nattribute vec3 instanceTargetPositions64Low;\nattribute vec3 instancePickingColors;\nattribute float instanceWidths;\nattribute float instanceHeights;\nattribute float instanceTilts;\n\nuniform bool greatCircle;\nuniform bool useShortestPath;\nuniform float numSegments;\nuniform float opacity;\nuniform float widthScale;\nuniform float widthMinPixels;\nuniform float widthMaxPixels;\nuniform int widthUnits;\n\nvarying vec4 vColor;\nvarying vec2 uv;\nvarying float isValid;\n\nfloat paraboloid(float distance, float sourceZ, float targetZ, float ratio) {\n  // d: distance on the xy plane\n  // r: ratio of the current point\n  // p: ratio of the peak of the arc\n  // h: height multiplier\n  // z = f(r) = sqrt(r * (p * 2 - r)) * d * h\n  // f(0) = 0\n  // f(1) = dz\n\n  float deltaZ = targetZ - sourceZ;\n  float dh = distance * instanceHeights;\n  if (dh == 0.0) {\n    return sourceZ + deltaZ * ratio;\n  }\n  float unitZ = deltaZ / dh;\n  float p2 = unitZ * unitZ + 1.0;\n\n  // sqrt does not deal with negative values, manually flip source and target if delta.z < 0\n  float dir = step(deltaZ, 0.0);\n  float z0 = mix(sourceZ, targetZ, dir);\n  float r = mix(ratio, 1.0 - ratio, dir);\n  return sqrt(r * (p2 - r)) * dh + z0;\n}\n\n// offset vector by strokeWidth pixels\n// offset_direction is -1 (left) or 1 (right)\nvec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction, float width) {\n  // normalized direction of the line\n  vec2 dir_screenspace = normalize(line_clipspace * project_uViewportSize);\n  // rotate by 90 degrees\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\n\n  return dir_screenspace * offset_direction * width / 2.0;\n}\n\nfloat getSegmentRatio(float index) {\n  return smoothstep(0.0, 1.0, index / (numSegments - 1.0));\n}\n\nvec3 interpolateFlat(vec3 source, vec3 target, float segmentRatio) {\n  float distance = length(source.xy - target.xy);\n  float z = paraboloid(distance, source.z, target.z, segmentRatio);\n\n  float tiltAngle = radians(instanceTilts);\n  vec2 tiltDirection = normalize(target.xy - source.xy);\n  vec2 tilt = vec2(-tiltDirection.y, tiltDirection.x) * z * sin(tiltAngle);\n\n  return vec3(\n    mix(source.xy, target.xy, segmentRatio) + tilt,\n    z * cos(tiltAngle)\n  );\n}\n\n/* Great circle interpolation\n * http://www.movable-type.co.uk/scripts/latlong.html\n */\nfloat getAngularDist (vec2 source, vec2 target) {\n  vec2 sourceRadians = radians(source);\n  vec2 targetRadians = radians(target);\n  vec2 sin_half_delta = sin((sourceRadians - targetRadians) / 2.0);\n  vec2 shd_sq = sin_half_delta * sin_half_delta;\n\n  float a = shd_sq.y + cos(sourceRadians.y) * cos(targetRadians.y) * shd_sq.x;\n  return 2.0 * asin(sqrt(a));\n}\n\nvec3 interpolateGreatCircle(vec3 source, vec3 target, vec3 source3D, vec3 target3D, float angularDist, float t) {\n  vec2 lngLat;\n\n  // if the angularDist is PI, linear interpolation is applied. otherwise, use spherical interpolation\n  if(abs(angularDist - PI) < 0.001) {\n    lngLat = (1.0 - t) * source.xy + t * target.xy;\n  } else {\n    float a = sin((1.0 - t) * angularDist);\n    float b = sin(t * angularDist);\n    vec3 p = source3D.yxz * a + target3D.yxz * b;\n    lngLat = degrees(vec2(atan(p.y, -p.x), atan(p.z, length(p.xy))));\n  }\n\n  float z = paraboloid(angularDist * EARTH_RADIUS, source.z, target.z, t);\n\n  return vec3(lngLat, z);\n}\n\n/* END GREAT CIRCLE */\n\nvoid main(void) {\n  geometry.worldPosition = instanceSourcePositions;\n  geometry.worldPositionAlt = instanceTargetPositions;\n\n  float segmentIndex = positions.x;\n  float segmentRatio = getSegmentRatio(segmentIndex);\n  float prevSegmentRatio = getSegmentRatio(max(0.0, segmentIndex - 1.0));\n  float nextSegmentRatio = getSegmentRatio(min(numSegments - 1.0, segmentIndex + 1.0));\n\n  // if it's the first point, use next - current as direction\n  // otherwise use current - prev\n  float indexDir = mix(-1.0, 1.0, step(segmentIndex, 0.0));\n  isValid = 1.0;\n\n  uv = vec2(segmentRatio, positions.y);\n  geometry.uv = uv;\n  geometry.pickingColor = instancePickingColors;\n\n  vec4 curr;\n  vec4 next;\n  vec3 source;\n  vec3 target;\n\n  if ((greatCircle || project_uProjectionMode == PROJECTION_MODE_GLOBE) && project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT) {\n    source = project_globe_(vec3(instanceSourcePositions.xy, 0.0));\n    target = project_globe_(vec3(instanceTargetPositions.xy, 0.0));\n    float angularDist = getAngularDist(instanceSourcePositions.xy, instanceTargetPositions.xy);\n\n    vec3 prevPos = interpolateGreatCircle(instanceSourcePositions, instanceTargetPositions, source, target, angularDist, prevSegmentRatio);\n    vec3 currPos = interpolateGreatCircle(instanceSourcePositions, instanceTargetPositions, source, target, angularDist, segmentRatio);\n    vec3 nextPos = interpolateGreatCircle(instanceSourcePositions, instanceTargetPositions, source, target, angularDist, nextSegmentRatio);\n\n    if (abs(currPos.x - prevPos.x) > 180.0) {\n      indexDir = -1.0;\n      isValid = 0.0;\n    } else if (abs(currPos.x - nextPos.x) > 180.0) {\n      indexDir = 1.0;\n      isValid = 0.0;\n    }\n    nextPos = indexDir < 0.0 ? prevPos : nextPos;\n    nextSegmentRatio = indexDir < 0.0 ? prevSegmentRatio : nextSegmentRatio;\n\n    if (isValid == 0.0) {\n      // split at the 180th meridian\n      nextPos.x += nextPos.x > 0.0 ? -360.0 : 360.0;\n      float t = ((currPos.x > 0.0 ? 180.0 : -180.0) - currPos.x) / (nextPos.x - currPos.x);\n      currPos = mix(currPos, nextPos, t);\n      segmentRatio = mix(segmentRatio, nextSegmentRatio, t);\n    }\n\n    vec3 currPos64Low = mix(instanceSourcePositions64Low, instanceTargetPositions64Low, segmentRatio);\n    vec3 nextPos64Low = mix(instanceSourcePositions64Low, instanceTargetPositions64Low, nextSegmentRatio);\n  \n    curr = project_position_to_clipspace(currPos, currPos64Low, vec3(0.0), geometry.position);\n    next = project_position_to_clipspace(nextPos, nextPos64Low, vec3(0.0));\n  \n  } else {\n    vec3 source_world = instanceSourcePositions;\n    vec3 target_world = instanceTargetPositions;\n    if (useShortestPath) {\n      source_world.x = mod(source_world.x + 180., 360.0) - 180.;\n      target_world.x = mod(target_world.x + 180., 360.0) - 180.;\n\n      float deltaLng = target_world.x - source_world.x;\n      if (deltaLng > 180.) target_world.x -= 360.;\n      if (deltaLng < -180.) source_world.x -= 360.;\n    }\n    source = project_position(source_world, instanceSourcePositions64Low);\n    target = project_position(target_world, instanceTargetPositions64Low);\n\n    // common x at longitude=-180\n    float antiMeridianX = 0.0;\n\n    if (useShortestPath) {\n      if (project_uProjectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET) {\n        antiMeridianX = -(project_uCoordinateOrigin.x + 180.) / 360. * TILE_SIZE;\n      }\n      float thresholdRatio = (antiMeridianX - source.x) / (target.x - source.x);\n\n      if (prevSegmentRatio <= thresholdRatio && nextSegmentRatio > thresholdRatio) {\n        isValid = 0.0;\n        indexDir = sign(segmentRatio - thresholdRatio);\n        segmentRatio = thresholdRatio;\n      }\n    }\n\n    nextSegmentRatio = indexDir < 0.0 ? prevSegmentRatio : nextSegmentRatio;\n    vec3 currPos = interpolateFlat(source, target, segmentRatio);\n    vec3 nextPos = interpolateFlat(source, target, nextSegmentRatio);\n\n    if (useShortestPath) {\n      if (nextPos.x < antiMeridianX) {\n        currPos.x += TILE_SIZE;\n        nextPos.x += TILE_SIZE;\n      }\n    }\n\n    curr = project_common_position_to_clipspace(vec4(currPos, 1.0));\n    next = project_common_position_to_clipspace(vec4(nextPos, 1.0));\n    geometry.position = vec4(currPos, 1.0);\n  }\n\n  // Multiply out width and clamp to limits\n  // mercator pixels are interpreted as screen pixels\n  float widthPixels = clamp(\n    project_size_to_pixel(instanceWidths * widthScale, widthUnits),\n    widthMinPixels, widthMaxPixels\n  );\n\n  // extrude\n  vec3 offset = vec3(\n    getExtrusionOffset((next.xy - curr.xy) * indexDir, positions.y, widthPixels),\n    0.0);\n  DECKGL_FILTER_SIZE(offset, geometry);\n  DECKGL_FILTER_GL_POSITION(curr, geometry);\n  gl_Position = curr + vec4(project_pixel_size_to_clipspace(offset.xy), 0.0, 0.0);\n\n  vec4 color = mix(instanceSourceColors, instanceTargetColors, segmentRatio);\n  vColor = vec4(color.rgb, color.a * opacity);\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME arc-layer-fragment-shader\n\nprecision highp float;\n\nvarying vec4 vColor;\nvarying vec2 uv;\nvarying float isValid;\n\nvoid main(void) {\n  if (isValid == 0.0) {\n    discard;\n  }\n\n  gl_FragColor = vColor;\n  geometry.uv = uv;\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  project32,\n  picking,\n  UNIT,\n  UpdateParameters,\n  LayerProps,\n  LayerDataSource,\n  Unit,\n  AccessorFunction,\n  Position,\n  Accessor,\n  Color,\n  DefaultProps\n} from '@deck.gl/core';\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './arc-layer-vertex.glsl';\nimport fs from './arc-layer-fragment.glsl';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<ArcLayerProps> = {\n  getSourcePosition: {type: 'accessor', value: x => x.sourcePosition},\n  getTargetPosition: {type: 'accessor', value: x => x.targetPosition},\n  getSourceColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getTargetColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n  getHeight: {type: 'accessor', value: 1},\n  getTilt: {type: 'accessor', value: 0},\n\n  greatCircle: false,\n  numSegments: {type: 'number', value: 50, min: 1},\n\n  widthUnits: 'pixels',\n  widthScale: {type: 'number', value: 1, min: 0},\n  widthMinPixels: {type: 'number', value: 0, min: 0},\n  widthMaxPixels: {type: 'number', value: Number.MAX_SAFE_INTEGER, min: 0}\n};\n\n/** All properties supported by ArcLayer. */\nexport type ArcLayerProps<DataT = any> = _ArcLayerProps<DataT> & LayerProps;\n\n/** Properties added by ArcLayer. */\ntype _ArcLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * If `true`, create the arc along the shortest path on the earth surface.\n   * @default false\n   */\n  greatCircle?: boolean;\n\n  /**\n   * The number of segments used to draw each arc.\n   * @default 50\n   */\n  numSegments?: number;\n\n  /**\n   * The units of the line width, one of `'meters'`, `'common'`, and `'pixels'`\n   * @default 'pixels'\n   */\n  widthUnits?: Unit;\n\n  /**\n   * The scaling multiplier for the width of each line.\n   * @default 1\n   */\n  widthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   * @default 0\n   */\n  widthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  widthMaxPixels?: number;\n\n  /**\n   * Method called to retrieve the source position of each object.\n   * @default object => object.sourcePosition\n   */\n  getSourcePosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * Method called to retrieve the target position of each object.\n   * @default object => object.targetPosition\n   */\n  getTargetPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * The rgba color is in the format of `[r, g, b, [a]]`.\n   * @default [0, 0, 0, 255]\n   */\n  getSourceColor?: Accessor<DataT, Color>;\n\n  /**\n   * The rgba color is in the format of `[r, g, b, [a]]`.\n   * @default [0, 0, 0, 255]\n   */\n  getTargetColor?: Accessor<DataT, Color>;\n\n  /**\n   * The line width of each object, in units specified by `widthUnits`.\n   * @default 1\n   */\n  getWidth?: Accessor<DataT, number>;\n\n  /**\n   * Multiplier of layer height. `0` will make the layer flat.\n   * @default 1\n   */\n  getHeight?: Accessor<DataT, number>;\n\n  /**\n   * Use to tilt the arc to the side if you have multiple arcs with the same source and target positions.\n   * @default 0\n   */\n  getTilt?: Accessor<DataT, number>;\n};\n\n/** Render raised arcs joining pairs of source and target coordinates. */\nexport default class ArcLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_ArcLayerProps<DataT>>\n> {\n  static layerName = 'ArcLayer';\n  static defaultProps = defaultProps;\n\n  state!: Layer['state'] & {\n    model?: Model;\n  };\n\n  getBounds(): [number[], number[]] | null {\n    return this.getAttributeManager()?.getBounds([\n      'instanceSourcePositions',\n      'instanceTargetPositions'\n    ]);\n  }\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]}); // 'project' module added by default.\n  }\n\n  // This layer has its own wrapLongitude logic\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager()!;\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceSourceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getSourceColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceTargetColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getTargetColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      },\n      instanceHeights: {\n        size: 1,\n        transition: true,\n        accessor: 'getHeight',\n        defaultValue: 1\n      },\n      instanceTilts: {\n        size: 1,\n        transition: true,\n        accessor: 'getTilt',\n        defaultValue: 0\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState(opts: UpdateParameters<this>): void {\n    super.updateState(opts);\n    const {props, oldProps, changeFlags} = opts;\n    // Re-generate model if geometry changed\n    if (\n      changeFlags.extensionsChanged ||\n      (changeFlags.propsChanged && props.numSegments !== oldProps.numSegments)\n    ) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {widthUnits, widthScale, widthMinPixels, widthMaxPixels, greatCircle, wrapLongitude} =\n      this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        greatCircle,\n        widthUnits: UNIT[widthUnits],\n        widthScale,\n        widthMinPixels,\n        widthMaxPixels,\n        useShortestPath: wrapLongitude\n      })\n      .draw();\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    const {id, numSegments} = this.props;\n    let positions: number[] = [];\n    /*\n     *  (0, -1)-------------_(1, -1)\n     *       |          _,-\"  |\n     *       o      _,-\"      o\n     *       |  _,-\"          |\n     *   (0, 1)\"-------------(1, 1)\n     */\n    for (let i = 0; i < numSegments; i++) {\n      positions = positions.concat([i, 1, 0, i, -1, 0]);\n    }\n\n    const model = new Model(gl, {\n      ...this.getShaders(),\n      id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_STRIP,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n\n    model.setUniforms({numSegments});\n\n    return model;\n  }\n}\n", "import {lerp} from '@math.gl/core';\n\nconst DEFAULT_INDICES = new Uint16Array([0, 2, 1, 0, 3, 2]);\nconst DEFAULT_TEX_COORDS = new Float32Array([0, 1, 0, 0, 1, 0, 1, 1]);\n\n/*\n  1 ---- 2\n  |      |\n  |      |\n  0 ---- 3\n*/\n/* eslint-disable max-statements */\nexport default function createMesh(bounds, resolution) {\n  if (!resolution) {\n    return createQuad(bounds);\n  }\n  const maxXSpan = Math.max(\n    Math.abs(bounds[0][0] - bounds[3][0]),\n    Math.abs(bounds[1][0] - bounds[2][0])\n  );\n  const maxYSpan = Math.max(\n    Math.abs(bounds[1][1] - bounds[0][1]),\n    Math.abs(bounds[2][1] - bounds[3][1])\n  );\n  const uCount = Math.ceil(maxXSpan / resolution) + 1;\n  const vCount = Math.ceil(maxYSpan / resolution) + 1;\n\n  const vertexCount = (uCount - 1) * (vCount - 1) * 6;\n  const indices = new Uint32Array(vertexCount);\n  const texCoords = new Float32Array(uCount * vCount * 2);\n  const positions = new Float64Array(uCount * vCount * 3);\n\n  // Tesselate\n  let vertex = 0;\n  let index = 0;\n  for (let u = 0; u < uCount; u++) {\n    const ut = u / (uCount - 1);\n    for (let v = 0; v < vCount; v++) {\n      const vt = v / (vCount - 1);\n      const p = interpolateQuad(bounds, ut, vt);\n\n      positions[vertex * 3 + 0] = p[0];\n      positions[vertex * 3 + 1] = p[1];\n      positions[vertex * 3 + 2] = p[2] || 0;\n\n      texCoords[vertex * 2 + 0] = ut;\n      texCoords[vertex * 2 + 1] = 1 - vt;\n\n      if (u > 0 && v > 0) {\n        indices[index++] = vertex - vCount;\n        indices[index++] = vertex - vCount - 1;\n        indices[index++] = vertex - 1;\n        indices[index++] = vertex - vCount;\n        indices[index++] = vertex - 1;\n        indices[index++] = vertex;\n      }\n\n      vertex++;\n    }\n  }\n  return {\n    vertexCount,\n    positions,\n    indices,\n    texCoords\n  };\n}\n\nfunction createQuad(bounds) {\n  const positions = new Float64Array(12);\n  // [[minX, minY], [minX, maxY], [maxX, maxY], [maxX, minY]]\n  for (let i = 0; i < bounds.length; i++) {\n    positions[i * 3 + 0] = bounds[i][0];\n    positions[i * 3 + 1] = bounds[i][1];\n    positions[i * 3 + 2] = bounds[i][2] || 0;\n  }\n\n  return {\n    vertexCount: 6,\n    positions,\n    indices: DEFAULT_INDICES,\n    texCoords: DEFAULT_TEX_COORDS\n  };\n}\n\nfunction interpolateQuad(quad, ut, vt) {\n  return lerp(lerp(quad[0], quad[1], vt), lerp(quad[3], quad[2], vt), ut);\n}\n", "export default `\n#define SHADER_NAME bitmap-layer-vertex-shader\n\nattribute vec2 texCoords;\nattribute vec3 positions;\nattribute vec3 positions64Low;\n\nvarying vec2 vTexCoord;\nvarying vec2 vTexPos;\n\nuniform float coordinateConversion;\n\nconst vec3 pickingColor = vec3(1.0, 0.0, 0.0);\n\nvoid main(void) {\n  geometry.worldPosition = positions;\n  geometry.uv = texCoords;\n  geometry.pickingColor = pickingColor;\n\n  gl_Position = project_position_to_clipspace(positions, positions64Low, vec3(0.0), geometry.position);\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n\n  vTexCoord = texCoords;\n\n  if (coordinateConversion < -0.5) {\n    vTexPos = geometry.position.xy + project_uCommonOrigin.xy;\n  } else if (coordinateConversion > 0.5) {\n    vTexPos = geometry.worldPosition.xy;\n  }\n\n  vec4 color = vec4(0.0);\n  DECKGL_FILTER_COLOR(color, geometry);\n}\n`;\n", "/**\n * Pack the top 12 bits of two normalized floats into 3 8-bit (rgb) values\n * This enables addressing 4096x4096 individual pixels\n *\n * returns vec3 encoded RGB colors\n *  result.r - top 8 bits of u\n *  result.g - top 8 bits of v\n *  result.b - next 4 bits of u and v: (u + v * 16)\n */\nconst packUVsIntoRGB = `\nvec3 packUVsIntoRGB(vec2 uv) {\n  // Extract the top 8 bits. We want values to be truncated down so we can add a fraction\n  vec2 uv8bit = floor(uv * 256.);\n\n  // Calculate the normalized remainders of u and v parts that do not fit into 8 bits\n  // Scale and clamp to 0-1 range\n  vec2 uvFraction = fract(uv * 256.);\n  vec2 uvFraction4bit = floor(uvFraction * 16.);\n\n  // Remainder can be encoded in blue channel, encode as 4 bits for pixel coordinates\n  float fractions = uvFraction4bit.x + uvFraction4bit.y * 16.;\n\n  return vec3(uv8bit, fractions) / 255.;\n}\n`;\n\nexport default `\n#define SHADER_NAME bitmap-layer-fragment-shader\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\nuniform sampler2D bitmapTexture;\n\nvarying vec2 vTexCoord;\nvarying vec2 vTexPos;\n\nuniform float desaturate;\nuniform vec4 transparentColor;\nuniform vec3 tintColor;\nuniform float opacity;\n\nuniform float coordinateConversion;\nuniform vec4 bounds;\n\n/* projection utils */\nconst float TILE_SIZE = 512.0;\nconst float PI = 3.1415926536;\nconst float WORLD_SCALE = TILE_SIZE / PI / 2.0;\n\n// from degrees to Web Mercator\nvec2 lnglat_to_mercator(vec2 lnglat) {\n  float x = lnglat.x;\n  float y = clamp(lnglat.y, -89.9, 89.9);\n  return vec2(\n    radians(x) + PI,\n    PI + log(tan(PI * 0.25 + radians(y) * 0.5))\n  ) * WORLD_SCALE;\n}\n\n// from Web Mercator to degrees\nvec2 mercator_to_lnglat(vec2 xy) {\n  xy /= WORLD_SCALE;\n  return degrees(vec2(\n    xy.x - PI,\n    atan(exp(xy.y - PI)) * 2.0 - PI * 0.5\n  ));\n}\n/* End projection utils */\n\n// apply desaturation\nvec3 color_desaturate(vec3 color) {\n  float luminance = (color.r + color.g + color.b) * 0.333333333;\n  return mix(color, vec3(luminance), desaturate);\n}\n\n// apply tint\nvec3 color_tint(vec3 color) {\n  return color * tintColor;\n}\n\n// blend with background color\nvec4 apply_opacity(vec3 color, float alpha) {\n  if (transparentColor.a == 0.0) {\n    return vec4(color, alpha);\n  }\n  float blendedAlpha = alpha + transparentColor.a * (1.0 - alpha);\n  float highLightRatio = alpha / blendedAlpha;\n  vec3 blendedRGB = mix(transparentColor.rgb, color, highLightRatio);\n  return vec4(blendedRGB, blendedAlpha);\n}\n\nvec2 getUV(vec2 pos) {\n  return vec2(\n    (pos.x - bounds[0]) / (bounds[2] - bounds[0]),\n    (pos.y - bounds[3]) / (bounds[1] - bounds[3])\n  );\n}\n\n${packUVsIntoRGB}\n\nvoid main(void) {\n  vec2 uv = vTexCoord;\n  if (coordinateConversion < -0.5) {\n    vec2 lnglat = mercator_to_lnglat(vTexPos);\n    uv = getUV(lnglat);\n  } else if (coordinateConversion > 0.5) {\n    vec2 commonPos = lnglat_to_mercator(vTexPos);\n    uv = getUV(commonPos);\n  }\n  vec4 bitmapColor = texture2D(bitmapTexture, uv);\n\n  gl_FragColor = apply_opacity(color_tint(color_desaturate(bitmapColor.rgb)), bitmapColor.a * opacity);\n\n  geometry.uv = uv;\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n\n  if (picking_uActive && !picking_uAttribute) {\n    // Since instance information is not used, we can use picking color for pixel index\n    gl_FragColor.rgb = packUVsIntoRGB(uv);\n  }\n}\n`;\n", "// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {\n  Layer,\n  project32,\n  picking,\n  CoordinateSystem,\n  COORDINATE_SYSTEM,\n  LayerProps,\n  PickingInfo,\n  GetPickingInfoParams,\n  UpdateParameters,\n  Color,\n  Texture,\n  Position,\n  DefaultProps\n} from '@deck.gl/core';\nimport {Model, Geometry} from '@luma.gl/core';\nimport {lngLatToWorld} from '@math.gl/web-mercator';\n\nimport createMesh from './create-mesh';\n\nimport vs from './bitmap-layer-vertex';\nimport fs from './bitmap-layer-fragment';\n\nconst defaultProps: DefaultProps<BitmapLayerProps> = {\n  image: {type: 'image', value: null, async: true},\n  bounds: {type: 'array', value: [1, 0, 0, 1], compare: true},\n  _imageCoordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n\n  desaturate: {type: 'number', min: 0, max: 1, value: 0},\n  // More context: because of the blending mode we're using for ground imagery,\n  // alpha is not effective when blending the bitmap layers with the base map.\n  // Instead we need to manually dim/blend rgb values with a background color.\n  transparentColor: {type: 'color', value: [0, 0, 0, 0]},\n  tintColor: {type: 'color', value: [255, 255, 255]},\n\n  textureParameters: {type: 'object', ignore: true}\n};\n\n/** All properties supported by BitmapLayer. */\nexport type BitmapLayerProps = _BitmapLayerProps & LayerProps;\nexport type BitmapBoundingBox =\n  | [left: number, bottom: number, right: number, top: number]\n  | [Position, Position, Position, Position];\n\n/** Properties added by BitmapLayer. */\ntype _BitmapLayerProps = {\n  data: never;\n  /**\n   * The image to display.\n   *\n   * @default null\n   */\n  image?: string | Texture | null;\n\n  /**\n   * Supported formats:\n   *  - Coordinates of the bounding box of the bitmap `[left, bottom, right, top]`\n   *  - Coordinates of four corners of the bitmap, should follow the sequence of `[[left, bottom], [left, top], [right, top], [right, bottom]]`.\n   *   Each position could optionally contain a third component `z`.\n   * @default [1, 0, 0, 1]\n   */\n  bounds?: BitmapBoundingBox;\n\n  /**\n   * > Note: this prop is experimental.\n   *\n   * Specifies how image coordinates should be geographically interpreted.\n   * @default COORDINATE_SYSTEM.DEFAULT\n   */\n  _imageCoordinateSystem?: CoordinateSystem;\n\n  /**\n   * The desaturation of the bitmap. Between `[0, 1]`.\n   * @default 0\n   */\n  desaturate?: number;\n\n  /**\n   * The color to use for transparent pixels, in `[r, g, b, a]`.\n   * @default [0, 0, 0, 0]\n   */\n  transparentColor?: Color;\n\n  /**\n   * The color to tint the bitmap by, in `[r, g, b]`.\n   * @default [255, 255, 255]\n   */\n  tintColor?: Color;\n\n  /** Customize the [texture parameters](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter). */\n  textureParameters?: Record<number, number> | null;\n};\n\n/** Render a bitmap at specified boundaries. */\nexport default class BitmapLayer<ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_BitmapLayerProps>\n> {\n  static layerName = 'BitmapLayer';\n  static defaultProps = defaultProps;\n\n  state!: Layer['state'] & {\n    disablePicking?: boolean;\n    model?: Model;\n    mesh?: any;\n    coordinateConversion?: number;\n    bounds?: number[];\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager()!;\n\n    attributeManager.remove(['instancePickingColors']);\n    const noAlloc = true;\n\n    attributeManager.add({\n      indices: {\n        size: 1,\n        isIndexed: true,\n        update: attribute => (attribute.value = this.state.mesh.indices),\n        noAlloc\n      },\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        update: attribute => (attribute.value = this.state.mesh.positions),\n        noAlloc\n      },\n      texCoords: {\n        size: 2,\n        update: attribute => (attribute.value = this.state.mesh.texCoords),\n        noAlloc\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}: UpdateParameters<this>): void {\n    // setup model first\n    const attributeManager = this.getAttributeManager()!;\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager.invalidateAll();\n    }\n\n    if (props.bounds !== oldProps.bounds) {\n      const oldMesh = this.state.mesh;\n      const mesh = this._createMesh();\n      this.state.model.setVertexCount(mesh.vertexCount);\n      for (const key in mesh) {\n        if (oldMesh && oldMesh[key] !== mesh[key]) {\n          attributeManager.invalidate(key);\n        }\n      }\n      this.setState({mesh, ...this._getCoordinateUniforms()});\n    } else if (props._imageCoordinateSystem !== oldProps._imageCoordinateSystem) {\n      this.setState(this._getCoordinateUniforms());\n    }\n  }\n\n  getPickingInfo(params: GetPickingInfoParams): PickingInfo {\n    const {image} = this.props;\n    const info: PickingInfo & {bitmap?: any} = params.info;\n\n    if (!info.color || !image) {\n      info.bitmap = null;\n      return info;\n    }\n\n    const {width, height} = image as Texture;\n\n    // Picking color doesn't represent object index in this layer\n    info.index = 0;\n\n    // Calculate uv and pixel in bitmap\n    const uv = unpackUVsFromRGB(info.color);\n\n    const pixel = [Math.floor(uv[0] * (width as number)), Math.floor(uv[1] * (height as number))];\n\n    info.bitmap = {\n      size: {width, height}, // Size of bitmap\n      uv, // Floating point precision in 0-1 range\n      pixel // Truncated to integer and scaled to pixel size\n    };\n\n    return info;\n  }\n\n  // Override base Layer multi-depth picking logic\n  disablePickingIndex() {\n    this.setState({disablePicking: true});\n  }\n\n  restorePickingColors() {\n    this.setState({disablePicking: false});\n  }\n\n  protected _updateAutoHighlight(info) {\n    super._updateAutoHighlight({\n      ...info,\n      color: this.encodePickingColor(0)\n    });\n  }\n\n  protected _createMesh() {\n    const {bounds} = this.props;\n\n    let normalizedBounds = bounds;\n    // bounds as [minX, minY, maxX, maxY]\n    if (isRectangularBounds(bounds)) {\n      /*\n        (minX0, maxY3) ---- (maxX2, maxY3)\n               |                  |\n               |                  |\n               |                  |\n        (minX0, minY1) ---- (maxX2, minY1)\n     */\n      normalizedBounds = [\n        [bounds[0], bounds[1]],\n        [bounds[0], bounds[3]],\n        [bounds[2], bounds[3]],\n        [bounds[2], bounds[1]]\n      ];\n    }\n\n    return createMesh(normalizedBounds, this.context.viewport.resolution);\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    if (!gl) {\n      return null;\n    }\n\n    /*\n      0,0 --- 1,0\n       |       |\n      0,1 --- 1,1\n    */\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLES,\n        vertexCount: 6\n      }),\n      isInstanced: false\n    });\n  }\n\n  draw(opts) {\n    const {uniforms, moduleParameters} = opts;\n    const {model, coordinateConversion, bounds, disablePicking} = this.state;\n    const {image, desaturate, transparentColor, tintColor} = this.props;\n\n    if (moduleParameters.pickingActive && disablePicking) {\n      return;\n    }\n\n    // // TODO fix zFighting\n    // Render the image\n    if (image && model) {\n      model\n        .setUniforms(uniforms)\n        .setUniforms({\n          bitmapTexture: image,\n          desaturate,\n          transparentColor: transparentColor.map(x => x / 255),\n          tintColor: tintColor.slice(0, 3).map(x => x / 255),\n          coordinateConversion,\n          bounds\n        })\n        .draw();\n    }\n  }\n\n  _getCoordinateUniforms() {\n    const {LNGLAT, CARTESIAN, DEFAULT} = COORDINATE_SYSTEM;\n    let {_imageCoordinateSystem: imageCoordinateSystem} = this.props;\n    if (imageCoordinateSystem !== DEFAULT) {\n      const {bounds} = this.props;\n      if (!isRectangularBounds(bounds)) {\n        throw new Error('_imageCoordinateSystem only supports rectangular bounds');\n      }\n\n      // The default behavior (linearly interpolated tex coords)\n      const defaultImageCoordinateSystem = this.context.viewport.resolution ? LNGLAT : CARTESIAN;\n      imageCoordinateSystem = imageCoordinateSystem === LNGLAT ? LNGLAT : CARTESIAN;\n\n      if (imageCoordinateSystem === LNGLAT && defaultImageCoordinateSystem === CARTESIAN) {\n        // LNGLAT in Mercator, e.g. display LNGLAT-encoded image in WebMercator projection\n        return {coordinateConversion: -1, bounds};\n      }\n      if (imageCoordinateSystem === CARTESIAN && defaultImageCoordinateSystem === LNGLAT) {\n        // Mercator in LNGLAT, e.g. display WebMercator encoded image in Globe projection\n        const bottomLeft = lngLatToWorld([bounds[0], bounds[1]]);\n        const topRight = lngLatToWorld([bounds[2], bounds[3]]);\n        return {\n          coordinateConversion: 1,\n          bounds: [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]]\n        };\n      }\n    }\n    return {\n      coordinateConversion: 0,\n      bounds: [0, 0, 0, 0]\n    };\n  }\n}\n\n/**\n * Decode uv floats from rgb bytes where b contains 4-bit fractions of uv\n * @param {number[]} color\n * @returns {number[]} uvs\n * https://stackoverflow.com/questions/30242013/glsl-compressing-packing-multiple-0-1-colours-var4-into-a-single-var4-variab\n */\nfunction unpackUVsFromRGB(color) {\n  const [u, v, fracUV] = color;\n  const vFrac = (fracUV & 0xf0) / 256;\n  const uFrac = (fracUV & 0x0f) / 16;\n  return [(u + uFrac) / 256, (v + vFrac) / 256];\n}\n\nfunction isRectangularBounds(\n  bounds: [number, number, number, number] | [Position, Position, Position, Position]\n): bounds is [number, number, number, number] {\n  return Number.isFinite(bounds[0]);\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME icon-layer-vertex-shader\n\nattribute vec2 positions;\n\nattribute vec3 instancePositions;\nattribute vec3 instancePositions64Low;\nattribute float instanceSizes;\nattribute float instanceAngles;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\nattribute vec4 instanceIconFrames;\nattribute float instanceColorModes;\nattribute vec2 instanceOffsets;\nattribute vec2 instancePixelOffset;\n\nuniform float sizeScale;\nuniform vec2 iconsTextureDim;\nuniform float sizeMinPixels;\nuniform float sizeMaxPixels;\nuniform bool billboard;\nuniform int sizeUnits;\n\nvarying float vColorMode;\nvarying vec4 vColor;\nvarying vec2 vTextureCoords;\nvarying vec2 uv;\n\nvec2 rotate_by_angle(vec2 vertex, float angle) {\n  float angle_radian = angle * PI / 180.0;\n  float cos_angle = cos(angle_radian);\n  float sin_angle = sin(angle_radian);\n  mat2 rotationMatrix = mat2(cos_angle, -sin_angle, sin_angle, cos_angle);\n  return rotationMatrix * vertex;\n}\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n  geometry.uv = positions;\n  geometry.pickingColor = instancePickingColors;\n  uv = positions;\n\n  vec2 iconSize = instanceIconFrames.zw;\n  // convert size in meters to pixels, then scaled and clamp\n \n  // project meters to pixels and clamp to limits \n  float sizePixels = clamp(\n    project_size_to_pixel(instanceSizes * sizeScale, sizeUnits), \n    sizeMinPixels, sizeMaxPixels\n  );\n\n  // scale icon height to match instanceSize\n  float instanceScale = iconSize.y == 0.0 ? 0.0 : sizePixels / iconSize.y;\n\n  // scale and rotate vertex in \"pixel\" value and convert back to fraction in clipspace\n  vec2 pixelOffset = positions / 2.0 * iconSize + instanceOffsets;\n  pixelOffset = rotate_by_angle(pixelOffset, instanceAngles) * instanceScale;\n  pixelOffset += instancePixelOffset;\n  pixelOffset.y *= -1.0;\n\n  if (billboard)  {\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n    vec3 offset = vec3(pixelOffset, 0.0);\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);\n\n  } else {\n    vec3 offset_common = vec3(project_pixel_size(pixelOffset), 0.0);\n    DECKGL_FILTER_SIZE(offset_common, geometry);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset_common, geometry.position); \n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  }\n\n  vTextureCoords = mix(\n    instanceIconFrames.xy,\n    instanceIconFrames.xy + iconSize,\n    (positions.xy + 1.0) / 2.0\n  ) / iconsTextureDim;\n\n  vColor = instanceColors;\n  DECKGL_FILTER_COLOR(vColor, geometry);\n\n  vColorMode = instanceColorModes;\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME icon-layer-fragment-shader\n\nprecision highp float;\n\nuniform float opacity;\nuniform sampler2D iconsTexture;\nuniform float alphaCutoff;\n\nvarying float vColorMode;\nvarying vec4 vColor;\nvarying vec2 vTextureCoords;\nvarying vec2 uv;\n\nvoid main(void) {\n  geometry.uv = uv;\n\n  vec4 texColor = texture2D(iconsTexture, vTextureCoords);\n\n  // if colorMode == 0, use pixel color from the texture\n  // if colorMode == 1 or rendering picking buffer, use texture as transparency mask\n  vec3 color = mix(texColor.rgb, vColor.rgb, vColorMode);\n  // Take the global opacity and the alpha from vColor into account for the alpha component\n  float a = texColor.a * opacity * vColor.a;\n\n  if (a < alphaCutoff) {\n    discard;\n  }\n\n  gl_FragColor = vec4(color, a);\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n", "/* global document */\nimport GL from '@luma.gl/constants';\nimport {Texture2D, copyToTexture} from '@luma.gl/core';\nimport {load} from '@loaders.gl/core';\nimport {createIterable} from '@deck.gl/core';\n\nimport type {AccessorFunction} from '@deck.gl/core';\n\nconst DEFAULT_CANVAS_WIDTH = 1024;\nconst DEFAULT_BUFFER = 4;\n\nconst noop = () => {};\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n  // GL.LINEAR is the default value but explicitly set it here\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  // for texture boundary artifact\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\ntype IconDef = {\n  /** Width of the icon */\n  width: number;\n  /** Height of the icon */\n  height: number;\n  /** Horizontal position of icon anchor. Default: half width. */\n  anchorX?: number;\n  /** Vertical position of icon anchor. Default: half height. */\n  anchorY?: number;\n  /**\n   * Whether the icon is treated as a transparency mask.\n   * If `true`, color defined by `getColor` is applied.\n   * If `false`, pixel color from the icon image is applied.\n   * @default false\n   */\n  mask?: boolean;\n};\n\nexport type UnpackedIcon = {\n  /** Url to fetch the icon */\n  url: string;\n  /** Unique identifier of the icon. Icons of the same id are only fetched once. Fallback to `url` if not specified. */\n  id?: string;\n} & IconDef;\n\ntype PrepackedIcon = {\n  /** Left position of the icon on the atlas */\n  x: number;\n  /** Top position of the icon on the atlas */\n  y: number;\n} & IconDef;\n\nexport type IconMapping = Record<string, PrepackedIcon>;\n\nexport type LoadIconErrorContext = {\n  error: Error;\n  /** The URL that was trying to fetch */\n  url: string;\n  /** The original data object that requested this icon */\n  source: any;\n  /** The index of the original data object that requested this icon */\n  sourceIndex: number;\n  /** The load options used for the fetch */\n  loadOptions: any;\n};\n\nfunction nextPowOfTwo(number: number): number {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\n// update comment to create a new texture and copy original data.\nfunction resizeImage(\n  ctx: CanvasRenderingContext2D,\n  imageData: HTMLImageElement | ImageBitmap,\n  maxWidth: number,\n  maxHeight: number\n): {\n  data: HTMLImageElement | HTMLCanvasElement | ImageBitmap;\n  width: number;\n  height: number;\n} {\n  const resizeRatio = Math.min(maxWidth / imageData.width, maxHeight / imageData.height);\n  const width = Math.floor(imageData.width * resizeRatio);\n  const height = Math.floor(imageData.height * resizeRatio);\n\n  if (resizeRatio === 1) {\n    // No resizing required\n    return {data: imageData, width, height};\n  }\n\n  ctx.canvas.height = height;\n  ctx.canvas.width = width;\n\n  ctx.clearRect(0, 0, width, height);\n\n  // image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight\n  ctx.drawImage(imageData, 0, 0, imageData.width, imageData.height, 0, 0, width, height);\n  return {data: ctx.canvas, width, height};\n}\n\nfunction getIconId(icon: UnpackedIcon): string {\n  return icon && (icon.id || icon.url);\n}\n\n// resize texture without losing original data\nfunction resizeTexture(\n  texture: Texture2D,\n  width: number,\n  height: number,\n  parameters: any\n): Texture2D {\n  const oldWidth = texture.width;\n  const oldHeight = texture.height;\n\n  const newTexture = new Texture2D(texture.gl, {width, height, parameters});\n  copyToTexture(texture, newTexture, {\n    targetY: 0,\n    width: oldWidth,\n    height: oldHeight\n  });\n\n  texture.delete();\n  return newTexture;\n}\n\n// traverse icons in a row of icon atlas\n// extend each icon with left-top coordinates\nfunction buildRowMapping(\n  mapping: IconMapping,\n  columns: {\n    icon: UnpackedIcon;\n    xOffset: number;\n  }[],\n  yOffset: number\n): void {\n  for (let i = 0; i < columns.length; i++) {\n    const {icon, xOffset} = columns[i];\n    const id = getIconId(icon);\n    mapping[id] = {\n      ...icon,\n      x: xOffset,\n      y: yOffset\n    };\n  }\n}\n\n/**\n * Generate coordinate mapping to retrieve icon left-top position from an icon atlas\n */\nexport function buildMapping({\n  icons,\n  buffer,\n  mapping = {},\n  xOffset = 0,\n  yOffset = 0,\n  rowHeight = 0,\n  canvasWidth\n}: {\n  /** list of icon definitions */\n  icons: UnpackedIcon[];\n  /** add bleeding buffer to the right and bottom side of the image */\n  buffer: number;\n  /** right position of last icon in old mapping */\n  xOffset: number;\n  /** top position in last icon in old mapping */\n  yOffset: number;\n  /** height of the last icon's row */\n  rowHeight: number;\n  /** max width of canvas */\n  canvasWidth: number;\n  mapping: IconMapping;\n}): {\n  mapping: IconMapping;\n  rowHeight: number;\n  xOffset: number;\n  yOffset: number;\n  canvasWidth: number;\n  canvasHeight: number;\n} {\n  let columns: {\n    icon: UnpackedIcon;\n    xOffset: number;\n  }[] = [];\n  // Strategy to layout all the icons into a texture:\n  // traverse the icons sequentially, layout the icons from left to right, top to bottom\n  // when the sum of the icons width is equal or larger than canvasWidth,\n  // move to next row starting from total height so far plus max height of the icons in previous row\n  // row width is equal to canvasWidth\n  // row height is decided by the max height of the icons in that row\n  // mapping coordinates of each icon is its left-top position in the texture\n  for (let i = 0; i < icons.length; i++) {\n    const icon = icons[i];\n    const id = getIconId(icon);\n\n    if (!mapping[id]) {\n      const {height, width} = icon;\n\n      // fill one row\n      if (xOffset + width + buffer > canvasWidth) {\n        buildRowMapping(mapping, columns, yOffset);\n\n        xOffset = 0;\n        yOffset = rowHeight + yOffset + buffer;\n        rowHeight = 0;\n        columns = [];\n      }\n\n      columns.push({\n        icon,\n        xOffset\n      });\n\n      xOffset = xOffset + width + buffer;\n      rowHeight = Math.max(rowHeight, height);\n    }\n  }\n\n  if (columns.length > 0) {\n    buildRowMapping(mapping, columns, yOffset);\n  }\n\n  return {\n    mapping,\n    rowHeight,\n    xOffset,\n    yOffset,\n    canvasWidth,\n    canvasHeight: nextPowOfTwo(rowHeight + yOffset + buffer)\n  };\n}\n\n// extract icons from data\n// return icons should be unique, and not cached or cached but url changed\nexport function getDiffIcons(\n  data: any,\n  getIcon: AccessorFunction<any, UnpackedIcon> | null,\n  cachedIcons: Record<string, PrepackedIcon & {url?: string}>\n): Record<\n  string,\n  UnpackedIcon & {\n    source: any;\n    sourceIndex: number;\n  }\n> | null {\n  if (!data || !getIcon) {\n    return null;\n  }\n\n  cachedIcons = cachedIcons || {};\n  const icons = {};\n  const {iterable, objectInfo} = createIterable(data);\n  for (const object of iterable) {\n    objectInfo.index++;\n    const icon = getIcon(object, objectInfo);\n    const id = getIconId(icon);\n\n    if (!icon) {\n      throw new Error('Icon is missing.');\n    }\n\n    if (!icon.url) {\n      throw new Error('Icon url is missing.');\n    }\n\n    if (!icons[id] && (!cachedIcons[id] || icon.url !== cachedIcons[id].url)) {\n      icons[id] = {...icon, source: object, sourceIndex: objectInfo.index};\n    }\n  }\n  return icons;\n}\n\nexport default class IconManager {\n  gl: WebGLRenderingContext;\n\n  private onUpdate: () => void;\n  private onError: (context: LoadIconErrorContext) => void;\n  private _loadOptions: any = null;\n  private _texture: Texture2D | null = null;\n  private _externalTexture: Texture2D | null = null;\n  private _mapping: IconMapping = {};\n  private _textureParameters: Record<number, number> | null = null;\n\n  /** count of pending requests to fetch icons */\n  private _pendingCount: number = 0;\n\n  private _autoPacking: boolean = false;\n\n  // / internal state used for autoPacking\n\n  private _xOffset: number = 0;\n  private _yOffset: number = 0;\n  private _rowHeight: number = 0;\n  private _buffer: number = DEFAULT_BUFFER;\n  private _canvasWidth: number = DEFAULT_CANVAS_WIDTH;\n  private _canvasHeight: number = 0;\n  private _canvas: HTMLCanvasElement | null = null;\n\n  constructor(\n    gl: WebGLRenderingContext,\n    {\n      onUpdate = noop,\n      onError = noop\n    }: {\n      /** Callback when the texture updates */\n      onUpdate: () => void;\n      /** Callback when an error is encountered */\n      onError: (context: LoadIconErrorContext) => void;\n    }\n  ) {\n    this.gl = gl;\n    this.onUpdate = onUpdate;\n    this.onError = onError;\n  }\n\n  finalize(): void {\n    this._texture?.delete();\n  }\n\n  getTexture(): Texture2D | null {\n    return this._texture || this._externalTexture;\n  }\n\n  getIconMapping(icon: string | UnpackedIcon): PrepackedIcon {\n    const id = this._autoPacking ? getIconId(icon as UnpackedIcon) : (icon as string);\n    return this._mapping[id] || {};\n  }\n\n  setProps({\n    loadOptions,\n    autoPacking,\n    iconAtlas,\n    iconMapping,\n    textureParameters\n  }: {\n    loadOptions?: any;\n    autoPacking?: boolean;\n    iconAtlas?: Texture2D | null;\n    iconMapping?: IconMapping | null;\n    textureParameters?: Record<number, number> | null;\n  }) {\n    if (loadOptions) {\n      this._loadOptions = loadOptions;\n    }\n\n    if (autoPacking !== undefined) {\n      this._autoPacking = autoPacking;\n    }\n\n    if (iconMapping) {\n      this._mapping = iconMapping;\n    }\n\n    if (iconAtlas) {\n      this._texture?.delete();\n      this._texture = null;\n      this._externalTexture = iconAtlas;\n    }\n\n    if (textureParameters) {\n      this._textureParameters = textureParameters;\n    }\n  }\n\n  get isLoaded(): boolean {\n    return this._pendingCount === 0;\n  }\n\n  packIcons(data: any, getIcon: AccessorFunction<any, UnpackedIcon>): void {\n    if (!this._autoPacking || typeof document === 'undefined') {\n      return;\n    }\n\n    const icons = Object.values(getDiffIcons(data, getIcon, this._mapping) || {});\n\n    if (icons.length > 0) {\n      // generate icon mapping\n      const {mapping, xOffset, yOffset, rowHeight, canvasHeight} = buildMapping({\n        icons,\n        buffer: this._buffer,\n        canvasWidth: this._canvasWidth,\n        mapping: this._mapping,\n        rowHeight: this._rowHeight,\n        xOffset: this._xOffset,\n        yOffset: this._yOffset\n      });\n\n      this._rowHeight = rowHeight;\n      this._mapping = mapping;\n      this._xOffset = xOffset;\n      this._yOffset = yOffset;\n      this._canvasHeight = canvasHeight;\n\n      // create new texture\n      if (!this._texture) {\n        this._texture = new Texture2D(this.gl, {\n          width: this._canvasWidth,\n          height: this._canvasHeight,\n          parameters: this._textureParameters || DEFAULT_TEXTURE_PARAMETERS\n        });\n      }\n\n      if (this._texture.height !== this._canvasHeight) {\n        this._texture = resizeTexture(\n          this._texture,\n          this._canvasWidth,\n          this._canvasHeight,\n          this._textureParameters || DEFAULT_TEXTURE_PARAMETERS\n        );\n      }\n\n      this.onUpdate();\n\n      // load images\n      this._canvas = this._canvas || document.createElement('canvas');\n      this._loadIcons(icons);\n    }\n  }\n\n  private _loadIcons(\n    icons: (UnpackedIcon & {\n      source: any;\n      sourceIndex: number;\n    })[]\n  ): void {\n    // This method is only called in the auto packing case, where _canvas is defined\n    const ctx = this._canvas!.getContext('2d', {\n      willReadFrequently: true\n    }) as CanvasRenderingContext2D;\n\n    for (const icon of icons) {\n      this._pendingCount++;\n      load(icon.url, this._loadOptions)\n        .then(imageData => {\n          const id = getIconId(icon);\n\n          const iconDef = this._mapping[id];\n          const {x, y, width: maxWidth, height: maxHeight} = iconDef;\n\n          const {data, width, height} = resizeImage(ctx, imageData, maxWidth, maxHeight);\n\n          this._texture.setSubImageData({\n            data,\n            x: x + (maxWidth - width) / 2,\n            y: y + (maxHeight - height) / 2,\n            width,\n            height\n          });\n          iconDef.width = width;\n          iconDef.height = height;\n\n          // Call to regenerate mipmaps after modifying texture(s)\n          this._texture.generateMipmap();\n\n          this.onUpdate();\n        })\n        .catch(error => {\n          this.onError({\n            url: icon.url,\n            source: icon.source,\n            sourceIndex: icon.sourceIndex,\n            loadOptions: this._loadOptions,\n            error\n          });\n        })\n        .finally(() => {\n          this._pendingCount--;\n        });\n    }\n  }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Layer, project32, picking, log, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './icon-layer-vertex.glsl';\nimport fs from './icon-layer-fragment.glsl';\nimport IconManager from './icon-manager';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  Accessor,\n  AccessorFunction,\n  Position,\n  Color,\n  Texture,\n  Unit,\n  UpdateParameters,\n  LayerContext,\n  DefaultProps\n} from '@deck.gl/core';\nimport type {UnpackedIcon, IconMapping, LoadIconErrorContext} from './icon-manager';\n\ntype _IconLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /** A prepacked image that contains all icons. */\n  iconAtlas?: string | Texture;\n  /** Icon names mapped to icon definitions, or a URL to load such mapping from a JSON file. */\n  iconMapping?: string | IconMapping;\n\n  /** Icon size multiplier.\n   * @default 1\n   */\n  sizeScale?: number;\n  /**\n   * The units of the icon size, one of `meters`, `common`, and `pixels`.\n   *\n   * @default 'pixels'\n   */\n  sizeUnits?: Unit;\n  /**\n   * The minimum size in pixels. When using non-pixel `sizeUnits`, this prop can be used to prevent the icon from getting too small when zoomed out.\n   */\n  sizeMinPixels?: number;\n  /**\n   * The maximum size in pixels. When using non-pixel `sizeUnits`, this prop can be used to prevent the icon from getting too big when zoomed in.\n   */\n  sizeMaxPixels?: number;\n  /** If `true`, the icon always faces camera. Otherwise the icon faces up (z)\n   * @default true\n   */\n  billboard?: boolean;\n  /**\n   * Discard pixels whose opacity is below this threshold.\n   * A discarded pixel would create a \"hole\" in the icon that is not considered part of the object.\n   * @default 0.05\n   */\n  alphaCutoff?: number;\n\n  /** Anchor position accessor. */\n  getPosition?: Accessor<DataT, Position>;\n  /** Icon definition accessor.\n   * Should return the icon id if using pre-packed icons (`iconAtlas` + `iconMapping`).\n   * Return an object that defines the icon if using auto-packing.\n   */\n  getIcon?: AccessorFunction<DataT, string> | AccessorFunction<DataT, UnpackedIcon>;\n  /** Icon color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n  /** Icon size accessor.\n   * @default 1\n   */\n  getSize?: Accessor<DataT, number>;\n  /** Icon rotation accessor, in degrees.\n   * @default 0\n   */\n  getAngle?: Accessor<DataT, number>;\n  /**\n   * Icon offsest accessor, in pixels.\n   * @default [0, 0]\n   */\n  getPixelOffset?: Accessor<DataT, [number, number]>;\n  /**\n   * Callback called if the attempt to fetch an icon returned by `getIcon` fails.\n   */\n  onIconError?: ((context: LoadIconErrorContext) => void) | null;\n\n  /** Customize the [texture parameters](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter). */\n  textureParameters?: Record<number, number> | null;\n};\n\nexport type IconLayerProps<DataT = any> = _IconLayerProps<DataT> & LayerProps;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<IconLayerProps> = {\n  iconAtlas: {type: 'image', value: null, async: true},\n  iconMapping: {type: 'object', value: {}, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  billboard: true,\n  sizeUnits: 'pixels',\n  sizeMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  sizeMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n  alphaCutoff: {type: 'number', value: 0.05, min: 0, max: 1},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getIcon: {type: 'accessor', value: x => x.icon},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n\n  onIconError: {type: 'function', value: null, optional: true},\n\n  textureParameters: {type: 'object', ignore: true}\n};\n\n/** Render raster icons at given coordinates. */\nexport default class IconLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_IconLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'IconLayer';\n\n  state!: {\n    model?: Model;\n    iconManager: IconManager;\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.state = {\n      iconManager: new IconManager(this.context.gl, {\n        onUpdate: this._onUpdate.bind(this),\n        onError: this._onError.bind(this)\n      })\n    };\n\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIcon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        transform: this.getInstanceOffset\n      },\n      instanceIconFrames: {\n        size: 4,\n        accessor: 'getIcon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        transform: this.getInstanceIconFrame\n      },\n      instanceColorModes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getIcon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        transform: this.getInstanceColorMode\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instancePixelOffset: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  /* eslint-disable max-statements, complexity */\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {props, oldProps, changeFlags} = params;\n\n    const attributeManager = this.getAttributeManager();\n    const {iconAtlas, iconMapping, data, getIcon, textureParameters} = props;\n    const {iconManager} = this.state;\n\n    // internalState is always defined during updateState\n    const prePacked = iconAtlas || this.internalState!.isAsyncPropLoading('iconAtlas');\n    iconManager.setProps({\n      loadOptions: props.loadOptions,\n      autoPacking: !prePacked,\n      iconAtlas,\n      iconMapping: prePacked ? (iconMapping as IconMapping) : null,\n      textureParameters\n    });\n\n    // prepacked iconAtlas from user\n    if (prePacked) {\n      if (oldProps.iconMapping !== props.iconMapping) {\n        attributeManager!.invalidate('getIcon');\n      }\n    } else if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon))\n    ) {\n      // Auto packing - getIcon is expected to return an object\n      iconManager.packIcons(data, getIcon as AccessorFunction<any, UnpackedIcon>);\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager!.invalidateAll();\n    }\n  }\n  /* eslint-enable max-statements, complexity */\n\n  get isLoaded(): boolean {\n    return super.isLoaded && this.state.iconManager.isLoaded;\n  }\n\n  finalizeState(context: LayerContext): void {\n    super.finalizeState(context);\n    // Release resources held by the icon manager\n    this.state.iconManager.finalize();\n  }\n\n  draw({uniforms}): void {\n    const {sizeScale, sizeMinPixels, sizeMaxPixels, sizeUnits, billboard, alphaCutoff} = this.props;\n    const {iconManager} = this.state;\n\n    const iconsTexture = iconManager.getTexture();\n    if (iconsTexture) {\n      this.state.model\n        .setUniforms(uniforms)\n        .setUniforms({\n          iconsTexture,\n          iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n          sizeUnits: UNIT[sizeUnits],\n          sizeScale,\n          sizeMinPixels,\n          sizeMaxPixels,\n          billboard,\n          alphaCutoff\n        })\n        .draw();\n    }\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    // The icon-layer vertex shader uses 2d positions\n    // specifed via: attribute vec2 positions;\n    const positions = [-1, -1, -1, 1, 1, 1, 1, -1];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        attributes: {\n          // The size must be explicitly passed here otherwise luma.gl\n          // will default to assuming that positions are 3D (x,y,z)\n          positions: {\n            size: 2,\n            value: new Float32Array(positions)\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  private _onUpdate(): void {\n    this.setNeedsRedraw();\n  }\n\n  private _onError(evt: LoadIconErrorContext): void {\n    const onIconError = this.getCurrentLayer()?.props.onIconError;\n    if (onIconError) {\n      onIconError(evt);\n    } else {\n      log.error(evt.error.message)();\n    }\n  }\n\n  protected getInstanceOffset(icon: string): number[] {\n    const {\n      width,\n      height,\n      anchorX = width / 2,\n      anchorY = height / 2\n    } = this.state.iconManager.getIconMapping(icon);\n    return [width / 2 - anchorX, height / 2 - anchorY];\n  }\n\n  protected getInstanceColorMode(icon: string): number {\n    const mapping = this.state.iconManager.getIconMapping(icon);\n    return mapping.mask ? 1 : 0;\n  }\n\n  protected getInstanceIconFrame(icon: string): number[] {\n    const {x, y, width, height} = this.state.iconManager.getIconMapping(icon);\n    return [x, y, width, height];\n  }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME line-layer-vertex-shader\n\nattribute vec3 positions;\nattribute vec3 instanceSourcePositions;\nattribute vec3 instanceTargetPositions;\nattribute vec3 instanceSourcePositions64Low;\nattribute vec3 instanceTargetPositions64Low;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\nattribute float instanceWidths;\n\nuniform float opacity;\nuniform float widthScale;\nuniform float widthMinPixels;\nuniform float widthMaxPixels;\nuniform float useShortestPath;\nuniform int widthUnits;\n\nvarying vec4 vColor;\nvarying vec2 uv;\n\n// offset vector by strokeWidth pixels\n// offset_direction is -1 (left) or 1 (right)\nvec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction, float width) {\n  // normalized direction of the line\n  vec2 dir_screenspace = normalize(line_clipspace * project_uViewportSize);\n  // rotate by 90 degrees\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\n\n  return dir_screenspace * offset_direction * width / 2.0;\n}\n\nvec3 splitLine(vec3 a, vec3 b, float x) {\n  float t = (x - a.x) / (b.x - a.x);\n  return vec3(x, mix(a.yz, b.yz, t));\n}\n\nvoid main(void) {\n  geometry.worldPosition = instanceSourcePositions;\n  geometry.worldPositionAlt = instanceTargetPositions;\n\n  vec3 source_world = instanceSourcePositions;\n  vec3 target_world = instanceTargetPositions;\n  vec3 source_world_64low = instanceSourcePositions64Low;\n  vec3 target_world_64low = instanceTargetPositions64Low;\n\n  if (useShortestPath > 0.5 || useShortestPath < -0.5) {\n    source_world.x = mod(source_world.x + 180., 360.0) - 180.;\n    target_world.x = mod(target_world.x + 180., 360.0) - 180.;\n    float deltaLng = target_world.x - source_world.x;\n\n    if (deltaLng * useShortestPath > 180.) {\n      source_world.x += 360. * useShortestPath;\n      source_world = splitLine(source_world, target_world, 180. * useShortestPath);\n      source_world_64low = vec3(0.0);\n    } else if (deltaLng * useShortestPath < -180.) {\n      target_world.x += 360. * useShortestPath;\n      target_world = splitLine(source_world, target_world, 180. * useShortestPath);\n      target_world_64low = vec3(0.0);\n    } else if (useShortestPath < 0.) {\n      // Line is not split, abort\n      gl_Position = vec4(0.);\n      return;\n    }\n  }\n\n  // Position\n  vec4 source_commonspace;\n  vec4 target_commonspace;\n  vec4 source = project_position_to_clipspace(source_world, source_world_64low, vec3(0.), source_commonspace);\n  vec4 target = project_position_to_clipspace(target_world, target_world_64low, vec3(0.), target_commonspace);\n  \n  // linear interpolation of source & target to pick right coord\n  float segmentIndex = positions.x;\n  vec4 p = mix(source, target, segmentIndex);\n  geometry.position = mix(source_commonspace, target_commonspace, segmentIndex);\n  uv = positions.xy;\n  geometry.uv = uv;\n  geometry.pickingColor = instancePickingColors;\n\n  // Multiply out width and clamp to limits\n  float widthPixels = clamp(\n    project_size_to_pixel(instanceWidths * widthScale, widthUnits),\n    widthMinPixels, widthMaxPixels\n  );\n\n  // extrude\n  vec3 offset = vec3(\n    getExtrusionOffset(target.xy - source.xy, positions.y, widthPixels),\n    0.0);\n  DECKGL_FILTER_SIZE(offset, geometry);\n  DECKGL_FILTER_GL_POSITION(p, geometry);\n  gl_Position = p + vec4(project_pixel_size_to_clipspace(offset.xy), 0.0, 0.0);\n\n  // Color\n  vColor = vec4(instanceColors.rgb, instanceColors.a * opacity);\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME line-layer-fragment-shader\n\nprecision highp float;\n\nvarying vec4 vColor;\nvarying vec2 uv;\n\nvoid main(void) {\n  geometry.uv = uv;\n\n  gl_FragColor = vColor;\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  project32,\n  picking,\n  UNIT,\n  LayerProps,\n  LayerDataSource,\n  Unit,\n  Position,\n  Accessor,\n  Color,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './line-layer-vertex.glsl';\nimport fs from './line-layer-fragment.glsl';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<LineLayerProps> = {\n  getSourcePosition: {type: 'accessor', value: x => x.sourcePosition},\n  getTargetPosition: {type: 'accessor', value: x => x.targetPosition},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n\n  widthUnits: 'pixels',\n  widthScale: {type: 'number', value: 1, min: 0},\n  widthMinPixels: {type: 'number', value: 0, min: 0},\n  widthMaxPixels: {type: 'number', value: Number.MAX_SAFE_INTEGER, min: 0}\n};\n\n/** All properties supported by LineLayer. */\nexport type LineLayerProps<DataT = any> = _LineLayerProps<DataT> & LayerProps;\n\n/** Properties added by LineLayer. */\ntype _LineLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * The units of the line width, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'pixels'\n   */\n  widthUnits?: Unit;\n\n  /**\n   * The scaling multiplier for the width of each line.\n   * @default 1\n   */\n  widthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   * @default 0\n   */\n  widthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  widthMaxPixels?: number;\n\n  /**\n   * Source position of each object.\n   * @default object => object.sourcePosition\n   */\n  getSourcePosition?: Accessor<DataT, Position>;\n\n  /**\n   * Target position of each object.\n   * @default object => object.targetPosition\n   */\n  getTargetPosition?: Accessor<DataT, Position>;\n\n  /**\n   * The rgba color is in the format of `[r, g, b, [a]]`.\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n\n  /**\n   * Width of each object\n   * @default 1\n   */\n  getWidth?: Accessor<DataT, number>;\n};\n\n/**\n * A layer that renders straight lines joining pairs of source and target coordinates.\n */\nexport default class LineLayer<DataT = any, ExtraProps extends {} = {}> extends Layer<\n  ExtraProps & Required<_LineLayerProps<DataT>>\n> {\n  static layerName = 'LineLayer';\n  static defaultProps = defaultProps;\n\n  getBounds(): [number[], number[]] | null {\n    return this.getAttributeManager()?.getBounds([\n      'instanceSourcePositions',\n      'instanceTargetPositions'\n    ]);\n  }\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  // This layer has its own wrapLongitude logic\n  get wrapLongitude(): boolean {\n    return false;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager()!;\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState(params: UpdateParameters<this>): void {\n    super.updateState(params);\n\n    if (params.changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}): void {\n    const {widthUnits, widthScale, widthMinPixels, widthMaxPixels, wrapLongitude} = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        widthUnits: UNIT[widthUnits],\n        widthScale,\n        widthMinPixels,\n        widthMaxPixels,\n        useShortestPath: wrapLongitude ? 1 : 0\n      })\n      .draw();\n\n    if (wrapLongitude) {\n      // Render a second copy for the clipped lines at the 180th meridian\n      this.state.model\n        .setUniforms({\n          useShortestPath: -1\n        })\n        .draw();\n    }\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    /*\n     *  (0, -1)-------------_(1, -1)\n     *       |          _,-\"  |\n     *       o      _,-\"      o\n     *       |  _,-\"          |\n     *   (0, 1)\"-------------(1, 1)\n     */\n    const positions = [0, -1, 0, 0, 1, 0, 1, -1, 0, 1, 1, 0];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_STRIP,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME point-cloud-layer-vertex-shader\n\nattribute vec3 positions;\nattribute vec3 instanceNormals;\nattribute vec4 instanceColors;\nattribute vec3 instancePositions;\nattribute vec3 instancePositions64Low;\nattribute vec3 instancePickingColors;\n\nuniform float opacity;\nuniform float radiusPixels;\nuniform int sizeUnits;\n\nvarying vec4 vColor;\nvarying vec2 unitPosition;\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n  geometry.normal = project_normal(instanceNormals);\n\n  // position on the containing square in [-1, 1] space\n  unitPosition = positions.xy;\n  geometry.uv = unitPosition;\n  geometry.pickingColor = instancePickingColors;\n\n  // Find the center of the point and add the current vertex\n  vec3 offset = vec3(positions.xy * project_size_to_pixel(radiusPixels, sizeUnits), 0.0);\n  DECKGL_FILTER_SIZE(offset, geometry);\n\n  gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.), geometry.position);\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);\n\n  // Apply lighting\n  vec3 lightColor = lighting_getLightColor(instanceColors.rgb, project_uCameraPosition, geometry.position.xyz, geometry.normal);\n\n  // Apply opacity to instance color, or return instance picking color\n  vColor = vec4(lightColor, instanceColors.a * opacity);\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME point-cloud-layer-fragment-shader\n\nprecision highp float;\n\nvarying vec4 vColor;\nvarying vec2 unitPosition;\n\nvoid main(void) {\n  geometry.uv = unitPosition;\n\n  float distToCenter = length(unitPosition);\n\n  if (distToCenter > 1.0) {\n    discard;\n  }\n\n  gl_FragColor = vColor;\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  project32,\n  gouraudLighting,\n  picking,\n  UNIT,\n  LayerProps,\n  LayerDataSource,\n  UpdateParameters,\n  Unit,\n  AccessorFunction,\n  Position,\n  Accessor,\n  Color,\n  Material,\n  DefaultProps\n} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './point-cloud-layer-vertex.glsl';\nimport fs from './point-cloud-layer-fragment.glsl';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\nconst DEFAULT_NORMAL: [number, number, number] = [0, 0, 1];\n\nconst defaultProps: DefaultProps<PointCloudLayerProps> = {\n  sizeUnits: 'pixels',\n  pointSize: {type: 'number', min: 0, value: 10}, //  point radius in pixels\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getNormal: {type: 'accessor', value: DEFAULT_NORMAL},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  material: true,\n\n  // Depreated\n  radiusPixels: {deprecatedFor: 'pointSize'}\n};\n\n// support loaders.gl point cloud format\nfunction normalizeData(data) {\n  const {header, attributes} = data;\n  if (!header || !attributes) {\n    return;\n  }\n\n  data.length = header.vertexCount;\n\n  if (attributes.POSITION) {\n    attributes.instancePositions = attributes.POSITION;\n  }\n  if (attributes.NORMAL) {\n    attributes.instanceNormals = attributes.NORMAL;\n  }\n  if (attributes.COLOR_0) {\n    attributes.instanceColors = attributes.COLOR_0;\n  }\n}\n\n/** All properties supported by PointCloudLayer. */\nexport type PointCloudLayerProps<DataT = any> = _PointCloudLayerProps<DataT> & LayerProps;\n\n/** Properties added by PointCloudLayer. */\ntype _PointCloudLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * The units of the point size, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'pixels'\n   */\n  sizeUnits?: Unit;\n\n  /**\n   * Global radius of all points, in units specified by `sizeUnits`\n   * @default 10\n   */\n  pointSize?: number;\n\n  /**\n   * @deprecated Use `pointSize` instead\n   */\n  radiusPixels?: number;\n\n  /**\n   * Material settings for lighting effect.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n\n  /**\n   * Method called to retrieve the position of each object.\n   * @default object => object.position\n   */\n  getPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * The normal of each object, in `[nx, ny, nz]`.\n   * @default [0, 0, 1]\n   */\n  getNormal?: Accessor<DataT, [number, number, number]>;\n\n  /**\n   * The rgba color is in the format of `[r, g, b, [a]]`\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n};\n\n/** Render a point cloud with 3D positions, normals and colors. */\nexport default class PointCloudLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_PointCloudLayerProps<DataT>>\n> {\n  static layerName = 'PointCloudLayer';\n  static defaultProps = defaultProps;\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, gouraudLighting, picking]});\n  }\n\n  initializeState() {\n    this.getAttributeManager()!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceNormals: {\n        size: 3,\n        transition: true,\n        accessor: 'getNormal',\n        defaultValue: DEFAULT_NORMAL\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      }\n    });\n  }\n\n  updateState(params: UpdateParameters<this>): void {\n    const {changeFlags, props} = params;\n    super.updateState(params);\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n    if (changeFlags.dataChanged) {\n      normalizeData(props.data);\n    }\n  }\n\n  draw({uniforms}) {\n    const {pointSize, sizeUnits} = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        sizeUnits: UNIT[sizeUnits],\n        radiusPixels: pointSize\n      })\n      .draw();\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    // a triangle that minimally cover the unit circle\n    const positions: number[] = [];\n    for (let i = 0; i < 3; i++) {\n      const angle = (i / 3) * Math.PI * 2;\n      positions.push(Math.cos(angle) * 2, Math.sin(angle) * 2, 0);\n    }\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLES,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME scatterplot-layer-vertex-shader\n\nattribute vec3 positions;\n\nattribute vec3 instancePositions;\nattribute vec3 instancePositions64Low;\nattribute float instanceRadius;\nattribute float instanceLineWidths;\nattribute vec4 instanceFillColors;\nattribute vec4 instanceLineColors;\nattribute vec3 instancePickingColors;\n\nuniform float opacity;\nuniform float radiusScale;\nuniform float radiusMinPixels;\nuniform float radiusMaxPixels;\nuniform float lineWidthScale;\nuniform float lineWidthMinPixels;\nuniform float lineWidthMaxPixels;\nuniform float stroked;\nuniform bool filled;\nuniform bool antialiasing;\nuniform bool billboard;\nuniform int radiusUnits;\nuniform int lineWidthUnits;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying vec2 unitPosition;\nvarying float innerUnitRadius;\nvarying float outerRadiusPixels;\n\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n\n  // Multiply out radius and clamp to limits\n  outerRadiusPixels = clamp(\n    project_size_to_pixel(radiusScale * instanceRadius, radiusUnits),\n    radiusMinPixels, radiusMaxPixels\n  );\n  \n  // Multiply out line width and clamp to limits\n  float lineWidthPixels = clamp(\n    project_size_to_pixel(lineWidthScale * instanceLineWidths, lineWidthUnits),\n    lineWidthMinPixels, lineWidthMaxPixels\n  );\n\n  // outer radius needs to offset by half stroke width\n  outerRadiusPixels += stroked * lineWidthPixels / 2.0;\n\n  // Expand geometry to accomodate edge smoothing\n  float edgePadding = antialiasing ? (outerRadiusPixels + SMOOTH_EDGE_RADIUS) / outerRadiusPixels : 1.0;\n\n  // position on the containing square in [-1, 1] space\n  unitPosition = edgePadding * positions.xy;\n  geometry.uv = unitPosition;\n  geometry.pickingColor = instancePickingColors;\n\n  innerUnitRadius = 1.0 - stroked * lineWidthPixels / outerRadiusPixels;\n  \n  if (billboard) {\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n    vec3 offset = edgePadding * positions * outerRadiusPixels;\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);\n  } else {\n    vec3 offset = edgePadding * positions * project_pixel_size(outerRadiusPixels);\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset, geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  }\n\n  // Apply opacity to instance color, or return instance picking color\n  vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * opacity);\n  DECKGL_FILTER_COLOR(vFillColor, geometry);\n  vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * opacity);\n  DECKGL_FILTER_COLOR(vLineColor, geometry);\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME scatterplot-layer-fragment-shader\n\nprecision highp float;\n\nuniform bool filled;\nuniform float stroked;\nuniform bool antialiasing;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying vec2 unitPosition;\nvarying float innerUnitRadius;\nvarying float outerRadiusPixels;\n\nvoid main(void) {\n  geometry.uv = unitPosition;\n\n  float distToCenter = length(unitPosition) * outerRadiusPixels;\n  float inCircle = antialiasing ? \n    smoothedge(distToCenter, outerRadiusPixels) : \n    step(distToCenter, outerRadiusPixels);\n\n  if (inCircle == 0.0) {\n    discard;\n  }\n\n  if (stroked > 0.5) {\n    float isLine = antialiasing ? \n      smoothedge(innerUnitRadius * outerRadiusPixels, distToCenter) :\n      step(innerUnitRadius * outerRadiusPixels, distToCenter);\n\n    if (filled) {\n      gl_FragColor = mix(vFillColor, vLineColor, isLine);\n    } else {\n      if (isLine == 0.0) {\n        discard;\n      }\n      gl_FragColor = vec4(vLineColor.rgb, vLineColor.a * isLine);\n    }\n  } else if (!filled) {\n    discard;\n  } else {\n    gl_FragColor = vFillColor;\n  }\n\n  gl_FragColor.a *= inCircle;\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './scatterplot-layer-vertex.glsl';\nimport fs from './scatterplot-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  UpdateParameters,\n  Accessor,\n  Unit,\n  Position,\n  Color,\n  DefaultProps\n} from '@deck.gl/core';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\n/** All props supported by the ScatterplotLayer */\nexport type ScatterplotLayerProps<DataT = any> = _ScatterplotLayerProps<DataT> & LayerProps;\n\n/** Props added by the ScatterplotLayer */\ntype _ScatterplotLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * The units of the radius, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'meters'\n   */\n  radiusUnits?: Unit;\n  /**\n   * Radius multiplier.\n   * @default 1\n   */\n  radiusScale?: number;\n  /**\n   * The minimum radius in pixels. This prop can be used to prevent the circle from getting too small when zoomed out.\n   * @default 0\n   */\n  radiusMinPixels?: number;\n  /**\n   * The maximum radius in pixels. This prop can be used to prevent the circle from getting too big when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  radiusMaxPixels?: number;\n\n  /**\n   * The units of the stroke width, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'meters'\n   */\n  lineWidthUnits?: Unit;\n  /**\n   * Stroke width multiplier.\n   * @default 1\n   */\n  lineWidthScale?: number;\n  /**\n   * The minimum stroke width in pixels. This prop can be used to prevent the line from getting too thin when zoomed out.\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n  /**\n   * The maximum stroke width in pixels. This prop can be used to prevent the circle from getting too thick when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Draw the outline of points.\n   * @default false\n   */\n  stroked?: boolean;\n  /**\n   * Draw the filled area of points.\n   * @default true\n   */\n  filled?: boolean;\n  /**\n   * If `true`, rendered circles always face the camera. If `false` circles face up (i.e. are parallel with the ground plane).\n   * @default false\n   */\n  billboard?: boolean;\n  /**\n   * If `true`, circles are rendered with smoothed edges. If `false`, circles are rendered with rough edges. Antialiasing can cause artifacts on edges of overlapping circles.\n   * @default true\n   */\n  antialiasing?: boolean;\n\n  /**\n   * Center position accessor.\n   */\n  getPosition?: Accessor<DataT, Position>;\n  /**\n   * Radius accessor.\n   * @default 1\n   */\n  getRadius?: Accessor<DataT, number>;\n  /**\n   * Fill color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n  /**\n   * Stroke color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n  /**\n   * Stroke width accessor.\n   * @default 1\n   */\n  getLineWidth?: Accessor<DataT, number>;\n  /**\n   * @deprecated Use `getLineWidth` instead\n   */\n  strokeWidth?: number;\n  /**\n   * @deprecated Use `stroked` instead\n   */\n  outline?: boolean;\n  /**\n   * @deprecated Use `getFillColor` and `getLineColor` instead\n   */\n  getColor?: Accessor<DataT, Color>;\n};\n\nconst defaultProps: DefaultProps<ScatterplotLayerProps> = {\n  radiusUnits: 'meters',\n  radiusScale: {type: 'number', min: 0, value: 1},\n  radiusMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  radiusMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: {type: 'number', min: 0, value: 1},\n  lineWidthMinPixels: {type: 'number', min: 0, value: 0},\n  lineWidthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n\n  stroked: false,\n  filled: true,\n  billboard: false,\n  antialiasing: true,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getRadius: {type: 'accessor', value: 1},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n\n  // deprecated\n  strokeWidth: {deprecatedFor: 'getLineWidth'},\n  outline: {deprecatedFor: 'stroked'},\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\n/** Render circles at given coordinates. */\nexport default class ScatterplotLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_ScatterplotLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName: string = 'ScatterplotLayer';\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.getAttributeManager()!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceRadius: {\n        size: 1,\n        transition: true,\n        accessor: 'getRadius',\n        defaultValue: 1\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n\n    if (params.changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      radiusUnits,\n      radiusScale,\n      radiusMinPixels,\n      radiusMaxPixels,\n      stroked,\n      filled,\n      billboard,\n      antialiasing,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels\n    } = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        stroked: stroked ? 1 : 0,\n        filled,\n        billboard,\n        antialiasing,\n        radiusUnits: UNIT[radiusUnits],\n        radiusScale,\n        radiusMinPixels,\n        radiusMaxPixels,\n        lineWidthUnits: UNIT[lineWidthUnits],\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels\n      })\n      .draw();\n  }\n\n  protected _getModel(gl) {\n    // a square that minimally cover the unit circle\n    const positions = [-1, -1, 0, 1, -1, 0, 1, 1, 0, -1, 1, 0];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount: 4,\n        attributes: {\n          positions: {size: 3, value: new Float32Array(positions)}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n", "/* eslint-disable max-statements, max-depth, complexity, no-unused-expressions */\n\nimport {equals} from '@math.gl/core';\nimport type {NumericArray} from '@math.gl/core';\n\nexport const WINDING = {\n  CLOCKWISE: 1,\n  COUNTER_CLOCKWISE: -1\n} as const;\n\n/** Polygon representation where each point is represented as a separate array of positions. */\ntype PointsArray = NumericArray[];\n\n/** Segment visitor callback type for polygons defined with flat arrays, */\ntype SegmentVisitorFlat = (\n  p1x: number,\n  p1y: number,\n  p2x: number,\n  p2y: number,\n  i1: number,\n  i2: number\n) => void;\n\n/** Segment visitor callback type for polygons defined with array of points. */\nexport type SegmentVisitorPoints = (\n  p1: NumericArray,\n  p2: NumericArray,\n  i1: number,\n  i2: number\n) => void;\n\n/** Parameters of a polygon. */\ntype PolygonParams = {\n  start?: number; // Start index of the polygon in the array of positions. Defaults to 0.\n  end?: number; // End index of the polygon in the array of positions. Defaults to number of positions.\n  size?: number; // Size of a point, 2 (XZ) or 3 (XYZ). Defaults to 2. Affects only polygons stored in flat arrays.\n  isClosed?: boolean; // Indicates that the first point of the polygon is equal to the last point, and additional checks should be ommited.\n};\n\n/**\n * Checks winding direction of the polygon and reverses the polygon in case of opposite winding direction.\n * Note: points are modified in-place.\n * @param points An array that represents points of the polygon.\n * @param direction Requested winding direction. 1 is for clockwise, -1 for counterclockwise winding direction.\n * @param options Parameters of the polygon.\n * @return Returns true if the winding direction was changed.\n */\nexport function modifyPolygonWindingDirection(\n  points: NumericArray,\n  direction: number,\n  options: PolygonParams = {}\n): boolean {\n  const windingDirection = getPolygonWindingDirection(points, options);\n  if (windingDirection !== direction) {\n    reversePolygon(points, options);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Returns winding direction of the polygon.\n * @param points An array that represents points of the polygon.\n * @param options Parameters of the polygon.\n * @returns Winding direction of the polygon.\n */\nexport function getPolygonWindingDirection(\n  points: NumericArray,\n  options: PolygonParams = {}\n): number {\n  return Math.sign(getPolygonSignedArea(points, options));\n}\n\n/**\n * Returns signed area of the polygon.\n * @param points An array that represents points of the polygon.\n * @param options Parameters of the polygon.\n * @returns Signed area of the polygon.\n * https://en.wikipedia.org/wiki/Shoelace_formula\n */\nexport function getPolygonSignedArea(points: NumericArray, options: PolygonParams = {}): number {\n  const {start = 0, end = points.length} = options;\n  const dim = options.size || 2;\n  let area = 0;\n  for (let i = start, j = end - dim; i < end; i += dim) {\n    area += (points[i] - points[j]) * (points[i + 1] + points[j + 1]);\n    j = i;\n  }\n  return area / 2;\n}\n\n/**\n * Calls the visitor callback for each segment in the polygon.\n * @param points An array that represents points of the polygon\n * @param visitor A callback to call for each segment.\n * @param options Parameters of the polygon.\n */\nexport function forEachSegmentInPolygon(\n  points: NumericArray,\n  visitor: SegmentVisitorFlat,\n  options: PolygonParams = {}\n): void {\n  const {start = 0, end = points.length, size = 2, isClosed} = options;\n\n  const numPoints = (end - start) / size;\n  for (let i = 0; i < numPoints - 1; ++i) {\n    visitor(\n      points[start + i * size],\n      points[start + i * size + 1],\n      points[start + (i + 1) * size],\n      points[start + (i + 1) * size + 1],\n      i,\n      i + 1\n    );\n  }\n\n  const endPointIndex = start + (numPoints - 1) * size;\n  const isClosedEx =\n    isClosed ||\n    (equals(points[start], points[endPointIndex]) &&\n      equals(points[start + 1], points[endPointIndex + 1]));\n\n  if (!isClosedEx) {\n    visitor(\n      points[endPointIndex],\n      points[endPointIndex + 1],\n      points[start],\n      points[start + 1],\n      numPoints - 1,\n      0\n    );\n  }\n}\n\nfunction reversePolygon(\n  points: NumericArray,\n  options: {start?: number; end?: number; size?: number}\n): void {\n  const {start = 0, end = points.length, size = 2} = options;\n\n  const numPoints = (end - start) / size;\n  const numSwaps = Math.floor(numPoints / 2);\n  for (let i = 0; i < numSwaps; ++i) {\n    const b1 = start + i * size;\n    const b2 = start + (numPoints - 1 - i) * size;\n    for (let j = 0; j < size; ++j) {\n      const tmp = points[b1 + j];\n      points[b1 + j] = points[b2 + j];\n      points[b2 + j] = tmp;\n    }\n  }\n}\n\n/**\n * Checks winding direction of the polygon and reverses the polygon in case of opposite winding direction.\n * Note: points are modified in-place.\n * @param points Array of points that represent the polygon.\n * @param direction Requested winding direction. 1 is for clockwise, -1 for counterclockwise winding direction.\n * @param options Parameters of the polygon.\n * @return Returns true if the winding direction was changed.\n */\nexport function modifyPolygonWindingDirectionPoints(\n  points: PointsArray,\n  direction: number,\n  options: PolygonParams = {}\n): boolean {\n  const currentDirection = getPolygonWindingDirectionPoints(points, options);\n  if (currentDirection !== direction) {\n    points.reverse();\n    return true;\n  }\n  return false;\n}\n\n/**\n * Returns winding direction of the polygon.\n * @param points Array of points that represent the polygon.\n * @param options Parameters of the polygon.\n * @returns Winding direction of the polygon.\n */\nexport function getPolygonWindingDirectionPoints(\n  points: PointsArray,\n  options: PolygonParams = {}\n): number {\n  return Math.sign(getPolygonSignedAreaPoints(points, options));\n}\n\n/**\n * Returns signed area of the polygon.\n * @param points Array of points that represent the polygon.\n * @param options Parameters of the polygon.\n * @returns Signed area of the polygon.\n */\nexport function getPolygonSignedAreaPoints(\n  points: PointsArray,\n  options: PolygonParams = {}\n): number {\n  // https://en.wikipedia.org/wiki/Shoelace_formula\n  const {start = 0, end = points.length} = options;\n  let area = 0;\n  for (let i = start, j = end - 1; i < end; ++i) {\n    area += (points[i][0] - points[j][0]) * (points[i][1] + points[j][1]);\n    j = i;\n  }\n  return area / 2;\n}\n\n/**\n * Calls visitor callback for each segment in the polygon.\n * @param points Array of points that represent the polygon.\n * @param visitor A callback to call for each segment.\n * @param options Parameters of the polygon.\n */\nexport function forEachSegmentInPolygonPoints(\n  points: PointsArray,\n  visitor: SegmentVisitorPoints,\n  options: PolygonParams = {}\n): void {\n  const {start = 0, end = points.length, isClosed} = options;\n  for (let i = start; i < end - 1; ++i) {\n    visitor(points[i], points[i + 1], i, i + 1);\n  }\n\n  const isClosedEx = isClosed || equals(points[end - 1], points[0]);\n  if (!isClosedEx) {\n    visitor(points[end - 1], points[0], end - 1, 0);\n  }\n}\n", "import type {NumericArray} from '@math.gl/core';\n\nexport function push(target: number[], source: number[]): boolean {\n  const size = source.length;\n  const startIndex = target.length;\n\n  // dedupe, if source is the same point as the last vertex\n  if (startIndex > 0) {\n    let isDuplicate = true;\n    for (let i = 0; i < size; i++) {\n      if (target[startIndex - size + i] !== source[i]) {\n        isDuplicate = false;\n        break;\n      }\n    }\n    if (isDuplicate) {\n      return false;\n    }\n  }\n\n  for (let i = 0; i < size; i++) {\n    target[startIndex + i] = source[i];\n  }\n  return true;\n}\n\nexport function copy(target: number[], source: Readonly<NumericArray>): void {\n  const size = source.length;\n  for (let i = 0; i < size; i++) {\n    target[i] = source[i];\n  }\n}\n\nexport function getPointAtIndex(\n  positions: Readonly<NumericArray>,\n  index: number,\n  size: number,\n  offset: number,\n  out: number[] = []\n): number[] {\n  const startI = offset + index * size;\n  for (let i = 0; i < size; i++) {\n    out[i] = positions[startI + i];\n  }\n  return out;\n}\n", "/*\n  Adapted from https://github.com/mapbox/lineclip to work with flat arrays\n  and 3d positions\n\n  ISC License\n\n  Copyright (c) 2015, Mapbox\n\n  Permission to use, copy, modify, and/or distribute this software for any purpose\n  with or without fee is hereby granted, provided that the above copyright notice\n  and this permission notice appear in all copies.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\n  FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n  OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\n  TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n  THIS SOFTWARE.\n\n */\n\n/* eslint-disable max-statements, max-depth, complexity */\n\nimport {push, copy, getPointAtIndex} from './utils';\nimport type {NumericArray} from '@math.gl/core';\n\nexport type BoundingBox = [number, number, number, number];\n\n/**\n * Cohen-Sutherland line clipping algorithm, adapted to efficiently\n * handle polylines rather than just segments\n */\nexport function clipPolyline(\n  positions: Readonly<NumericArray>,\n  bbox: BoundingBox,\n  options?: {\n    size?: number;\n    startIndex?: number;\n    endIndex?: number;\n  }\n): number[][] {\n  const {size = 2, startIndex = 0, endIndex = positions.length} = options || {};\n  const numPoints = (endIndex - startIndex) / size;\n  const result: number[][] = [];\n  let part: number[] = [];\n  let a: number[];\n  let b: number[];\n  let codeA: number = -1;\n  let codeB: number;\n  let lastCode: number;\n\n  for (let i = 1; i < numPoints; i++) {\n    a = getPointAtIndex(positions, i - 1, size, startIndex, a);\n    b = getPointAtIndex(positions, i, size, startIndex, b);\n    if (codeA < 0) {\n      codeA = bitCode(a, bbox);\n    }\n    codeB = lastCode = bitCode(b, bbox);\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      if (!(codeA | codeB)) {\n        // accept\n        push(part, a);\n\n        if (codeB !== lastCode) {\n          // segment went outside\n          push(part, b);\n\n          if (i < numPoints - 1) {\n            // start a new line\n            result.push(part);\n            part = [];\n          }\n        } else if (i === numPoints - 1) {\n          push(part, b);\n        }\n        break;\n      } else if (codeA & codeB) {\n        // trivial reject\n        break;\n      } else if (codeA) {\n        // a outside, intersect with clip edge\n        intersect(a, b, codeA, bbox, a);\n        codeA = bitCode(a, bbox);\n      } else {\n        // b outside\n        intersect(a, b, codeB, bbox, b);\n        codeB = bitCode(b, bbox);\n      }\n    }\n\n    codeA = lastCode;\n  }\n\n  if (part.length) result.push(part);\n\n  return result;\n}\n\n/**\n * Sutherland-Hodgeman polygon clipping algorithm\n * polygon must be closed (first vertex == last vertex)\n */\nexport function clipPolygon(\n  positions: Readonly<NumericArray>,\n  bbox: BoundingBox,\n  options?: {\n    size?: number;\n    startIndex?: number;\n    endIndex?: number;\n  }\n): number[] {\n  const {size = 2, endIndex = positions.length} = options || {};\n  let {startIndex = 0} = options || {};\n  let numPoints = (endIndex - startIndex) / size;\n  let result: number[];\n  let p: number[];\n  let prev: number[];\n  let inside: boolean;\n  let prevInside: boolean;\n\n  // clip against each side of the clip rectangle\n  for (let edge = 1; edge <= 8; edge *= 2) {\n    result = [];\n    prev = getPointAtIndex(positions, numPoints - 1, size, startIndex, prev);\n    prevInside = !(bitCode(prev, bbox) & edge);\n\n    for (let i = 0; i < numPoints; i++) {\n      p = getPointAtIndex(positions, i, size, startIndex, p);\n      inside = !(bitCode(p, bbox) & edge);\n\n      // if segment goes through the clip window, add an intersection\n      if (inside !== prevInside) push(result, intersect(prev, p, edge, bbox));\n\n      if (inside) push(result, p); // add a point if it's inside\n\n      copy(prev, p);\n      prevInside = inside;\n    }\n\n    // close loop\n    positions = result;\n    startIndex = 0;\n    numPoints = result.length / size;\n\n    if (!numPoints) break;\n  }\n\n  return result;\n}\n\n/** intersect a segment against one of the 4 lines that make up the bbox */\n\nexport function intersect(\n  a: number[],\n  b: number[],\n  edge: number,\n  bbox: BoundingBox,\n  out: number[] = []\n): number[] {\n  let t;\n  // Forces out[snapI] to be on the bbox edge\n  // Interpolation introduces precision issue which may cause lineclip to be\n  // stuck in an infinite loop\n  let snap: number;\n  if (edge & 8) {\n    // top\n    t = (bbox[3] - a[1]) / (b[1] - a[1]);\n    snap = 3;\n  } else if (edge & 4) {\n    // bottom\n    t = (bbox[1] - a[1]) / (b[1] - a[1]);\n    snap = 1;\n  } else if (edge & 2) {\n    // right\n    t = (bbox[2] - a[0]) / (b[0] - a[0]);\n    snap = 2;\n  } else if (edge & 1) {\n    // left\n    t = (bbox[0] - a[0]) / (b[0] - a[0]);\n    snap = 0;\n  } else {\n    return null;\n  }\n  for (let i = 0; i < a.length; i++) {\n    out[i] = (snap & 1) === i ? bbox[snap] : t * (b[i] - a[i]) + a[i];\n  }\n  return out;\n}\n\n/**\n * bit code reflects the point position relative to the bbox:\n *         left  mid  right\n *    top  1001  1000  1010\n *    mid  0001  0000  0010\n * bottom  0101  0100  0110\n */\nexport function bitCode(p: number[], bbox: BoundingBox): number {\n  let code = 0;\n\n  if (p[0] < bbox[0]) code |= 1;\n  // left\n  else if (p[0] > bbox[2]) code |= 2; // right\n\n  if (p[1] < bbox[1]) code |= 4;\n  // bottom\n  else if (p[1] > bbox[3]) code |= 8; // top\n\n  return code;\n}\n", "/* eslint-disable max-statements, max-depth, complexity, no-unused-expressions */\nimport {bitCode, intersect, BoundingBox} from './lineclip';\nimport {getPointAtIndex, copy, push} from './utils';\n\nimport type {NumericArray} from '@math.gl/core';\n\nexport type Polygon = {\n  positions: Readonly<NumericArray>;\n  holeIndices?: Readonly<NumericArray>;\n  edgeTypes?: Readonly<NumericArray>;\n};\n\nexport function cutPolylineByGrid(\n  positions: NumericArray,\n  options?: {\n    size?: number;\n    broken?: boolean;\n    gridResolution?: number;\n    gridOffset?: [number, number];\n    startIndex?: number;\n    endIndex?: number;\n  }\n): number[] | number[][] {\n  const {\n    size = 2,\n    broken = false,\n    gridResolution = 10,\n    gridOffset = [0, 0],\n    startIndex = 0,\n    endIndex = positions.length\n  } = options || {};\n  const numPoints = (endIndex - startIndex) / size;\n  let part: number[] = [];\n  const result: number[][] = [part];\n  const a: number[] = getPointAtIndex(positions, 0, size, startIndex);\n  let b: number[];\n  let codeB: number;\n  const cell: BoundingBox = getGridCell(a, gridResolution, gridOffset, []);\n  const scratchPoint: number[] = [];\n  push(part, a);\n\n  for (let i = 1; i < numPoints; i++) {\n    b = getPointAtIndex(positions, i, size, startIndex, b);\n    codeB = bitCode(b, cell);\n\n    while (codeB) {\n      // find the intersection with the current cell\n      intersect(a, b, codeB, cell, scratchPoint);\n      const codeAlt = bitCode(scratchPoint, cell);\n      if (codeAlt) {\n        intersect(a, scratchPoint, codeAlt, cell, scratchPoint);\n        codeB = codeAlt;\n      }\n      push(part, scratchPoint);\n      // move to the next cell\n      copy(a, scratchPoint);\n\n      moveToNeighborCell(cell, gridResolution, codeB);\n      if (broken && part.length > size) {\n        part = [];\n        result.push(part);\n        push(part, a);\n      }\n\n      codeB = bitCode(b, cell);\n    }\n\n    push(part, b);\n    copy(a, b);\n  }\n\n  return broken ? result : result[0];\n}\n\nconst TYPE_INSIDE = 0;\nconst TYPE_BORDER = 1;\n\nfunction concatInPlace(arr1: number[], arr2: number[]): number[] {\n  for (let i = 0; i < arr2.length; i++) {\n    arr1.push(arr2[i]);\n  }\n  return arr1;\n}\n\nexport function cutPolygonByGrid(\n  positions: Readonly<NumericArray>,\n  holeIndices: Readonly<NumericArray> | null = null,\n  options?: {\n    size?: number;\n    gridResolution?: number;\n    gridOffset?: [number, number];\n    edgeTypes?: boolean;\n  }\n): Polygon[] {\n  if (!positions.length) {\n    // input is empty\n    return [];\n  }\n  const {size = 2, gridResolution = 10, gridOffset = [0, 0], edgeTypes = false} = options || {};\n  const result: Polygon[] = [];\n  const queue: {pos: Readonly<NumericArray>; types: number[]; holes: Readonly<NumericArray>}[] = [\n    {\n      pos: positions,\n      types: edgeTypes ? (new Array(positions.length / size).fill(TYPE_BORDER) as number[]) : null,\n      holes: holeIndices || []\n    }\n  ];\n  const bbox: number[][] = [[], []];\n  // @ts-ignore\n  let cell: BoundingBox = [];\n\n  // Recursively bisect polygon until every part fit in a single grid cell\n  while (queue.length) {\n    const {pos, types, holes} = queue.shift();\n\n    // Get the bounding box of the outer polygon\n    getBoundingBox(pos, size, holes[0] || pos.length, bbox);\n    cell = getGridCell(bbox[0], gridResolution, gridOffset, cell);\n    const code = bitCode(bbox[1], cell);\n\n    if (code) {\n      // Split the outer ring at the boundary\n      let parts = bisectPolygon(pos, types, size, 0, holes[0] || pos.length, cell, code);\n      const polygonLow = {pos: parts[0].pos, types: parts[0].types, holes: []};\n      const polygonHigh = {pos: parts[1].pos, types: parts[1].types, holes: []};\n      queue.push(polygonLow, polygonHigh);\n\n      // Split each hole at the boundary\n      for (let i = 0; i < holes.length; i++) {\n        parts = bisectPolygon(pos, types, size, holes[i], holes[i + 1] || pos.length, cell, code);\n\n        if (parts[0]) {\n          polygonLow.holes.push(polygonLow.pos.length);\n          polygonLow.pos = concatInPlace(polygonLow.pos, parts[0].pos);\n          if (edgeTypes) {\n            polygonLow.types = concatInPlace(polygonLow.types, parts[0].types);\n          }\n        }\n        if (parts[1]) {\n          polygonHigh.holes.push(polygonHigh.pos.length);\n          polygonHigh.pos = concatInPlace(polygonHigh.pos, parts[1].pos);\n          if (edgeTypes) {\n            polygonHigh.types = concatInPlace(polygonHigh.types, parts[1].types);\n          }\n        }\n      }\n    } else {\n      // Polygon fits in a single cell, no more processing required\n      const polygon: Polygon = {positions: pos};\n      if (edgeTypes) {\n        polygon.edgeTypes = types;\n      }\n      if (holes.length) {\n        polygon.holeIndices = holes;\n      }\n\n      result.push(polygon);\n    }\n  }\n  return result;\n}\n\n// edgeTypes:\n// TYPE_BORDER - edge from the original polygon\n// TYPE_INSIDE - inside the original polygon\n// eslint-disable-next-line max-params\nfunction bisectPolygon(\n  positions: Readonly<NumericArray>,\n  edgeTypes: number[] | undefined,\n  size: number,\n  startIndex: number,\n  endIndex: number,\n  bbox: BoundingBox,\n  edge: number\n): {\n  pos: number[];\n  types?: number[];\n}[] {\n  const numPoints = (endIndex - startIndex) / size;\n  const resultLow: number[] = [];\n  const resultHigh: number[] = [];\n  const typesLow: number[] = [];\n  const typesHigh: number[] = [];\n  const scratchPoint: number[] = [];\n\n  let p: number[];\n  let side: number;\n  let type: number;\n  const prev = getPointAtIndex(positions, numPoints - 1, size, startIndex);\n  let prevSide = Math.sign(edge & 8 ? prev[1] - bbox[3] : prev[0] - bbox[2]);\n  let prevType = edgeTypes && edgeTypes[numPoints - 1];\n  let lowPointCount = 0;\n  let highPointCount = 0;\n\n  for (let i = 0; i < numPoints; i++) {\n    p = getPointAtIndex(positions, i, size, startIndex, p);\n    side = Math.sign(edge & 8 ? p[1] - bbox[3] : p[0] - bbox[2]);\n    type = edgeTypes && edgeTypes[startIndex / size + i];\n\n    // if segment goes through the boundary, add an intersection\n    if (side && prevSide && prevSide !== side) {\n      intersect(prev, p, edge, bbox, scratchPoint);\n      push(resultLow, scratchPoint) && typesLow.push(prevType);\n      push(resultHigh, scratchPoint) && typesHigh.push(prevType);\n    }\n\n    if (side <= 0) {\n      push(resultLow, p) && typesLow.push(type);\n      lowPointCount -= side;\n    } else if (typesLow.length) {\n      typesLow[typesLow.length - 1] = TYPE_INSIDE;\n    }\n    if (side >= 0) {\n      push(resultHigh, p) && typesHigh.push(type);\n      highPointCount += side;\n    } else if (typesHigh.length) {\n      typesHigh[typesHigh.length - 1] = TYPE_INSIDE;\n    }\n\n    copy(prev, p);\n    prevSide = side;\n    prevType = type;\n  }\n\n  return [\n    lowPointCount ? {pos: resultLow, types: edgeTypes && typesLow} : null,\n    highPointCount ? {pos: resultHigh, types: edgeTypes && typesHigh} : null\n  ];\n}\n\nfunction getGridCell(\n  p: number[],\n  gridResolution: number,\n  gridOffset: [number, number],\n  out: number[]\n): BoundingBox {\n  const left = Math.floor((p[0] - gridOffset[0]) / gridResolution) * gridResolution + gridOffset[0];\n  const bottom =\n    Math.floor((p[1] - gridOffset[1]) / gridResolution) * gridResolution + gridOffset[1];\n  out[0] = left;\n  out[1] = bottom;\n  out[2] = left + gridResolution;\n  out[3] = bottom + gridResolution;\n  return out as BoundingBox;\n}\n\nfunction moveToNeighborCell(cell: number[], gridResolution: number, edge: number): void {\n  if (edge & 8) {\n    // top\n    cell[1] += gridResolution;\n    cell[3] += gridResolution;\n  } else if (edge & 4) {\n    // bottom\n    cell[1] -= gridResolution;\n    cell[3] -= gridResolution;\n  } else if (edge & 2) {\n    // right\n    cell[0] += gridResolution;\n    cell[2] += gridResolution;\n  } else if (edge & 1) {\n    // left\n    cell[0] -= gridResolution;\n    cell[2] -= gridResolution;\n  }\n}\n\nfunction getBoundingBox(\n  positions: Readonly<NumericArray>,\n  size: number,\n  endIndex: number,\n  out: number[][]\n): number[][] {\n  let minX = Infinity;\n  let maxX = -Infinity;\n  let minY = Infinity;\n  let maxY = -Infinity;\n\n  for (let i = 0; i < endIndex; i += size) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    minX = x < minX ? x : minX;\n    maxX = x > maxX ? x : maxX;\n    minY = y < minY ? y : minY;\n    maxY = y > maxY ? y : maxY;\n  }\n\n  out[0][0] = minX;\n  out[0][1] = minY;\n  out[1][0] = maxX;\n  out[1][1] = maxY;\n  return out;\n}\n", "import {cutPolylineByGrid, cutPolygonByGrid} from './cut-by-grid';\nimport {getPointAtIndex, push} from './utils';\nimport type {Polygon} from './cut-by-grid';\nimport type {NumericArray} from '@math.gl/core';\n\n// https://en.wikipedia.org/wiki/Web_Mercator_projection\nconst DEFAULT_MAX_LATITUDE = 85.051129;\n\n/** https://user-images.githubusercontent.com/2059298/78465769-938b7a00-76ae-11ea-9b95-1f4c26425ab9.png */\nexport function cutPolylineByMercatorBounds(\n  positions: Readonly<NumericArray>,\n  options?: {\n    size?: number;\n    startIndex?: number;\n    endIndex?: number;\n    normalize?: boolean;\n  }\n): number[][] {\n  const {size = 2, startIndex = 0, endIndex = positions.length, normalize = true} = options || {};\n\n  // Remap longitudes so that each segment takes the shorter path\n  const newPositions = positions.slice(startIndex, endIndex);\n  wrapLongitudesForShortestPath(newPositions, size, 0, endIndex - startIndex);\n\n  const parts = cutPolylineByGrid(newPositions, {\n    size,\n    broken: true,\n    gridResolution: 360,\n    gridOffset: [-180, -180]\n  }) as number[][];\n\n  if (normalize) {\n    // Each part is guaranteed to be in a single copy of the world\n    // Map longitudes back to [-180, 180]\n    for (const part of parts) {\n      shiftLongitudesIntoRange(part, size);\n    }\n  }\n  return parts;\n}\n\n/** https://user-images.githubusercontent.com/2059298/78465770-94241080-76ae-11ea-809a-6a8534dac1d9.png */\nexport function cutPolygonByMercatorBounds(\n  positions: Readonly<NumericArray>,\n  holeIndices: Readonly<NumericArray> | null = null,\n  options?: {\n    size?: number;\n    normalize?: boolean;\n    maxLatitude?: number;\n    edgeTypes?: boolean;\n  }\n): Polygon[] {\n  const {size = 2, normalize = true, edgeTypes = false} = options || {};\n  holeIndices = holeIndices || [];\n  const newPositions: number[] = [];\n  const newHoleIndices: number[] = [];\n  let srcStartIndex = 0;\n  let targetIndex = 0;\n\n  for (let ringIndex = 0; ringIndex <= holeIndices.length; ringIndex++) {\n    // srcStartIndex/srcEndIndex define the ring in the original positions\n    const srcEndIndex = holeIndices[ringIndex] || positions.length;\n    // targetStartIndex/targetIndex define the ring in newPositions\n    const targetStartIndex = targetIndex;\n\n    // In case the ring contains a pole (e.g. Antarctica), we'll have to insert vertices\n    // The insertion point is defined by the vertex closest to the pole\n    // Split the the ring by the insertion point when copying to newPositions\n    const splitIndex = findSplitIndex(positions, size, srcStartIndex, srcEndIndex);\n    for (let i = splitIndex; i < srcEndIndex; i++) {\n      newPositions[targetIndex++] = positions[i];\n    }\n    for (let i = srcStartIndex; i < splitIndex; i++) {\n      newPositions[targetIndex++] = positions[i];\n    }\n\n    // Remap longitudes so that each segment takes the shorter path\n    wrapLongitudesForShortestPath(newPositions, size, targetStartIndex, targetIndex);\n\n    // Handle the case when the ring contains a pole\n    insertPoleVertices(newPositions, size, targetStartIndex, targetIndex, options?.maxLatitude);\n\n    srcStartIndex = srcEndIndex;\n    newHoleIndices[ringIndex] = targetIndex;\n  }\n  newHoleIndices.pop();\n\n  const parts = cutPolygonByGrid(newPositions, newHoleIndices, {\n    size,\n    gridResolution: 360,\n    gridOffset: [-180, -180],\n    edgeTypes\n  });\n\n  if (normalize) {\n    // Each part is guaranteed to be in a single copy of the world\n    // Map longitudes back to [-180, 180]\n    for (const part of parts) {\n      // @ts-expect-error (mutates readonly array) May mutate newPositions, which is created by us\n      shiftLongitudesIntoRange(part.positions, size);\n    }\n  }\n  return parts;\n}\n\n/* Helpers */\n\n// See comments for insertPoleVertices\nfunction findSplitIndex(\n  positions: Readonly<NumericArray>,\n  size: number,\n  startIndex: number,\n  endIndex: number\n): number {\n  let maxLat = -1;\n  let pointIndex = -1;\n  for (let i = startIndex + 1; i < endIndex; i += size) {\n    const lat = Math.abs(positions[i]);\n    if (lat > maxLat) {\n      maxLat = lat;\n      pointIndex = i - 1;\n    }\n  }\n  return pointIndex;\n}\n\n// https://user-images.githubusercontent.com/2059298/78857483-5987e400-79de-11ea-98fc-0631287a8431.png\n//\n// If the polygon contains a pole, to tesselate it correctly, we need to insert the edge\n// of map into the polygon. This requires adding two vertices that represent the pole, by\n// drawing a perpendicular line to the Mercator map edge from a selected vertex on the ring.\n//\n// We select the insertion position carefully so that the inserted line segments do not\n// intersect with the ring itself. This is ensured by findSplitIndex, which returns the\n// vertex closest to the pole.\nfunction insertPoleVertices(\n  positions: number[],\n  size: number,\n  startIndex: number,\n  endIndex: number,\n  maxLatitude: number = DEFAULT_MAX_LATITUDE\n): void {\n  // Check if the ring contains a pole\n  const firstLng = positions[startIndex];\n  const lastLng = positions[endIndex - size];\n  if (Math.abs(firstLng - lastLng) > 180) {\n    // The ring does not make a round trip\n    // Add the nearest pole to the vertices so that the polygon tesselates correctly\n    const p = getPointAtIndex(positions, 0, size, startIndex);\n    // Copy the first vertex to the world of the last vertex\n    p[0] += Math.round((lastLng - firstLng) / 360) * 360;\n    push(positions, p);\n    // Project the copied vertex to the edge of the map\n    p[1] = Math.sign(p[1]) * maxLatitude;\n    push(positions, p);\n    // Project the first vertex to the edge of the map\n    p[0] = firstLng;\n    push(positions, p);\n  }\n}\n\nfunction wrapLongitudesForShortestPath(\n  positions: NumericArray,\n  size: number,\n  startIndex: number,\n  endIndex: number\n): void {\n  let prevLng: number = positions[0];\n  let lng: number;\n  for (let i = startIndex; i < endIndex; i += size) {\n    lng = positions[i];\n    const delta = lng - prevLng;\n    if (delta > 180 || delta < -180) {\n      lng -= Math.round(delta / 360) * 360;\n    }\n    positions[i] = prevLng = lng;\n  }\n}\n\nfunction shiftLongitudesIntoRange(positions: NumericArray, size: number): void {\n  let refLng: number;\n  const pointCount = positions.length / size;\n\n  // Find a longitude that is not on the edge of a world\n  // Which we will use to determine which world copy it is\n  for (let i = 0; i < pointCount; i++) {\n    refLng = positions[i * size];\n    if ((refLng + 180) % 360 !== 0) {\n      break;\n    }\n  }\n\n  const delta = -Math.round(refLng / 360) * 360;\n  if (delta === 0) {\n    return;\n  }\n  for (let i = 0; i < pointCount; i++) {\n    positions[i * size] += delta;\n  }\n}\n", "import {log, BinaryAttribute} from '@deck.gl/core';\nimport {Geometry, uid} from '@luma.gl/core';\nimport {modifyPolygonWindingDirection, WINDING} from '@math.gl/polygon';\n\ntype ColumnGeometryProps = {\n  id?: string;\n  radius: number;\n  height?: number;\n  nradial?: number;\n  vertices?: number[];\n};\n\nexport default class ColumnGeometry extends Geometry {\n  constructor(props: ColumnGeometryProps) {\n    const {id = uid('column-geometry')} = props;\n    const {indices, attributes} = tesselateColumn(props);\n    super({\n      ...props,\n      id,\n      indices,\n      attributes\n    });\n  }\n}\n\n/* eslint-disable max-statements, complexity */\nfunction tesselateColumn(props: ColumnGeometryProps): {\n  indices: Uint16Array;\n  attributes: Record<string, BinaryAttribute>;\n} {\n  const {radius, height = 1, nradial = 10} = props;\n  let {vertices} = props;\n\n  if (vertices) {\n    log.assert(vertices.length >= nradial); // `vertices` must contain at least `diskResolution` points\n    vertices = vertices.flatMap(v => [v[0], v[1]]);\n    modifyPolygonWindingDirection(vertices, WINDING.COUNTER_CLOCKWISE);\n  }\n\n  const isExtruded = height > 0;\n  const vertsAroundEdge = nradial + 1; // loop\n  const numVertices = isExtruded\n    ? vertsAroundEdge * 3 + 1 // top, side top edge, side bottom edge, one additional degenerage vertex\n    : nradial; // top\n\n  const stepAngle = (Math.PI * 2) / nradial;\n\n  // Used for wireframe\n  const indices = new Uint16Array(isExtruded ? nradial * 3 * 2 : 0); // top loop, side vertical, bottom loop\n\n  const positions = new Float32Array(numVertices * 3);\n  const normals = new Float32Array(numVertices * 3);\n\n  let i = 0;\n\n  // side tesselation: 0, 1, 2, 3, 4, 5, ...\n  //\n  // 0 - 2 - 4  ... top\n  // | / | / |\n  // 1 - 3 - 5  ... bottom\n  //\n  if (isExtruded) {\n    for (let j = 0; j < vertsAroundEdge; j++) {\n      const a = j * stepAngle;\n      const vertexIndex = j % nradial;\n      const sin = Math.sin(a);\n      const cos = Math.cos(a);\n\n      for (let k = 0; k < 2; k++) {\n        positions[i + 0] = vertices ? vertices[vertexIndex * 2] : cos * radius;\n        positions[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin * radius;\n        positions[i + 2] = (1 / 2 - k) * height;\n\n        normals[i + 0] = vertices ? vertices[vertexIndex * 2] : cos;\n        normals[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin;\n\n        i += 3;\n      }\n    }\n\n    // duplicate the last vertex to create proper degenerate triangle.\n    positions[i + 0] = positions[i - 3];\n    positions[i + 1] = positions[i - 2];\n    positions[i + 2] = positions[i - 1];\n    i += 3;\n  }\n\n  // The column geometry is rendered as a triangle strip, so\n  // in order to render sides and top in one go we need to use degenerate triangles.\n  // Duplicate last vertex of side trinagles and first vertex of the top cap to preserve winding order.\n\n  // top tesselation: 0, -1, 1, -2, 2, -3, 3, ...\n  //\n  //    0 -- 1\n  //   /      \\\n  // -1        2\n  //  |        |\n  // -2        3\n  //   \\      /\n  //   -3 -- 4\n  //\n  for (let j = isExtruded ? 0 : 1; j < vertsAroundEdge; j++) {\n    const v = Math.floor(j / 2) * Math.sign(0.5 - (j % 2));\n    const a = v * stepAngle;\n    const vertexIndex = (v + nradial) % nradial;\n    const sin = Math.sin(a);\n    const cos = Math.cos(a);\n\n    positions[i + 0] = vertices ? vertices[vertexIndex * 2] : cos * radius;\n    positions[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin * radius;\n    positions[i + 2] = height / 2;\n\n    normals[i + 2] = 1;\n\n    i += 3;\n  }\n\n  if (isExtruded) {\n    let index = 0;\n    for (let j = 0; j < nradial; j++) {\n      // top loop\n      indices[index++] = j * 2 + 0;\n      indices[index++] = j * 2 + 2;\n      // side vertical\n      indices[index++] = j * 2 + 0;\n      indices[index++] = j * 2 + 1;\n      // bottom loop\n      indices[index++] = j * 2 + 1;\n      indices[index++] = j * 2 + 3;\n    }\n  }\n\n  return {\n    indices,\n    attributes: {\n      POSITION: {size: 3, value: positions},\n      NORMAL: {size: 3, value: normals}\n    }\n  };\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `#version 300 es\n\n#define SHADER_NAME column-layer-vertex-shader\n\nin vec3 positions;\nin vec3 normals;\n\nin vec3 instancePositions;\nin float instanceElevations;\nin vec3 instancePositions64Low;\nin vec4 instanceFillColors;\nin vec4 instanceLineColors;\nin float instanceStrokeWidths;\n\nin vec3 instancePickingColors;\n\n// Custom uniforms\nuniform float opacity;\nuniform float radius;\nuniform float angle;\nuniform vec2 offset;\nuniform bool extruded;\nuniform bool stroked;\nuniform bool isStroke;\nuniform float coverage;\nuniform float elevationScale;\nuniform float edgeDistance;\nuniform float widthScale;\nuniform float widthMinPixels;\nuniform float widthMaxPixels;\nuniform int radiusUnits;\nuniform int widthUnits;\n\n// Result\nout vec4 vColor;\n#ifdef FLAT_SHADING\nout vec4 position_commonspace;\n#endif\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n\n  vec4 color = isStroke ? instanceLineColors : instanceFillColors;\n  // rotate primitive position and normal\n  mat2 rotationMatrix = mat2(cos(angle), sin(angle), -sin(angle), cos(angle));\n\n  // calculate elevation, if 3d not enabled set to 0\n  // cylindar gemoetry height are between -1.0 to 1.0, transform it to between 0, 1\n  float elevation = 0.0;\n  // calculate stroke offset\n  float strokeOffsetRatio = 1.0;\n\n  if (extruded) {\n    elevation = instanceElevations * (positions.z + 1.0) / 2.0 * elevationScale;\n  } else if (stroked) {\n    float widthPixels = clamp(\n      project_size_to_pixel(instanceStrokeWidths * widthScale, widthUnits),\n      widthMinPixels, widthMaxPixels) / 2.0;\n    float halfOffset = project_pixel_size(widthPixels) / project_size(edgeDistance * coverage * radius);\n    if (isStroke) {\n      strokeOffsetRatio -= sign(positions.z) * halfOffset;\n    } else {\n      strokeOffsetRatio -= halfOffset;\n    }\n  }\n\n  // if alpha == 0.0 or z < 0.0, do not render element\n  float shouldRender = float(color.a > 0.0 && instanceElevations >= 0.0);\n  float dotRadius = radius * coverage * shouldRender;\n\n  geometry.pickingColor = instancePickingColors;\n\n  // project center of column\n  vec3 centroidPosition = vec3(instancePositions.xy, instancePositions.z + elevation);\n  vec3 centroidPosition64Low = instancePositions64Low;\n  vec2 offset = (rotationMatrix * positions.xy * strokeOffsetRatio + offset) * dotRadius;\n  if (radiusUnits == UNIT_METERS) {\n    offset = project_size(offset);\n  }\n  vec3 pos = vec3(offset, 0.);\n  DECKGL_FILTER_SIZE(pos, geometry);\n\n  gl_Position = project_position_to_clipspace(centroidPosition, centroidPosition64Low, pos, geometry.position);\n  geometry.normal = project_normal(vec3(rotationMatrix * normals.xy, normals.z));\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n\n  // Light calculations\n  if (extruded && !isStroke) {\n#ifdef FLAT_SHADING\n    position_commonspace = geometry.position;\n    vColor = vec4(color.rgb, color.a * opacity);\n#else\n    vec3 lightColor = lighting_getLightColor(color.rgb, project_uCameraPosition, geometry.position.xyz, geometry.normal);\n    vColor = vec4(lightColor, color.a * opacity);\n#endif\n  } else {\n    vColor = vec4(color.rgb, color.a * opacity);\n  }\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `#version 300 es\n#define SHADER_NAME column-layer-fragment-shader\n\nprecision highp float;\n\nuniform vec3 project_uCameraPosition;\nuniform bool extruded;\nuniform bool isStroke;\n\nout vec4 fragColor;\n\nin vec4 vColor;\n#ifdef FLAT_SHADING\nin vec4 position_commonspace;\n#endif\n\nvoid main(void) {\n  fragColor = vColor;\n#ifdef FLAT_SHADING\n  if (extruded && !isStroke && !picking_uActive) {\n    vec3 normal = normalize(cross(dFdx(position_commonspace.xyz), dFdy(position_commonspace.xyz)));\n    fragColor.rgb = lighting_getLightColor(vColor.rgb, project_uCameraPosition, position_commonspace.xyz, normal);\n  }\n#endif\n  DECKGL_FILTER_COLOR(fragColor, geometry);\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  project32,\n  gouraudLighting,\n  phongLighting,\n  picking,\n  UNIT,\n  LayerProps,\n  LayerDataSource,\n  UpdateParameters,\n  Unit,\n  AccessorFunction,\n  Position,\n  Accessor,\n  Color,\n  Material,\n  DefaultProps\n} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, isWebGL2, hasFeature, FEATURES} from '@luma.gl/core';\nimport ColumnGeometry from './column-geometry';\n\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<ColumnLayerProps> = {\n  diskResolution: {type: 'number', min: 4, value: 20},\n  vertices: null,\n  radius: {type: 'number', min: 0, value: 1000},\n  angle: {type: 'number', value: 0},\n  offset: {type: 'array', value: [0, 0]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  radiusUnits: 'meters',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n  getElevation: {type: 'accessor', value: 1000},\n  material: true,\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\n/** All properties supported by ColumnLayer. */\nexport type ColumnLayerProps<DataT = any> = _ColumnLayerProps<DataT> & LayerProps;\n\n/** Properties added by ColumnLayer. */\ntype _ColumnLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * The number of sides to render the disk as.\n   * @default 20\n   */\n  diskResolution?: number;\n\n  /**\n   * isk size in units specified by `radiusUnits`.\n   * @default 1000\n   */\n  radius?: number;\n\n  /**\n   * Disk rotation, counter-clockwise in degrees.\n   * @default 0\n   */\n  angle?: number;\n\n  /**\n   * Replace the default geometry (regular polygon that fits inside the unit circle) with a custom one.\n   * @default null\n   */\n  vertices: Position[] | null;\n\n  /**\n   * Disk offset from the position, relative to the radius.\n   * @default [0,0]\n   */\n  offset?: [number, number];\n\n  /**\n   * Radius multiplier, between 0 - 1\n   * @default 1\n   */\n  coverage?: number;\n\n  /**\n   * Column elevation multiplier.\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /**\n   * Whether to draw a filled column (solid fill).\n   * @default true\n   */\n  filled?: boolean;\n\n  /**\n   * Whether to draw an outline around the disks.\n   * @default false\n   */\n  stroked?: boolean;\n\n  /**\n   * Whether to extrude the columns. If set to `false`, all columns will be rendered as flat polygons.\n   * @default true\n   */\n  extruded?: boolean;\n\n  /**\n   * Whether to generate a line wireframe of the column.\n   * @default false\n   */\n  wireframe?: boolean;\n\n  /**\n   * If `true`, the vertical surfaces of the columns use [flat shading](https://en.wikipedia.org/wiki/Shading#Flat_vs._smooth_shading).\n   * @default false\n   */\n  flatShading?: boolean;\n\n  /**\n   * The units of the radius.\n   * @default 'meters'\n   */\n  radiusUnits?: Unit;\n\n  /**\n   * The units of the line width.\n   * @default 'meters'\n   */\n  lineWidthUnits?: Unit;\n\n  /**\n   * The line width multiplier that multiplied to all outlines.\n   * @default 1\n   */\n  lineWidthScale?: number;\n\n  /**\n   * The minimum outline width in pixels.\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n\n  /**\n   * The maximum outline width in pixels.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n\n  /**\n   * Method called to retrieve the position of each column.\n   * @default object => object.position\n   */\n  getPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * @deprecated Use getFilledColor and getLineColor instead\n   */\n  getColor?: Accessor<DataT, Color>;\n\n  /**\n   * Fill collor value or accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line color value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n\n  /**\n   * The elevation of each cell in meters.\n   * @default 1000\n   */\n  getElevation?: Accessor<DataT, number>;\n\n  /**\n   * The width of the outline of the column, in units specified by `lineWidthUnits`.\n   *\n   * @default 1\n   */\n  getLineWidth?: Accessor<DataT, number>;\n};\n\n/** Render extruded cylinders (tessellated regular polygons) at given coordinates. */\nexport default class ColumnLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_ColumnLayerProps<DataT>>\n> {\n  static layerName = 'ColumnLayer';\n  static defaultProps = defaultProps;\n\n  getShaders() {\n    const {gl} = this.context;\n    const transpileToGLSL100 = !isWebGL2(gl);\n    const defines: Record<string, any> = {};\n\n    const useDerivatives = this.props.flatShading && hasFeature(gl, FEATURES.GLSL_DERIVATIVES);\n    if (useDerivatives) {\n      defines.FLAT_SHADING = 1;\n    }\n    return super.getShaders({\n      vs,\n      fs,\n      defines,\n      transpileToGLSL100,\n      modules: [project32, useDerivatives ? phongLighting : gouraudLighting, picking]\n    });\n  }\n\n  /**\n   * DeckGL calls initializeState when GL context is available\n   * Essentially a deferred constructor\n   */\n  initializeState() {\n    const attributeManager = this.getAttributeManager()!;\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getLineWidth',\n        transition: true\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState(params: UpdateParameters<this>): void {\n    super.updateState(params);\n\n    const {props, oldProps, changeFlags} = params;\n    const regenerateModels =\n      changeFlags.extensionsChanged || props.flatShading !== oldProps.flatShading;\n\n    if (regenerateModels) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n\n    if (\n      regenerateModels ||\n      props.diskResolution !== oldProps.diskResolution ||\n      props.vertices !== oldProps.vertices ||\n      (props.extruded || props.stroked) !== (oldProps.extruded || oldProps.stroked)\n    ) {\n      this._updateGeometry(props);\n    }\n  }\n\n  getGeometry(diskResolution: number, vertices: number[] | undefined, hasThinkness: boolean) {\n    const geometry = new ColumnGeometry({\n      radius: 1,\n      height: hasThinkness ? 2 : 0,\n      vertices,\n      nradial: diskResolution\n    });\n\n    let meanVertexDistance = 0;\n    if (vertices) {\n      for (let i = 0; i < diskResolution; i++) {\n        const p = vertices[i];\n        const d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n        meanVertexDistance += d / diskResolution;\n      }\n    } else {\n      meanVertexDistance = 1;\n    }\n    this.setState({\n      edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n    });\n\n    return geometry;\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      isInstanced: true\n    });\n  }\n\n  protected _updateGeometry({diskResolution, vertices, extruded, stroked}) {\n    const geometry: any = this.getGeometry(diskResolution, vertices, extruded || stroked);\n\n    this.setState({\n      fillVertexCount: geometry.attributes.POSITION.value.length / 3,\n      wireframeVertexCount: geometry.indices.value.length\n    });\n\n    this.state.model.setProps({geometry});\n  }\n\n  draw({uniforms}) {\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      radiusUnits,\n      elevationScale,\n      extruded,\n      filled,\n      stroked,\n      wireframe,\n      offset,\n      coverage,\n      radius,\n      angle\n    } = this.props;\n    const {model, fillVertexCount, wireframeVertexCount, edgeDistance} = this.state;\n\n    model.setUniforms(uniforms).setUniforms({\n      radius,\n      angle: (angle / 180) * Math.PI,\n      offset,\n      extruded,\n      stroked,\n      coverage,\n      elevationScale,\n      edgeDistance,\n      radiusUnits: UNIT[radiusUnits],\n      widthUnits: UNIT[lineWidthUnits],\n      widthScale: lineWidthScale,\n      widthMinPixels: lineWidthMinPixels,\n      widthMaxPixels: lineWidthMaxPixels\n    });\n\n    // When drawing 3d: draw wireframe first so it doesn't get occluded by depth test\n    if (extruded && wireframe) {\n      model.setProps({isIndexed: true});\n      model\n        .setVertexCount(wireframeVertexCount)\n        .setDrawMode(GL.LINES)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n    if (filled) {\n      model.setProps({isIndexed: false});\n      model\n        .setVertexCount(fillVertexCount)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: false})\n        .draw();\n    }\n    // When drawing 2d: draw fill before stroke so that the outline is always on top\n    if (!extruded && stroked) {\n      model.setProps({isIndexed: false});\n      // The width of the stroke is achieved by flattening the side of the cylinder.\n      // Skip the last 1/3 of the vertices which is the top.\n      model\n        .setVertexCount((fillVertexCount * 2) / 3)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n  }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CubeGeometry} from '@luma.gl/core';\nimport {UNIT} from '@deck.gl/core';\nimport ColumnLayer, {ColumnLayerProps} from './column-layer';\n\nimport type {DefaultProps} from '@deck.gl/core';\n\nconst defaultProps: DefaultProps<GridCellLayerProps> = {\n  cellSize: {type: 'number', min: 0, value: 1000},\n  offset: {type: 'array', value: [1, 1]}\n};\n\n/** All properties supported by GridCellLayer. */\nexport type GridCellLayerProps<DataT = any> = _GridCellLayerProps & ColumnLayerProps<DataT>;\n\n/** Properties added by GridCellLayer. */\ntype _GridCellLayerProps = {\n  /**\n   * @default 1000\n   */\n  cellSize?: number;\n};\n\nexport default class GridCellLayer<DataT = any, ExtraPropsT extends {} = {}> extends ColumnLayer<\n  DataT,\n  ExtraPropsT & Required<_GridCellLayerProps>\n> {\n  static layerName = 'GridCellLayer';\n  static defaultProps = defaultProps;\n\n  getGeometry(diskResolution) {\n    return new CubeGeometry();\n  }\n\n  draw({uniforms}) {\n    const {elevationScale, extruded, offset, coverage, cellSize, angle, radiusUnits} = this.props;\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        radius: cellSize / 2,\n        radiusUnits: UNIT[radiusUnits],\n        angle,\n        offset,\n        extruded,\n        coverage,\n        elevationScale,\n        edgeDistance: 1,\n        isWireframe: false\n      })\n      .draw();\n  }\n}\n", "import {cutPolylineByGrid, cutPolylineByMercatorBounds} from '@math.gl/polygon';\n\nimport type {NumericArray} from '@math.gl/core';\nimport type {Position} from '@deck.gl/core';\n\nexport type NestedPathGeometry = Position[];\nexport type FlatPathGeometry = NumericArray;\nexport type PathGeometry = NestedPathGeometry | FlatPathGeometry;\nexport type NormalizedPathGeometry = FlatPathGeometry[] | FlatPathGeometry;\n\n/**\n * Flattens a nested path object\n * Cut the feature if needed (globe projection, wrap longitude, etc.)\n * Returns a flat array of path positions, or a list of flat arrays representing multiple paths\n */\nexport function normalizePath(\n  path: PathGeometry,\n  size: number,\n  gridResolution?: number,\n  wrapLongitude?: boolean\n): number[][] | NumericArray {\n  let flatPath: NumericArray;\n  if (Array.isArray(path[0])) {\n    const length = path.length * size;\n    flatPath = new Array(length);\n    for (let i = 0; i < path.length; i++) {\n      for (let j = 0; j < size; j++) {\n        flatPath[i * size + j] = path[i][j] || 0;\n      }\n    }\n  } else {\n    flatPath = path as NumericArray;\n  }\n  if (gridResolution) {\n    return cutPolylineByGrid(flatPath, {size, gridResolution});\n  }\n  if (wrapLongitude) {\n    return cutPolylineByMercatorBounds(flatPath, {size});\n  }\n  return flatPath;\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Tesselator} from '@deck.gl/core';\nimport {normalizePath} from './path';\n\nimport type {TypedArray} from '@math.gl/core';\nimport type {PathGeometry, FlatPathGeometry, NormalizedPathGeometry} from './path';\n\nconst START_CAP = 1;\nconst END_CAP = 2;\nconst INVALID = 4;\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PathTesselator extends Tesselator<\n  PathGeometry,\n  NormalizedPathGeometry,\n  {\n    fp64?: boolean;\n    resolution?: number;\n    wrapLongitude?: boolean;\n    loop?: boolean;\n  }\n> {\n  constructor(opts) {\n    super({\n      ...opts,\n      attributes: {\n        // Padding covers shaderAttributes for last segment in largest case fp64\n        // additional vertex + hi & low parts, 3 * 6\n        positions: {\n          size: 3,\n          padding: 18,\n          initialize: true,\n          type: opts.fp64 ? Float64Array : Float32Array\n        },\n        segmentTypes: {size: 1, type: Uint8ClampedArray}\n      }\n    });\n  }\n\n  /** Get packed attribute by name */\n  get(attributeName: string): TypedArray | null {\n    return this.attributes[attributeName];\n  }\n\n  /* Implement base Tesselator interface */\n  protected getGeometryFromBuffer(buffer) {\n    if (this.normalize) {\n      return super.getGeometryFromBuffer(buffer);\n    }\n    // we don't need to read the positions if no normalization\n    return null;\n  }\n\n  /* Implement base Tesselator interface */\n  protected normalizeGeometry(path: PathGeometry): number[][] | PathGeometry {\n    if (this.normalize) {\n      return normalizePath(path, this.positionSize, this.opts.resolution, this.opts.wrapLongitude);\n    }\n    return path;\n  }\n\n  /* Implement base Tesselator interface */\n  protected getGeometrySize(path: NormalizedPathGeometry): number {\n    if (isCut(path)) {\n      let size = 0;\n      for (const subPath of path) {\n        size += this.getGeometrySize(subPath);\n      }\n      return size;\n    }\n    const numPoints = this.getPathLength(path);\n    if (numPoints < 2) {\n      // invalid path\n      return 0;\n    }\n    if (this.isClosed(path)) {\n      // minimum 3 vertices\n      return numPoints < 3 ? 0 : numPoints + 2;\n    }\n    return numPoints;\n  }\n\n  /* Implement base Tesselator interface */\n  protected updateGeometryAttributes(\n    path: NormalizedPathGeometry | null,\n    context: {\n      vertexStart: number;\n      geometrySize: number;\n    }\n  ): void {\n    if (context.geometrySize === 0) {\n      return;\n    }\n    if (path && isCut(path)) {\n      for (const subPath of path) {\n        const geometrySize = this.getGeometrySize(subPath);\n        context.geometrySize = geometrySize;\n        this.updateGeometryAttributes(subPath, context);\n        context.vertexStart += geometrySize;\n      }\n    } else {\n      this._updateSegmentTypes(path, context);\n      this._updatePositions(path, context);\n    }\n  }\n\n  private _updateSegmentTypes(\n    path: FlatPathGeometry | null,\n    context: {\n      vertexStart: number;\n      geometrySize: number;\n    }\n  ) {\n    const segmentTypes = this.attributes.segmentTypes as TypedArray;\n    const isPathClosed = path ? this.isClosed(path) : false;\n    const {vertexStart, geometrySize} = context;\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    segmentTypes.fill(0, vertexStart, vertexStart + geometrySize);\n    if (isPathClosed) {\n      segmentTypes[vertexStart] = INVALID;\n      segmentTypes[vertexStart + geometrySize - 2] = INVALID;\n    } else {\n      segmentTypes[vertexStart] += START_CAP;\n      segmentTypes[vertexStart + geometrySize - 2] += END_CAP;\n    }\n    segmentTypes[vertexStart + geometrySize - 1] = INVALID;\n  }\n\n  private _updatePositions(\n    path: FlatPathGeometry | null,\n    context: {\n      vertexStart: number;\n      geometrySize: number;\n    }\n  ) {\n    const {positions} = this.attributes;\n    if (!positions || !path) {\n      return;\n    }\n    const {vertexStart, geometrySize} = context;\n    const p = new Array(3);\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    for (let i = vertexStart, ptIndex = 0; ptIndex < geometrySize; i++, ptIndex++) {\n      this.getPointOnPath(path, ptIndex, p);\n      positions[i * 3] = p[0];\n      positions[i * 3 + 1] = p[1];\n      positions[i * 3 + 2] = p[2];\n    }\n  }\n\n  // Utilities\n  /** Returns the number of points in the path */\n  private getPathLength(path: FlatPathGeometry): number {\n    return path.length / this.positionSize;\n  }\n\n  /** Returns a point on the path at the specified index */\n  private getPointOnPath(path: FlatPathGeometry, index: number, target: number[] = []): number[] {\n    const {positionSize} = this;\n    if (index * positionSize >= path.length) {\n      // loop\n      index += 1 - path.length / positionSize;\n    }\n    const i = index * positionSize;\n    target[0] = path[i];\n    target[1] = path[i + 1];\n    target[2] = (positionSize === 3 && path[i + 2]) || 0;\n    return target;\n  }\n\n  // Returns true if the first and last points are identical\n  private isClosed(path: FlatPathGeometry): boolean {\n    if (!this.normalize) {\n      return Boolean(this.opts.loop);\n    }\n    const {positionSize} = this;\n    const lastPointIndex = path.length - positionSize;\n    return (\n      path[0] === path[lastPointIndex] &&\n      path[1] === path[lastPointIndex + 1] &&\n      (positionSize === 2 || path[2] === path[lastPointIndex + 2])\n    );\n  }\n}\n\nfunction isCut(path: NormalizedPathGeometry): path is FlatPathGeometry[] {\n  return Array.isArray(path[0]);\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME path-layer-vertex-shader\n\nattribute vec2 positions;\n\nattribute float instanceTypes;\nattribute vec3 instanceStartPositions;\nattribute vec3 instanceEndPositions;\nattribute vec3 instanceLeftPositions;\nattribute vec3 instanceRightPositions;\nattribute vec3 instanceLeftPositions64Low;\nattribute vec3 instanceStartPositions64Low;\nattribute vec3 instanceEndPositions64Low;\nattribute vec3 instanceRightPositions64Low;\nattribute float instanceStrokeWidths;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\n\nuniform float widthScale;\nuniform float widthMinPixels;\nuniform float widthMaxPixels;\nuniform float jointType;\nuniform float capType;\nuniform float miterLimit;\nuniform bool billboard;\nuniform int widthUnits;\n\nuniform float opacity;\n\nvarying vec4 vColor;\nvarying vec2 vCornerOffset;\nvarying float vMiterLength;\nvarying vec2 vPathPosition;\nvarying float vPathLength;\nvarying float vJointType;\n\nconst float EPSILON = 0.001;\nconst vec3 ZERO_OFFSET = vec3(0.0);\n\nfloat flipIfTrue(bool flag) {\n  return -(float(flag) * 2. - 1.);\n}\n\n// calculate line join positions\nvec3 getLineJoinOffset(\n  vec3 prevPoint, vec3 currPoint, vec3 nextPoint,\n  vec2 width\n) {\n  bool isEnd = positions.x > 0.0;\n  // side of the segment - -1: left, 0: center, 1: right\n  float sideOfPath = positions.y;\n  float isJoint = float(sideOfPath == 0.0);\n\n  vec3 deltaA3 = (currPoint - prevPoint);\n  vec3 deltaB3 = (nextPoint - currPoint);\n\n  mat3 rotationMatrix;\n  bool needsRotation = !billboard && project_needs_rotation(currPoint, rotationMatrix);\n  if (needsRotation) {\n    deltaA3 = deltaA3 * rotationMatrix;\n    deltaB3 = deltaB3 * rotationMatrix;\n  }\n  vec2 deltaA = deltaA3.xy / width;\n  vec2 deltaB = deltaB3.xy / width;\n\n  float lenA = length(deltaA);\n  float lenB = length(deltaB);\n\n  vec2 dirA = lenA > 0. ? normalize(deltaA) : vec2(0.0, 0.0);\n  vec2 dirB = lenB > 0. ? normalize(deltaB) : vec2(0.0, 0.0);\n\n  vec2 perpA = vec2(-dirA.y, dirA.x);\n  vec2 perpB = vec2(-dirB.y, dirB.x);\n\n  // tangent of the corner\n  vec2 tangent = dirA + dirB;\n  tangent = length(tangent) > 0. ? normalize(tangent) : perpA;\n  // direction of the corner\n  vec2 miterVec = vec2(-tangent.y, tangent.x);\n  // direction of the segment\n  vec2 dir = isEnd ? dirA : dirB;\n  // direction of the extrusion\n  vec2 perp = isEnd ? perpA : perpB;\n  // length of the segment\n  float L = isEnd ? lenA : lenB;\n\n  // A = angle of the corner\n  float sinHalfA = abs(dot(miterVec, perp));\n  float cosHalfA = abs(dot(dirA, miterVec));\n\n  // -1: right, 1: left\n  float turnDirection = flipIfTrue(dirA.x * dirB.y >= dirA.y * dirB.x);\n\n  // relative position to the corner:\n  // -1: inside (smaller side of the angle)\n  // 0: center\n  // 1: outside (bigger side of the angle)\n  float cornerPosition = sideOfPath * turnDirection;\n\n  float miterSize = 1.0 / max(sinHalfA, EPSILON);\n  // trim if inside corner extends further than the line segment\n  miterSize = mix(\n    min(miterSize, max(lenA, lenB) / max(cosHalfA, EPSILON)),\n    miterSize,\n    step(0.0, cornerPosition)\n  );\n\n  vec2 offsetVec = mix(miterVec * miterSize, perp, step(0.5, cornerPosition))\n    * (sideOfPath + isJoint * turnDirection);\n\n  // special treatment for start cap and end cap\n  bool isStartCap = lenA == 0.0 || (!isEnd && (instanceTypes == 1.0 || instanceTypes == 3.0));\n  bool isEndCap = lenB == 0.0 || (isEnd && (instanceTypes == 2.0 || instanceTypes == 3.0));\n  bool isCap = isStartCap || isEndCap;\n\n  // extend out a triangle to envelope the round cap\n  if (isCap) {\n    offsetVec = mix(perp * sideOfPath, dir * capType * 4.0 * flipIfTrue(isStartCap), isJoint);\n    vJointType = capType;\n  } else {\n    vJointType = jointType;\n  }\n\n  // Generate variables for fragment shader\n  vPathLength = L;\n  vCornerOffset = offsetVec;\n  vMiterLength = dot(vCornerOffset, miterVec * turnDirection);\n  vMiterLength = isCap ? isJoint : vMiterLength;\n\n  vec2 offsetFromStartOfPath = vCornerOffset + deltaA * float(isEnd);\n  vPathPosition = vec2(\n    dot(offsetFromStartOfPath, perp),\n    dot(offsetFromStartOfPath, dir)\n  );\n  geometry.uv = vPathPosition;\n\n  float isValid = step(instanceTypes, 3.5);\n  vec3 offset = vec3(offsetVec * width * isValid, 0.0);\n\n  if (needsRotation) {\n    offset = rotationMatrix * offset;\n  }\n  return offset;\n}\n\n// In clipspace extrusion, if a line extends behind the camera, clip it to avoid visual artifacts\nvoid clipLine(inout vec4 position, vec4 refPosition) {\n  if (position.w < EPSILON) {\n    float r = (EPSILON - refPosition.w) / (position.w - refPosition.w);\n    position = refPosition + (position - refPosition) * r;\n  }\n}\n\nvoid main() {\n  geometry.pickingColor = instancePickingColors;\n\n  vColor = vec4(instanceColors.rgb, instanceColors.a * opacity);\n\n  float isEnd = positions.x;\n\n  vec3 prevPosition = mix(instanceLeftPositions, instanceStartPositions, isEnd);\n  vec3 prevPosition64Low = mix(instanceLeftPositions64Low, instanceStartPositions64Low, isEnd);\n\n  vec3 currPosition = mix(instanceStartPositions, instanceEndPositions, isEnd);\n  vec3 currPosition64Low = mix(instanceStartPositions64Low, instanceEndPositions64Low, isEnd);\n\n  vec3 nextPosition = mix(instanceEndPositions, instanceRightPositions, isEnd);\n  vec3 nextPosition64Low = mix(instanceEndPositions64Low, instanceRightPositions64Low, isEnd);\n\n  geometry.worldPosition = currPosition;\n  vec2 widthPixels = vec2(clamp(\n    project_size_to_pixel(instanceStrokeWidths * widthScale, widthUnits),\n    widthMinPixels, widthMaxPixels) / 2.0);\n  vec3 width;\n\n  if (billboard) {\n    // Extrude in clipspace\n    vec4 prevPositionScreen = project_position_to_clipspace(prevPosition, prevPosition64Low, ZERO_OFFSET);\n    vec4 currPositionScreen = project_position_to_clipspace(currPosition, currPosition64Low, ZERO_OFFSET, geometry.position);\n    vec4 nextPositionScreen = project_position_to_clipspace(nextPosition, nextPosition64Low, ZERO_OFFSET);\n\n    clipLine(prevPositionScreen, currPositionScreen);\n    clipLine(nextPositionScreen, currPositionScreen);\n    clipLine(currPositionScreen, mix(nextPositionScreen, prevPositionScreen, isEnd));\n\n    width = vec3(widthPixels, 0.0);\n    DECKGL_FILTER_SIZE(width, geometry);\n\n    vec3 offset = getLineJoinOffset(\n      prevPositionScreen.xyz / prevPositionScreen.w,\n      currPositionScreen.xyz / currPositionScreen.w,\n      nextPositionScreen.xyz / nextPositionScreen.w,\n      project_pixel_size_to_clipspace(width.xy)\n    );\n\n    DECKGL_FILTER_GL_POSITION(currPositionScreen, geometry);\n    gl_Position = vec4(currPositionScreen.xyz + offset * currPositionScreen.w, currPositionScreen.w);\n  } else {\n    // Extrude in commonspace\n    prevPosition = project_position(prevPosition, prevPosition64Low);\n    currPosition = project_position(currPosition, currPosition64Low);\n    nextPosition = project_position(nextPosition, nextPosition64Low);\n\n    width = vec3(project_pixel_size(widthPixels), 0.0);\n    DECKGL_FILTER_SIZE(width, geometry);\n\n    vec3 offset = getLineJoinOffset(prevPosition, currPosition, nextPosition, width.xy);\n    geometry.position = vec4(currPosition + offset, 1.0);\n    gl_Position = project_common_position_to_clipspace(geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  }\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME path-layer-fragment-shader\n\nprecision highp float;\n\nuniform float miterLimit;\n\nvarying vec4 vColor;\nvarying vec2 vCornerOffset;\nvarying float vMiterLength;\n/*\n * vPathPosition represents the relative coordinates of the current fragment on the path segment.\n * vPathPosition.x - position along the width of the path, between [-1, 1]. 0 is the center line.\n * vPathPosition.y - position along the length of the path, between [0, L / width].\n */\nvarying vec2 vPathPosition;\nvarying float vPathLength;\nvarying float vJointType;\n\nvoid main(void) {\n  geometry.uv = vPathPosition;\n\n  if (vPathPosition.y < 0.0 || vPathPosition.y > vPathLength) {\n    // if joint is rounded, test distance from the corner\n    if (vJointType > 0.5 && length(vCornerOffset) > 1.0) {\n      discard;\n    }\n    // trim miter\n    if (vJointType < 0.5 && vMiterLength > miterLimit + 1.0) {\n      discard;\n    }\n  }\n  gl_FragColor = vColor;\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\nimport PathTesselator from './path-tesselator';\n\nimport vs from './path-layer-vertex.glsl';\nimport fs from './path-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  Color,\n  Accessor,\n  AccessorFunction,\n  Unit,\n  UpdateParameters,\n  GetPickingInfoParams,\n  PickingInfo,\n  DefaultProps\n} from '@deck.gl/core';\nimport type {PathGeometry} from './path';\n\ntype _PathLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /** The units of the line width, one of `'meters'`, `'common'`, and `'pixels'`\n   * @default 'meters'\n   */\n  widthUnits?: Unit;\n  /**\n   * Path width multiplier.\n   * @default 1\n   */\n  widthScale?: number;\n  /**\n   * The minimum path width in pixels. This prop can be used to prevent the path from getting too thin when zoomed out.\n   * @default 0\n   */\n  widthMinPixels?: number;\n  /**\n   * The maximum path width in pixels. This prop can be used to prevent the path from getting too thick when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  widthMaxPixels?: number;\n  /**\n   * Type of joint. If `true`, draw round joints. Otherwise draw miter joints.\n   * @default false\n   */\n  jointRounded?: boolean;\n  /**\n   * Type of caps. If `true`, draw round caps. Otherwise draw square caps.\n   * @default false\n   */\n  capRounded?: boolean;\n  /**\n   * The maximum extent of a joint in ratio to the stroke width. Only works if `jointRounded` is `false`.\n   * @default 4\n   */\n  miterLimit?: number;\n  /**\n   * If `true`, extrude the path in screen space (width always faces the camera).\n   * If `false`, the width always faces up (z).\n   * @default false\n   */\n  billboard?: boolean;\n  /**\n   * (Experimental) If `'loop'` or `'open'`, will skip normalizing the coordinates returned by `getPath` and instead assume all paths are to be loops or open paths.\n   * When normalization is disabled, paths must be specified in the format of flat array. Open paths must contain at least 2 vertices and closed paths must contain at least 3 vertices.\n   * @default null\n   */\n  _pathType?: null | 'loop' | 'open';\n  /**\n   * Path geometry accessor.\n   */\n  getPath?: AccessorFunction<DataT, PathGeometry>;\n  /**\n   * Path color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color | Color[]>;\n  /**\n   * Path width accessor.\n   * @default 1\n   */\n  getWidth?: Accessor<DataT, number | number[]>;\n  /**\n   * @deprecated Use `jointRounded` and `capRounded` instead\n   */\n  rounded?: boolean;\n};\n\nexport type PathLayerProps<DataT = any> = _PathLayerProps<DataT> & LayerProps;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<PathLayerProps> = {\n  widthUnits: 'meters',\n  widthScale: {type: 'number', min: 0, value: 1},\n  widthMinPixels: {type: 'number', min: 0, value: 0},\n  widthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n  jointRounded: false,\n  capRounded: false,\n  miterLimit: {type: 'number', min: 0, value: 4},\n  billboard: false,\n  _pathType: null,\n\n  getPath: {type: 'accessor', value: object => object.path},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n\n  // deprecated props\n  rounded: {deprecatedFor: ['jointRounded', 'capRounded']}\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\n/** Render lists of coordinate points as extruded polylines with mitering. */\nexport default class PathLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_PathLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'PathLayer';\n\n  state!: {\n    model?: Model;\n    pathTesselator: PathTesselator;\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]}); // 'project' module added by default.\n  }\n\n  get wrapLongitude(): boolean {\n    return false;\n  }\n\n  initializeState() {\n    const noAlloc = true;\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager!.addInstanced({\n      positions: {\n        size: 3,\n        // Start filling buffer from 1 vertex in\n        vertexOffset: 1,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPath',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          instanceLeftPositions: {\n            vertexOffset: 0\n          },\n          instanceStartPositions: {\n            vertexOffset: 1\n          },\n          instanceEndPositions: {\n            vertexOffset: 2\n          },\n          instanceRightPositions: {\n            vertexOffset: 3\n          }\n        }\n      },\n      instanceTypes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculateSegmentTypes,\n        noAlloc\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getWidth',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: 1\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        accessor: 'getColor',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: DEFAULT_COLOR\n      },\n      instancePickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value)\n      }\n    });\n    /* eslint-enable max-len */\n\n    this.setState({\n      pathTesselator: new PathTesselator({\n        fp64: this.use64bitPositions()\n      })\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {props, changeFlags} = params;\n\n    const attributeManager = this.getAttributeManager();\n\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath));\n\n    if (geometryChanged) {\n      const {pathTesselator} = this.state;\n      const buffers = (props.data as any).attributes || {};\n\n      pathTesselator.updateGeometry({\n        data: props.data,\n        geometryBuffer: buffers.getPath,\n        buffers,\n        normalize: !props._pathType,\n        loop: props._pathType === 'loop',\n        getGeometry: props.getPath,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        dataChanged: changeFlags.dataChanged\n      });\n      this.setState({\n        numInstances: pathTesselator.instanceCount,\n        startIndices: pathTesselator.vertexStarts\n      });\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        attributeManager!.invalidateAll();\n      }\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager!.invalidateAll();\n    }\n  }\n\n  getPickingInfo(params: GetPickingInfoParams): PickingInfo {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      info.object = (data as any[]).find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  /** Override base Layer method */\n  disablePickingIndex(objectIndex: number) {\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      for (let i = 0; i < (data as any[]).length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      super.disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      jointRounded,\n      capRounded,\n      billboard,\n      miterLimit,\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels\n    } = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        jointType: Number(jointRounded),\n        capType: Number(capRounded),\n        billboard,\n        widthUnits: UNIT[widthUnits],\n        widthScale,\n        miterLimit,\n        widthMinPixels,\n        widthMaxPixels\n      })\n      .draw();\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    /*\n     *       _\n     *        \"-_ 1                   3                       5\n     *     _     \"o---------------------o-------------------_-o\n     *       -   / \"\"--..__              '.             _.-' /\n     *   _     \"@- - - - - \"\"--..__- - - - x - - - -_.@'    /\n     *    \"-_  /                   \"\"--..__ '.  _,-` :     /\n     *       \"o----------------------------\"\"-o'    :     /\n     *      0,2                            4 / '.  :     /\n     *                                      /   '.:     /\n     *                                     /     :'.   /\n     *                                    /     :  ', /\n     *                                   /     :     o\n     */\n\n    // prettier-ignore\n    const SEGMENT_INDICES = [\n      // start corner\n      0, 1, 2,\n      // body\n      1, 4, 2,\n      1, 3, 4,\n      // end corner\n      3, 5, 4\n    ];\n\n    // [0] position on segment - 0: start, 1: end\n    // [1] side of path - -1: left, 0: center (joint), 1: right\n    // prettier-ignore\n    const SEGMENT_POSITIONS = [\n      // bevel start corner\n      0, 0,\n      // start inner corner\n      0, -1,\n      // start outer corner\n      0, 1,\n      // end inner corner\n      1, -1,\n      // end outer corner\n      1, 1,\n      // bevel end corner\n      1, 0\n    ];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLES,\n        attributes: {\n          indices: new Uint16Array(SEGMENT_INDICES),\n          positions: {value: new Float32Array(SEGMENT_POSITIONS), size: 2}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  protected calculatePositions(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('positions');\n  }\n\n  protected calculateSegmentTypes(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('segmentTypes');\n  }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable max-params */\nimport earcut from 'earcut';\nimport {modifyPolygonWindingDirection, WINDING} from '@math.gl/polygon';\n\nimport type {Position} from '@deck.gl/core';\nimport type {NumericArray} from '@math.gl/core';\n\nconst OUTER_POLYGON_WINDING = WINDING.CLOCKWISE;\nconst HOLE_POLYGON_WINDING = WINDING.COUNTER_CLOCKWISE;\n\ntype WindingOptions = {\n  start?: number;\n  end?: number;\n  size?: number;\n  isClosed?: boolean;\n};\n\n/** A scratch object for sending winding options */\nconst windingOptions: WindingOptions = {\n  isClosed: true\n};\n\n// 4 data formats are supported:\n\n/** Simple Polygon: an array of points */\nexport type NestedSimplePolygonGeometry = Position[];\n/** Complex Polygon: an array of array of points (array of rings)\n * with the first ring representing the outer hull and other rings representing holes\n */\nexport type NestedComplexPolygonGeometry = Position[][];\n/** An array of numbers (flattened \"simple polygon\") */\nexport type FlatSimplePolygonGeometry = NumericArray;\n/** Flattened \"complex polygon\" */\nexport type FlatComplexPolygonGeometry = {positions: NumericArray; holeIndices: NumericArray};\n\nexport type PolygonGeometry =\n  | NestedSimplePolygonGeometry\n  | NestedComplexPolygonGeometry\n  | FlatSimplePolygonGeometry\n  | FlatComplexPolygonGeometry;\n\nexport type NormalizedPolygonGeometry = FlatSimplePolygonGeometry | FlatComplexPolygonGeometry;\n\n/**\n * Ensure a polygon is valid format\n */\nfunction validate(polygon: PolygonGeometry): void {\n  polygon = (polygon && (polygon as FlatComplexPolygonGeometry).positions) || polygon;\n  if (!Array.isArray(polygon) && !ArrayBuffer.isView(polygon)) {\n    throw new Error('invalid polygon');\n  }\n}\n\n/** Get the positions from a normalized polygon */\nexport function getPositions(polygon: NormalizedPolygonGeometry): NumericArray {\n  return 'positions' in polygon ? polygon.positions : polygon;\n}\n\n/** Get the hole indices from a normalized polygon */\nexport function getHoleIndices(polygon: NormalizedPolygonGeometry): NumericArray | null {\n  return 'holeIndices' in polygon ? polygon.holeIndices : null;\n}\n\n/**\n * Check if a polygon is nested or flat\n * Returns true if the polygon is a flat polygon (i.e. not an array of polygons)\n */\nfunction isNested(\n  polygon: PolygonGeometry\n): polygon is NestedSimplePolygonGeometry | NestedComplexPolygonGeometry {\n  return Array.isArray(polygon[0]);\n}\n\n/**\n * Check if a polygon is simple or complex\n * Returns true if the polygon is a simple polygon (i.e. not an array of polygons)\n */\nfunction isSimple(\n  polygon: NestedSimplePolygonGeometry | NestedComplexPolygonGeometry\n): polygon is NestedSimplePolygonGeometry {\n  return polygon.length >= 1 && polygon[0].length >= 2 && Number.isFinite(polygon[0][0]);\n}\n\n/**\n * Check if a simple polygon is a closed ring\n * Returns true if the simple polygon is a closed ring\n */\nfunction isNestedRingClosed(simplePolygon: NestedSimplePolygonGeometry): boolean {\n  // check if first and last vertex are the same\n  const p0 = simplePolygon[0];\n  const p1 = simplePolygon[simplePolygon.length - 1];\n\n  return p0[0] === p1[0] && p0[1] === p1[1] && p0[2] === p1[2];\n}\n\n/**\n * Check if a simple flat array is a closed ring\n * Returns true if the simple flat array is a closed ring\n */\nfunction isFlatRingClosed(\n  positions: FlatSimplePolygonGeometry,\n  /** size of a position, 2 (xy) or 3 (xyz) */\n  size: number,\n  /** start index of the path in the positions array */\n  startIndex: number,\n  /** end index of the path in the positions array */\n  endIndex: number\n): boolean {\n  for (let i = 0; i < size; i++) {\n    if (positions[startIndex + i] !== positions[endIndex - size + i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Copy a simple polygon coordinates into a flat array, closes the ring if needed.\n * Returns the index of the write head in the destination\n */\nfunction copyNestedRing(\n  /** destination */\n  target: NumericArray,\n  /** index in the destination to start copying into */\n  targetStartIndex: number,\n  /** the source polygon */\n  simplePolygon: NestedSimplePolygonGeometry,\n  /** size of a position, 2 (xy) or 3 (xyz) */\n  size: number,\n  /** modify polygon to be of the specified winding direction */\n  windingDirection: number\n): number {\n  let targetIndex = targetStartIndex;\n  const len = simplePolygon.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[i][j] || 0;\n    }\n  }\n\n  if (!isNestedRingClosed(simplePolygon)) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[0][j] || 0;\n    }\n  }\n\n  windingOptions.start = targetStartIndex;\n  windingOptions.end = targetIndex;\n  windingOptions.size = size;\n  modifyPolygonWindingDirection(target, windingDirection, windingOptions);\n\n  return targetIndex;\n}\n\n/**\n * Copy a simple flat array into another flat array, closes the ring if needed.\n * Returns the index of the write head in the destination\n */\nfunction copyFlatRing(\n  /** destination */\n  target: NumericArray,\n  /** index in the destination to start copying into */\n  targetStartIndex: number,\n  /** the source polygon */\n  positions: FlatSimplePolygonGeometry,\n  /** size of a position, 2 (xy) or 3 (xyz) */\n  size: number,\n  /** start index of the path in the positions array */\n  srcStartIndex: number = 0,\n  /** end index of the path in the positions array */\n  srcEndIndex: number,\n  windingDirection: number\n): number {\n  srcEndIndex = srcEndIndex || positions.length;\n  const srcLength = srcEndIndex - srcStartIndex;\n  if (srcLength <= 0) {\n    return targetStartIndex;\n  }\n  let targetIndex = targetStartIndex;\n\n  for (let i = 0; i < srcLength; i++) {\n    target[targetIndex++] = positions[srcStartIndex + i];\n  }\n\n  if (!isFlatRingClosed(positions, size, srcStartIndex, srcEndIndex)) {\n    for (let i = 0; i < size; i++) {\n      target[targetIndex++] = positions[srcStartIndex + i];\n    }\n  }\n\n  windingOptions.start = targetStartIndex;\n  windingOptions.end = targetIndex;\n  windingOptions.size = size;\n  modifyPolygonWindingDirection(target, windingDirection, windingOptions);\n\n  return targetIndex;\n}\n\n/**\n * Normalize any polygon representation into the \"complex flat\" format\n */\n/* eslint-disable max-statements */\nexport function normalize(\n  polygon: PolygonGeometry,\n  positionSize: number\n): NormalizedPolygonGeometry {\n  validate(polygon);\n\n  const positions: number[] = [];\n  const holeIndices: number[] = [];\n\n  if ('positions' in polygon) {\n    // complex flat\n    const {positions: srcPositions, holeIndices: srcHoleIndices} = polygon;\n\n    if (srcHoleIndices) {\n      let targetIndex = 0;\n      // split the positions array into `holeIndices.length + 1` rings\n      // holeIndices[-1] falls back to 0\n      // holeIndices[holeIndices.length] falls back to positions.length\n      for (let i = 0; i <= srcHoleIndices.length; i++) {\n        targetIndex = copyFlatRing(\n          positions,\n          targetIndex,\n          srcPositions,\n          positionSize,\n          srcHoleIndices[i - 1],\n          srcHoleIndices[i],\n          i === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING\n        );\n        holeIndices.push(targetIndex);\n      }\n      // The last one is not a starting index of a hole, remove\n      holeIndices.pop();\n\n      return {positions, holeIndices};\n    }\n    polygon = srcPositions;\n  }\n  if (!isNested(polygon)) {\n    // simple flat\n    copyFlatRing(positions, 0, polygon, positionSize, 0, positions.length, OUTER_POLYGON_WINDING);\n    return positions;\n  }\n  if (!isSimple(polygon)) {\n    // complex polygon\n    let targetIndex = 0;\n\n    for (const [polygonIndex, simplePolygon] of polygon.entries()) {\n      targetIndex = copyNestedRing(\n        positions,\n        targetIndex,\n        simplePolygon,\n        positionSize,\n        polygonIndex === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING\n      );\n      holeIndices.push(targetIndex);\n    }\n    // The last one is not a starting index of a hole, remove\n    holeIndices.pop();\n    // last index points to the end of the array, remove it\n    return {positions, holeIndices};\n  }\n  // simple polygon\n  copyNestedRing(positions, 0, polygon, positionSize, OUTER_POLYGON_WINDING);\n  return positions;\n}\n/* eslint-enable max-statements */\n\n/*\n * Calculate the area of a single plane of the polygon\n */\nfunction getPlaneArea(positions: NumericArray, xIndex: number, yIndex: number): number {\n  const numVerts = positions.length / 3;\n  let area = 0;\n  for (let i = 0; i < numVerts; i++) {\n    const j = (i + 1) % numVerts;\n    area += positions[i * 3 + xIndex] * positions[j * 3 + yIndex];\n    area -= positions[j * 3 + xIndex] * positions[i * 3 + yIndex];\n  }\n  return Math.abs(area / 2);\n}\n\nfunction permutePositions(positions: NumericArray, xIndex: number, yIndex: number, zIndex: number) {\n  const numVerts = positions.length / 3;\n  for (let i = 0; i < numVerts; i++) {\n    const o = i * 3;\n\n    const x = positions[o + 0];\n    const y = positions[o + 1];\n    const z = positions[o + 2];\n\n    positions[o + xIndex] = x;\n    positions[o + yIndex] = y;\n    positions[o + zIndex] = z;\n  }\n}\n\n/*\n * Get vertex indices for drawing polygon mesh (triangulation)\n */\n// eslint-disable-next-line complexity, max-statements\nexport function getSurfaceIndices(\n  polygon: NormalizedPolygonGeometry,\n  positionSize: number,\n  preproject?: (xy: number[]) => number[],\n  full3d?: boolean\n): number[] {\n  let holeIndices = getHoleIndices(polygon);\n  if (holeIndices) {\n    holeIndices = holeIndices.map(positionIndex => positionIndex / positionSize);\n  }\n\n  let positions = getPositions(polygon);\n\n  const is3d = full3d && positionSize === 3;\n\n  if (preproject) {\n    // When tesselating lnglat coordinates, project them to the common space for accuracy\n    const n = positions.length;\n\n    // Clone the array\n    positions = positions.slice();\n\n    const p: number[] = [];\n    for (let i = 0; i < n; i += positionSize) {\n      p[0] = positions[i];\n      p[1] = positions[i + 1];\n\n      if (is3d) {\n        p[2] = positions[i + 2];\n      }\n\n      const xy = preproject(p);\n\n      positions[i] = xy[0];\n      positions[i + 1] = xy[1];\n\n      if (is3d) {\n        positions[i + 2] = xy[2];\n      }\n    }\n  }\n\n  if (is3d) {\n    // calculate plane with largest area\n    const xyArea = getPlaneArea(positions, 0, 1);\n    const xzArea = getPlaneArea(positions, 0, 2);\n    const yzArea = getPlaneArea(positions, 1, 2);\n\n    if (!xyArea && !xzArea && !yzArea) {\n      return []; // no planes have area, nothing we can do\n    }\n\n    // permute positions to make the largest plane xy for earcut\n    if (xyArea > xzArea && xyArea > yzArea) {\n      // xy plane largest, nothing to do\n    } else if (xzArea > yzArea) {\n      // xz plane largest, permute to make xyz -> xzy\n      if (!preproject) {\n        positions = positions.slice();\n      }\n      permutePositions(positions, 0, 2, 1);\n    } else {\n      // yz plane largest, permute to make xyz -> yzx\n      if (!preproject) {\n        positions = positions.slice();\n      }\n      permutePositions(positions, 2, 0, 1);\n    }\n  }\n\n  // Let earcut triangulate the polygon\n  return earcut(positions, holeIndices, positionSize);\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Handles tesselation of polygons with holes\n// - 2D surfaces\n// - 2D outlines\n// - 3D surfaces (top and sides only)\n// - 3D wireframes (not yet)\nimport * as Polygon from './polygon';\nimport {Tesselator} from '@deck.gl/core';\nimport {cutPolygonByGrid, cutPolygonByMercatorBounds} from '@math.gl/polygon';\n\nimport type {\n  PolygonGeometry,\n  NormalizedPolygonGeometry,\n  FlatComplexPolygonGeometry\n} from './polygon';\nimport type {TypedArray} from '@math.gl/core';\n\ntype GeometryUpdateContext = {\n  vertexStart: number;\n  indexStart: number;\n  geometrySize: number;\n  geometryIndex: number;\n};\n\ntype CutPolygon = FlatComplexPolygonGeometry & {\n  edgeTypes: number[];\n};\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PolygonTesselator extends Tesselator<\n  PolygonGeometry,\n  NormalizedPolygonGeometry | CutPolygon[],\n  {\n    fp64?: boolean;\n    IndexType?: Uint32ArrayConstructor | Uint16ArrayConstructor;\n    resolution?: number;\n    wrapLongitude?: boolean;\n    preproject?: (xy: number[]) => number[];\n    full3d?: boolean;\n  }\n> {\n  constructor(opts) {\n    const {fp64, IndexType = Uint32Array} = opts;\n    super({\n      ...opts,\n      attributes: {\n        positions: {size: 3, type: fp64 ? Float64Array : Float32Array},\n        vertexValid: {type: Uint8ClampedArray, size: 1},\n        indices: {type: IndexType, size: 1}\n      }\n    });\n  }\n\n  /** Get attribute by name */\n  get(attributeName: string): TypedArray | null {\n    const {attributes} = this;\n    if (attributeName === 'indices') {\n      return attributes.indices && attributes.indices.subarray(0, this.vertexCount);\n    }\n\n    return attributes[attributeName];\n  }\n\n  /** Override base Tesselator method */\n  updateGeometry(opts) {\n    super.updateGeometry(opts);\n\n    const externalIndices = this.buffers.indices;\n    if (externalIndices) {\n      // @ts-ignore (2339) value is not defined on TypedArray (fall through)\n      this.vertexCount = (externalIndices.value || externalIndices).length;\n    } else if (this.data && !this.getGeometry) {\n      throw new Error('missing indices buffer');\n    }\n  }\n\n  /** Implement base Tesselator interface */\n  protected normalizeGeometry(polygon: PolygonGeometry): NormalizedPolygonGeometry | CutPolygon[] {\n    if (this.normalize) {\n      const normalizedPolygon = Polygon.normalize(polygon, this.positionSize);\n      if (this.opts.resolution) {\n        return cutPolygonByGrid(\n          Polygon.getPositions(normalizedPolygon),\n          Polygon.getHoleIndices(normalizedPolygon),\n          {\n            size: this.positionSize,\n            gridResolution: this.opts.resolution,\n            edgeTypes: true\n          }\n        ) as CutPolygon[];\n      }\n      if (this.opts.wrapLongitude) {\n        return cutPolygonByMercatorBounds(\n          Polygon.getPositions(normalizedPolygon),\n          Polygon.getHoleIndices(normalizedPolygon),\n          {\n            size: this.positionSize,\n            maxLatitude: 86,\n            edgeTypes: true\n          }\n        ) as CutPolygon[];\n      }\n      return normalizedPolygon;\n    }\n    // normalize is explicitly set to false, assume that user passed in already normalized polygons\n    return polygon as NormalizedPolygonGeometry;\n  }\n\n  /** Implement base Tesselator interface */\n  protected getGeometrySize(polygon: NormalizedPolygonGeometry | CutPolygon[]): number {\n    if (isCut(polygon)) {\n      let size = 0;\n      for (const subPolygon of polygon) {\n        size += this.getGeometrySize(subPolygon);\n      }\n      return size;\n    }\n    return Polygon.getPositions(polygon).length / this.positionSize;\n  }\n\n  /** Override base Tesselator method */\n  protected getGeometryFromBuffer(buffer) {\n    if (this.normalize || !this.buffers.indices) {\n      return super.getGeometryFromBuffer(buffer);\n    }\n    // we don't need to read the positions if no normalization/tesselation\n    return null;\n  }\n\n  /** Implement base Tesselator interface */\n  protected updateGeometryAttributes(\n    polygon: NormalizedPolygonGeometry | CutPolygon[] | null,\n    context: GeometryUpdateContext\n  ) {\n    if (polygon && isCut(polygon)) {\n      for (const subPolygon of polygon) {\n        const geometrySize = this.getGeometrySize(subPolygon);\n        context.geometrySize = geometrySize;\n        this.updateGeometryAttributes(subPolygon, context);\n        context.vertexStart += geometrySize;\n        context.indexStart = this.indexStarts[context.geometryIndex + 1];\n      }\n    } else {\n      this._updateIndices(polygon, context);\n      this._updatePositions(polygon, context);\n      this._updateVertexValid(polygon, context);\n    }\n  }\n\n  // Flatten the indices array\n  private _updateIndices(\n    polygon: NormalizedPolygonGeometry | null,\n    {geometryIndex, vertexStart: offset, indexStart}: GeometryUpdateContext\n  ) {\n    const {attributes, indexStarts, typedArrayManager} = this;\n\n    let target = attributes.indices;\n    if (!target || !polygon) {\n      return;\n    }\n    let i = indexStart;\n\n    // 1. get triangulated indices for the internal areas\n    const indices = Polygon.getSurfaceIndices(\n      polygon,\n      this.positionSize,\n      this.opts.preproject,\n      this.opts.full3d\n    );\n\n    // make sure the buffer is large enough\n    target = typedArrayManager.allocate(target, indexStart + indices.length, {\n      copy: true\n    });\n\n    // 2. offset each index by the number of indices in previous polygons\n    for (let j = 0; j < indices.length; j++) {\n      target[i++] = indices[j] + offset;\n    }\n\n    indexStarts[geometryIndex + 1] = indexStart + indices.length;\n    attributes.indices = target;\n  }\n\n  // Flatten out all the vertices of all the sub subPolygons\n  private _updatePositions(\n    polygon: NormalizedPolygonGeometry | null,\n    {vertexStart, geometrySize}: GeometryUpdateContext\n  ) {\n    const {\n      attributes: {positions},\n      positionSize\n    } = this;\n    if (!positions || !polygon) {\n      return;\n    }\n    const polygonPositions = Polygon.getPositions(polygon);\n\n    for (let i = vertexStart, j = 0; j < geometrySize; i++, j++) {\n      const x = polygonPositions[j * positionSize];\n      const y = polygonPositions[j * positionSize + 1];\n      const z = positionSize > 2 ? polygonPositions[j * positionSize + 2] : 0;\n\n      positions[i * 3] = x;\n      positions[i * 3 + 1] = y;\n      positions[i * 3 + 2] = z;\n    }\n  }\n\n  private _updateVertexValid(\n    polygon: NormalizedPolygonGeometry | null,\n    {vertexStart, geometrySize}: GeometryUpdateContext\n  ) {\n    const {positionSize} = this;\n    const vertexValid = this.attributes.vertexValid as TypedArray;\n    const holeIndices = polygon && Polygon.getHoleIndices(polygon);\n    /* We are reusing the some buffer for `nextPositions` by offseting one vertex\n     * to the left. As a result,\n     * the last vertex of each ring overlaps with the first vertex of the next ring.\n     * `vertexValid` is used to mark the end of each ring so we don't draw these\n     * segments:\n      positions      A0 A1 A2 A3 A4 B0 B1 B2 C0 ...\n      nextPositions  A1 A2 A3 A4 B0 B1 B2 C0 C1 ...\n      vertexValid    1  1  1  1  0  1  1  0  1 ...\n     */\n    if (polygon && (polygon as CutPolygon).edgeTypes) {\n      vertexValid.set((polygon as CutPolygon).edgeTypes, vertexStart);\n    } else {\n      vertexValid.fill(1, vertexStart, vertexStart + geometrySize);\n    }\n    if (holeIndices) {\n      for (let j = 0; j < holeIndices.length; j++) {\n        vertexValid[vertexStart + holeIndices[j] / positionSize - 1] = 0;\n      }\n    }\n    vertexValid[vertexStart + geometrySize - 1] = 0;\n  }\n}\n\nfunction isCut(polygon: NormalizedPolygonGeometry | CutPolygon[]): polygon is CutPolygon[] {\n  return Array.isArray(polygon) && polygon.length > 0 && !Number.isFinite(polygon[0]);\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n\nattribute vec2 vertexPositions;\nattribute float vertexValid;\n\nuniform bool extruded;\nuniform bool isWireframe;\nuniform float elevationScale;\nuniform float opacity;\n\nvarying vec4 vColor;\n\nstruct PolygonProps {\n  vec4 fillColors;\n  vec4 lineColors;\n  vec3 positions;\n  vec3 nextPositions;\n  vec3 pickingColors;\n  vec3 positions64Low;\n  vec3 nextPositions64Low;\n  float elevations;\n};\n\nvec3 project_offset_normal(vec3 vector) {\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT ||\n    project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSETS) {\n    // normals generated by the polygon tesselator are in lnglat offsets instead of meters\n    return normalize(vector * project_uCommonUnitsPerWorldUnit);\n  }\n  return project_normal(vector);\n}\n\nvoid calculatePosition(PolygonProps props) {\n#ifdef IS_SIDE_VERTEX\n  if(vertexValid < 0.5){\n    gl_Position = vec4(0.);\n    return;\n  }\n#endif\n\n  vec3 pos;\n  vec3 pos64Low;\n  vec3 normal;\n  vec4 colors = isWireframe ? props.lineColors : props.fillColors;\n\n  geometry.worldPosition = props.positions;\n  geometry.worldPositionAlt = props.nextPositions;\n  geometry.pickingColor = props.pickingColors;\n\n#ifdef IS_SIDE_VERTEX\n  pos = mix(props.positions, props.nextPositions, vertexPositions.x);\n  pos64Low = mix(props.positions64Low, props.nextPositions64Low, vertexPositions.x);\n#else\n  pos = props.positions;\n  pos64Low = props.positions64Low;\n#endif\n\n  if (extruded) {\n    pos.z += props.elevations * vertexPositions.y * elevationScale;\n  }\n  gl_Position = project_position_to_clipspace(pos, pos64Low, vec3(0.), geometry.position);\n\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n\n  if (extruded) {\n  #ifdef IS_SIDE_VERTEX\n    normal = vec3(\n      props.positions.y - props.nextPositions.y + (props.positions64Low.y - props.nextPositions64Low.y),\n      props.nextPositions.x - props.positions.x + (props.nextPositions64Low.x - props.positions64Low.x),\n      0.0);\n    normal = project_offset_normal(normal);\n  #else\n    normal = project_normal(vec3(0.0, 0.0, 1.0));\n  #endif\n    geometry.normal = normal;\n    vec3 lightColor = lighting_getLightColor(colors.rgb, project_uCameraPosition, geometry.position.xyz, normal);\n    vColor = vec4(lightColor, colors.a * opacity);\n  } else {\n    vColor = vec4(colors.rgb, colors.a * opacity);\n  }\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport main from './solid-polygon-layer-vertex-main.glsl';\n\nexport default `\\\n#define SHADER_NAME solid-polygon-layer-vertex-shader\n\nattribute vec3 positions;\nattribute vec3 positions64Low;\nattribute float elevations;\nattribute vec4 fillColors;\nattribute vec4 lineColors;\nattribute vec3 pickingColors;\n\n${main}\n\nvoid main(void) {\n  PolygonProps props;\n\n  props.positions = positions;\n  props.positions64Low = positions64Low;\n  props.elevations = elevations;\n  props.fillColors = fillColors;\n  props.lineColors = lineColors;\n  props.pickingColors = pickingColors;\n\n  calculatePosition(props);\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport main from './solid-polygon-layer-vertex-main.glsl';\n\nexport default `\\\n#define SHADER_NAME solid-polygon-layer-vertex-shader-side\n#define IS_SIDE_VERTEX\n\n\nattribute vec3 instancePositions;\nattribute vec3 nextPositions;\nattribute vec3 instancePositions64Low;\nattribute vec3 nextPositions64Low;\nattribute float instanceElevations;\nattribute vec4 instanceFillColors;\nattribute vec4 instanceLineColors;\nattribute vec3 instancePickingColors;\n\n${main}\n\nvoid main(void) {\n  PolygonProps props;\n\n  #if RING_WINDING_ORDER_CW == 1\n    props.positions = instancePositions;\n    props.positions64Low = instancePositions64Low;\n    props.nextPositions = nextPositions;\n    props.nextPositions64Low = nextPositions64Low;\n  #else\n    props.positions = nextPositions;\n    props.positions64Low = nextPositions64Low;\n    props.nextPositions = instancePositions;\n    props.nextPositions64Low = instancePositions64Low;\n  #endif\n  props.elevations = instanceElevations;\n  props.fillColors = instanceFillColors;\n  props.lineColors = instanceLineColors;\n  props.pickingColors = instancePickingColors;\n\n  calculatePosition(props);\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME solid-polygon-layer-fragment-shader\n\nprecision highp float;\n\nvarying vec4 vColor;\n\nvoid main(void) {\n  gl_FragColor = vColor;\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, hasFeatures, FEATURES} from '@luma.gl/core';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport PolygonTesselator from './polygon-tesselator';\n\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  Color,\n  Material,\n  Accessor,\n  AccessorFunction,\n  UpdateParameters,\n  GetPickingInfoParams,\n  PickingInfo,\n  DefaultProps\n} from '@deck.gl/core';\nimport type {PolygonGeometry} from './polygon';\n\ntype _SolidPolygonLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /** Whether to fill the polygons\n   * @default true\n   */\n  filled?: boolean;\n  /** Whether to extrude the polygons\n   * @default false\n   */\n  extruded?: boolean;\n  /** Whether to generate a line wireframe of the polygon.\n   * @default false\n   */\n  wireframe?: boolean;\n  /**\n   * (Experimental) If `false`, will skip normalizing the coordinates returned by `getPolygon`.\n   * @default true\n   */\n  _normalize?: boolean;\n  /**\n   * (Experimental) This prop is only effective with `_normalize: false`.\n   * It specifies the winding order of rings in the polygon data, one of 'CW' (clockwise) and 'CCW' (counter-clockwise)\n   */\n  _windingOrder?: 'CW' | 'CCW';\n\n  /**\n   * (Experimental) This prop is only effective with `XYZ` data.\n   * When true, polygon tesselation will be performed on the plane with the largest area, instead of the xy plane.\n   * @default false\n   */\n  _full3d?: boolean;\n\n  /** Elevation multiplier.\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /** Polygon geometry accessor. */\n  getPolygon?: AccessorFunction<DataT, PolygonGeometry>;\n  /** Extrusion height accessor.\n   * @default 1000\n   */\n  getElevation?: Accessor<DataT, number>;\n  /** Fill color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n  /** Stroke color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n};\n\n/** Render filled and/or extruded polygons. */\nexport type SolidPolygonLayerProps<DataT = any> = _SolidPolygonLayerProps<DataT> & LayerProps;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<SolidPolygonLayerProps> = {\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n  _full3d: false,\n\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  getElevation: {type: 'accessor', value: 1000},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  material: true\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class SolidPolygonLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_SolidPolygonLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'SolidPolygonLayer';\n\n  state!: {\n    topModel?: Model;\n    sideModel?: Model;\n    models?: Model[];\n    numInstances: number;\n    polygonTesselator: PolygonTesselator;\n  };\n\n  getShaders(type) {\n    return super.getShaders({\n      vs: type === 'top' ? vsTop : vsSide,\n      fs,\n      defines: {\n        RING_WINDING_ORDER_CW: !this.props._normalize && this.props._windingOrder === 'CCW' ? 0 : 1\n      },\n      modules: [project32, gouraudLighting, picking]\n    });\n  }\n\n  get wrapLongitude(): boolean {\n    return false;\n  }\n\n  initializeState() {\n    const {gl, viewport} = this.context;\n    let {coordinateSystem} = this.props;\n    const {_full3d} = this.props;\n    if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n      coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n    }\n\n    let preproject: ((xy: number[]) => number[]) | undefined;\n\n    if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n      if (_full3d) {\n        preproject = viewport.projectPosition.bind(viewport);\n      } else {\n        preproject = viewport.projectFlat.bind(viewport);\n      }\n    }\n\n    this.setState({\n      numInstances: 0,\n      polygonTesselator: new PolygonTesselator({\n        // Lnglat coordinates are usually projected non-linearly, which affects tesselation results\n        // Provide a preproject function if the coordinates are in lnglat\n        preproject,\n        fp64: this.use64bitPositions(),\n        IndexType: !gl || hasFeatures(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n      })\n    });\n\n    const attributeManager = this.getAttributeManager()!;\n    const noAlloc = true;\n\n    attributeManager.remove(['instancePickingColors']);\n\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {\n        size: 1,\n        isIndexed: true,\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculateIndices,\n        noAlloc\n      },\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          positions: {\n            vertexOffset: 0,\n            divisor: 0\n          },\n          instancePositions: {\n            vertexOffset: 0,\n            divisor: 1\n          },\n          nextPositions: {\n            vertexOffset: 1,\n            divisor: 1\n          }\n        }\n      },\n      vertexValid: {\n        size: 1,\n        divisor: 1,\n        type: GL.UNSIGNED_BYTE,\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        shaderAttributes: {\n          elevations: {\n            divisor: 0\n          },\n          instanceElevations: {\n            divisor: 1\n          }\n        }\n      },\n      fillColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          fillColors: {\n            divisor: 0\n          },\n          instanceFillColors: {\n            divisor: 1\n          }\n        }\n      },\n      lineColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          lineColors: {\n            divisor: 0\n          },\n          instanceLineColors: {\n            divisor: 1\n          }\n        }\n      },\n      pickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value),\n        shaderAttributes: {\n          pickingColors: {\n            divisor: 0\n          },\n          instancePickingColors: {\n            divisor: 1\n          }\n        }\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  getPickingInfo(params: GetPickingInfoParams): PickingInfo {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      info.object = (data as any[]).find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  disablePickingIndex(objectIndex: number) {\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      for (let i = 0; i < (data as any[]).length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      super.disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw({uniforms}) {\n    const {extruded, filled, wireframe, elevationScale} = this.props;\n    const {topModel, sideModel, polygonTesselator} = this.state;\n\n    const renderUniforms = {\n      ...uniforms,\n      extruded: Boolean(extruded),\n      elevationScale\n    };\n\n    // Note: the order is important\n    if (sideModel) {\n      sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n      sideModel.setUniforms(renderUniforms);\n      if (wireframe) {\n        sideModel.setDrawMode(GL.LINE_STRIP);\n        sideModel.setUniforms({isWireframe: true}).draw();\n      }\n      if (filled) {\n        sideModel.setDrawMode(GL.TRIANGLE_FAN);\n        sideModel.setUniforms({isWireframe: false}).draw();\n      }\n    }\n\n    if (topModel) {\n      topModel.setVertexCount(polygonTesselator.vertexCount);\n      topModel.setUniforms(renderUniforms).draw();\n    }\n  }\n\n  updateState(updateParams: UpdateParameters<this>) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps, changeFlags} = updateParams;\n    const attributeManager = this.getAttributeManager();\n\n    const regenerateModels =\n      changeFlags.extensionsChanged ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded;\n\n    if (regenerateModels) {\n      this.state.models?.forEach(model => model.delete());\n\n      this.setState(this._getModels(this.context.gl));\n      attributeManager!.invalidateAll();\n    }\n  }\n\n  protected updateGeometry({props, oldProps, changeFlags}: UpdateParameters<this>) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      const {polygonTesselator} = this.state;\n      const buffers = (props.data as any).attributes || {};\n      polygonTesselator.updateGeometry({\n        data: props.data,\n        normalize: props._normalize,\n        geometryBuffer: buffers.getPolygon,\n        buffers,\n        getGeometry: props.getPolygon,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        fp64: this.use64bitPositions(),\n        dataChanged: changeFlags.dataChanged,\n        full3d: props._full3d\n      });\n\n      this.setState({\n        numInstances: polygonTesselator.instanceCount,\n        startIndices: polygonTesselator.vertexStarts\n      });\n\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        this.getAttributeManager()!.invalidateAll();\n      }\n    }\n  }\n\n  protected _getModels(gl: WebGLRenderingContext): Model {\n    const {id, filled, extruded} = this.props;\n\n    let topModel;\n    let sideModel;\n\n    if (filled) {\n      const shaders = this.getShaders('top');\n      shaders.defines.NON_INSTANCED_MODEL = 1;\n\n      topModel = new Model(gl, {\n        ...shaders,\n        id: `${id}-top`,\n        drawMode: GL.TRIANGLES,\n        attributes: {\n          vertexPositions: new Float32Array([0, 1])\n        },\n        uniforms: {\n          isWireframe: false,\n          isSideVertex: false\n        },\n        vertexCount: 0,\n        isIndexed: true\n      });\n    }\n    if (extruded) {\n      sideModel = new Model(gl, {\n        ...this.getShaders('side'),\n        id: `${id}-side`,\n        geometry: new Geometry({\n          drawMode: GL.LINES,\n          vertexCount: 4,\n          attributes: {\n            // top right - top left - bootom left - bottom right\n            vertexPositions: {\n              size: 2,\n              value: new Float32Array([1, 0, 0, 0, 0, 1, 1, 1])\n            }\n          }\n        }),\n        instanceCount: 0,\n        isInstanced: 1\n      });\n\n      sideModel.userData.excludeAttributes = {indices: true};\n    }\n\n    return {\n      models: [sideModel, topModel].filter(Boolean),\n      topModel,\n      sideModel\n    };\n  }\n\n  protected calculateIndices(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.indexStarts;\n    attribute.value = polygonTesselator.get('indices');\n  }\n\n  protected calculatePositions(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.vertexStarts;\n    attribute.value = polygonTesselator.get('positions');\n  }\n\n  protected calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.get('vertexValid');\n  }\n}\n", "// Assume data array is sorted by <accessor>\n// Replaces the specified range with a new subarray\n// Mutates the data array\n// Returns {startRow, endRow} of the inserted items\nexport function replaceInRange({\n  data,\n  getIndex,\n  dataRange,\n  replace\n}: {\n  data: any[];\n  getIndex: (d: any) => number;\n  dataRange: {startRow?: number; endRow?: number};\n  replace: any[];\n}): {startRow: Number; endRow: number} {\n  const {startRow = 0, endRow = Infinity} = dataRange;\n  const count = data.length;\n  let replaceStart = count;\n  let replaceEnd = count;\n  for (let i = 0; i < count; i++) {\n    const row = getIndex(data[i]);\n    if (replaceStart > i && row >= startRow) {\n      replaceStart = i;\n    }\n    if (row >= endRow) {\n      replaceEnd = i;\n      break;\n    }\n  }\n  let index = replaceStart;\n  const dataLengthChanged = replaceEnd - replaceStart !== replace.length;\n  // Save the items after replaceEnd before we overwrite data\n  const endChunk = dataLengthChanged ? data.slice(replaceEnd) : undefined;\n  // Insert new items\n  for (let i = 0; i < replace.length; i++) {\n    data[index++] = replace[i];\n  }\n  if (endChunk) {\n    // Append items after replaceEnd\n    for (let i = 0; i < endChunk.length; i++) {\n      data[index++] = endChunk[i];\n    }\n    // Trim additional items\n    data.length = index;\n  }\n\n  return {\n    startRow: replaceStart,\n    endRow: replaceStart + replace.length\n  };\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Accessor,\n  AccessorFunction,\n  Color,\n  CompositeLayer,\n  CompositeLayerProps,\n  createIterable,\n  Layer,\n  LayerDataSource,\n  LayersList,\n  log,\n  Unit,\n  Material,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nimport {replaceInRange} from '../utils';\n\n/**\n * All properties supported by `PolygonLayer`.\n */\nexport type PolygonLayerProps<DataT = any> = _PolygonLayerProps<DataT> & CompositeLayerProps;\n\n/**\n * Properties added by `PolygonLayer`.\n */\ntype _PolygonLayerProps<DataT = any> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * Whether to draw an outline around the polygon (solid fill).\n   *\n   * Note that both the outer polygon as well the outlines of any holes will be drawn.\n   *\n   * @default true\n   */\n  stroked?: boolean;\n\n  /**\n   * Whether to draw a filled polygon (solid fill).\n   *\n   * Note that only the area between the outer polygon and any holes will be filled.\n   *\n   * @default true\n   */\n  filled?: boolean;\n\n  /**\n   * Whether to extrude the polygons.\n   *\n   * Based on the elevations provided by the `getElevation` accessor.\n   *\n   * If set to `false`, all polygons will be flat, this generates less geometry and is faster\n   * than simply returning 0 from getElevation.\n   *\n   * @default false\n   */\n  extruded?: boolean;\n\n  /**\n   * Elevation multiplier.\n   *\n   * The final elevation is calculated by `elevationScale * getElevation(d)`.\n   * `elevationScale` is a handy property to scale all elevation without updating the data.\n   *\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /**\n   * Whether to generate a line wireframe of the hexagon.\n   *\n   * The outline will have \"horizontal\" lines closing the top and bottom polygons and a vertical\n   * line (a \"strut\") for each vertex on the polygon.\n   *\n   * @default false\n   */\n  wireframe?: boolean;\n\n  /**\n   * The units of the line width, one of `meters`, `common`, and `pixels`.\n   *\n   * @default 'meters'\n   * @see Unit.\n   */\n  lineWidthUnits?: Unit;\n\n  /**\n   * The line width multiplier that multiplied to all outlines of `Polygon` and `MultiPolygon`\n   * features if the stroked attribute is true.\n   *\n   * @default 1\n   */\n  lineWidthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   *\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels\n   *\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Type of joint. If `true`, draw round joints. Otherwise draw miter joints.\n   *\n   * @default false\n   */\n  lineJointRounded?: boolean;\n\n  /**\n   * The maximum extent of a joint in ratio to the stroke width.\n   *\n   * Only works if `lineJointRounded` is false.\n   *\n   * @default 4\n   */\n  lineMiterLimit?: number;\n\n  lineDashJustified?: boolean;\n\n  /** Called on each object in the data stream to retrieve its corresponding polygon. */\n  getPolygon?: AccessorFunction<DataT, any>;\n\n  /**\n   * Fill collor value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line color value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line width value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineWidth?: Accessor<DataT, number>;\n\n  /**\n   * Elevation valur or accessor.\n   *\n   * Only used if `extruded: true`.\n   *\n   * @default 1000\n   */\n  getElevation?: Accessor<DataT, number>;\n\n  /**\n   * This property has been moved to `PathStyleExtension`.\n   *\n   * @deprecated\n   */\n  getLineDashArray?: Accessor<DataT, number> | null;\n\n  /**\n   * If `false`, will skip normalizing the coordinates returned by `getPolygon`.\n   *\n   * **Note**: This prop is experimental\n   *\n   * @default true\n   */\n  _normalize?: boolean;\n\n  /**\n   * Specifies the winding order of rings in the polygon data.\n   *\n   * **Note**: This prop is experimental\n   *\n   * @default 'CW'\n   */\n  _windingOrder?: 'CW' | 'CCW';\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n};\n\nconst defaultLineColor: [number, number, number, number] = [0, 0, 0, 255];\nconst defaultFillColor: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<PolygonLayerProps> = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point, line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\n/** A composite layer that renders filled, stroked and/or extruded polygons. */\nexport default class PolygonLayer<DataT = any, ExtraProps extends {} = {}> extends CompositeLayer<\n  Required<_PolygonLayerProps<DataT>> & ExtraProps\n> {\n  static layerName = 'PolygonLayer';\n  static defaultProps = defaultProps;\n\n  initializeState(): void {\n    this.state = {\n      paths: []\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({changeFlags}: UpdateParameters<this>) {\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n      const paths = this.state.paths.slice();\n      const pathsDiff = changeFlags.dataChanged.map(dataRange =>\n        replaceInRange({\n          data: paths,\n          getIndex: p => p.__source.index,\n          dataRange,\n          replace: this._getPaths(dataRange)\n        })\n      );\n      this.setState({paths, pathsDiff});\n    } else if (geometryChanged) {\n      this.setState({\n        paths: this._getPaths(),\n        pathsDiff: null\n      });\n    }\n  }\n\n  private _getPaths(dataRange: {startRow?: number; endRow?: number} = {}): {path: number[]}[] {\n    const {data, getPolygon, positionFormat, _normalize} = this.props;\n    const paths: {path: number[]}[] = [];\n    const positionSize = positionFormat === 'XY' ? 2 : 3;\n    const {startRow, endRow} = dataRange;\n\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      let polygon = getPolygon(object, objectInfo);\n      if (_normalize) {\n        polygon = Polygon.normalize(polygon, positionSize);\n      }\n      const {holeIndices} = polygon;\n      const positions = polygon.positions || polygon;\n\n      if (holeIndices) {\n        // split the positions array into `holeIndices.length + 1` rings\n        // holeIndices[-1] falls back to 0\n        // holeIndices[holeIndices.length] falls back to positions.length\n        for (let i = 0; i <= holeIndices.length; i++) {\n          const path = positions.slice(holeIndices[i - 1] || 0, holeIndices[i] || positions.length);\n          paths.push(this.getSubLayerRow({path}, object, objectInfo.index));\n        }\n      } else {\n        paths.push(this.getSubLayerRow({path: positions}, object, objectInfo.index));\n      }\n    }\n    return paths;\n  }\n\n  /* eslint-disable complexity */\n  renderLayers(): Layer | null | LayersList {\n    // Layer composition props\n    const {\n      data,\n      _dataDiff,\n      stroked,\n      filled,\n      extruded,\n      wireframe,\n      _normalize,\n      _windingOrder,\n      elevationScale,\n      transitions,\n      positionFormat\n    } = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      material\n    } = this.props;\n\n    const {paths, pathsDiff} = this.state;\n\n    const FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n    const StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n\n    // Filled Polygon Layer\n    const polygonLayer =\n      this.shouldRenderSubLayer('fill', paths) &&\n      new FillLayer(\n        {\n          _dataDiff,\n          extruded,\n          elevationScale,\n\n          filled,\n          wireframe,\n          _normalize,\n          _windingOrder,\n\n          getElevation,\n          getFillColor,\n          getLineColor: extruded && wireframe ? getLineColor : defaultLineColor,\n\n          material,\n          transitions\n        },\n        this.getSubLayerProps({\n          id: 'fill',\n          updateTriggers: updateTriggers && {\n            getPolygon: updateTriggers.getPolygon,\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            // using a legacy API to invalid lineColor attributes\n            // if (extruded && wireframe) has changed\n            lineColors: extruded && wireframe,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data,\n          positionFormat,\n          getPolygon\n        }\n      );\n\n    // Polygon line layer\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('stroke', paths) &&\n      new StrokeLayer(\n        {\n          _dataDiff: pathsDiff && (() => pathsDiff),\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          jointRounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          // Already normalized\n          _pathType: 'loop',\n\n          transitions: transitions && {\n            getWidth: transitions.getLineWidth,\n            getColor: transitions.getLineColor,\n            getPath: transitions.getPolygon\n          },\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray)\n        },\n        this.getSubLayerProps({\n          id: 'stroke',\n          updateTriggers: updateTriggers && {\n            getWidth: updateTriggers.getLineWidth,\n            getColor: updateTriggers.getLineColor,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: paths,\n          positionFormat,\n          getPath: x => x.path\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonLayer,\n      polygonLineLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n", "// This module implement some utility functions to work with\n// the geojson-binary format defined at loaders.gl:\n// https://github.com/visgl/loaders.gl/blob/master/modules/gis/docs/api-reference/geojson-to-binary.md\n\nimport {\n  BinaryFeatures,\n  BinaryLineFeatures,\n  BinaryPointFeatures,\n  BinaryPolygonFeatures,\n  Feature\n} from '@loaders.gl/schema';\n\nexport type BinaryFeatureTypes = BinaryPointFeatures | BinaryLineFeatures | BinaryPolygonFeatures;\n\ntype FeaureOnlyProperties = Pick<Feature, 'properties'>;\n\n/**\n * Return the feature for an accesor\n */\nexport function binaryToFeatureForAccesor(\n  data: BinaryFeatureTypes,\n  index: number\n): FeaureOnlyProperties | null {\n  if (!data) {\n    return null;\n  }\n\n  const featureIndex = 'startIndices' in data ? (data as any).startIndices[index] : index;\n  const geometryIndex = data.featureIds.value[featureIndex];\n\n  if (featureIndex !== -1) {\n    return getPropertiesForIndex(data, geometryIndex, featureIndex);\n  }\n\n  return null;\n}\n\nfunction getPropertiesForIndex(\n  data: BinaryFeatureTypes,\n  propertiesIndex: number,\n  numericPropsIndex: number\n): FeaureOnlyProperties {\n  const feature = {\n    properties: {...data.properties[propertiesIndex]}\n  };\n\n  for (const prop in data.numericProps) {\n    feature.properties[prop] = data.numericProps[prop].value[numericPropsIndex];\n  }\n\n  return feature;\n}\n\n// Custom picking color to keep binary indexes\nexport function calculatePickingColors(\n  geojsonBinary: BinaryFeatures,\n  encodePickingColor: (id: number, result: number[]) => void\n): Record<string, Uint8ClampedArray | null> {\n  const pickingColors: Record<string, Uint8ClampedArray | null> = {\n    points: null,\n    lines: null,\n    polygons: null\n  };\n  for (const key in pickingColors) {\n    const featureIds = geojsonBinary[key].globalFeatureIds.value;\n    pickingColors[key] = new Uint8ClampedArray(featureIds.length * 3);\n    const pickingColor = [];\n    for (let i = 0; i < featureIds.length; i++) {\n      encodePickingColor(featureIds[i], pickingColor);\n      pickingColors[key]![i * 3 + 0] = pickingColor[0];\n      pickingColors[key]![i * 3 + 1] = pickingColor[1];\n      pickingColors[key]![i * 3 + 2] = pickingColor[2];\n    }\n  }\n\n  return pickingColors;\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME multi-icon-layer-fragment-shader\n\nprecision highp float;\n\nuniform float opacity;\nuniform sampler2D iconsTexture;\nuniform float gamma;\nuniform bool sdf;\nuniform float alphaCutoff;\nuniform float sdfBuffer;\nuniform float outlineBuffer;\nuniform vec4 outlineColor;\n\nvarying vec4 vColor;\nvarying vec2 vTextureCoords;\nvarying vec2 uv;\n\nvoid main(void) {\n  geometry.uv = uv;\n\n  if (!picking_uActive) {\n    float alpha = texture2D(iconsTexture, vTextureCoords).a;\n    vec4 color = vColor;\n\n    // if enable sdf (signed distance fields)\n    if (sdf) {\n      float distance = alpha;\n      alpha = smoothstep(sdfBuffer - gamma, sdfBuffer + gamma, distance);\n\n      if (outlineBuffer > 0.0) {\n        float inFill = alpha;\n        float inBorder = smoothstep(outlineBuffer - gamma, outlineBuffer + gamma, distance);\n        color = mix(outlineColor, vColor, inFill);\n        alpha = inBorder;\n      }\n    }\n\n    // Take the global opacity and the alpha from color into account for the alpha component\n    float a = alpha * color.a;\n    \n    if (a < alphaCutoff) {\n      discard;\n    }\n\n    gl_FragColor = vec4(color.rgb, a * opacity);\n  }\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {log} from '@deck.gl/core';\nimport IconLayer from '../../icon-layer/icon-layer';\n\nimport fs from './multi-icon-layer-fragment.glsl';\n\nimport type {IconLayerProps} from '../../icon-layer/icon-layer';\nimport type {Accessor, Color, UpdateParameters, DefaultProps} from '@deck.gl/core';\n\n// TODO expose as layer properties\nconst DEFAULT_BUFFER = 192.0 / 256;\nconst EMPTY_ARRAY = [];\n\ntype _MultiIconLayerProps<DataT> = {\n  getIconOffsets?: Accessor<DataT, number[]>;\n  sdf?: boolean;\n  smoothing?: number;\n  outlineWidth?: number;\n  outlineColor?: Color;\n};\n\nexport type MultiIconLayerProps<DataT = any> = _MultiIconLayerProps<DataT> & IconLayerProps<DataT>;\n\nconst defaultProps: DefaultProps<MultiIconLayerProps> = {\n  getIconOffsets: {type: 'accessor', value: x => x.offsets},\n  alphaCutoff: 0.001,\n  smoothing: 0.1,\n  outlineWidth: 0,\n  outlineColor: {type: 'color', value: [0, 0, 0, 255]}\n};\n\nexport default class MultiIconLayer<DataT, ExtraPropsT extends {} = {}> extends IconLayer<\n  DataT,\n  ExtraPropsT & Required<_MultiIconLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'MultiIconLayer';\n\n  state!: IconLayer['state'] & {\n    outlineColor: Color;\n  };\n\n  getShaders() {\n    return {...super.getShaders(), fs};\n  }\n\n  initializeState() {\n    super.initializeState();\n\n    const attributeManager = this.getAttributeManager();\n    attributeManager!.addInstanced({\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIconOffsets'\n      },\n      instancePickingColors: {\n        type: GL.UNSIGNED_BYTE,\n        size: 3,\n        accessor: (object, {index, target: value}) => this.encodePickingColor(index, value)\n      }\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {props, oldProps} = params;\n    let {outlineColor} = props;\n\n    if (outlineColor !== oldProps.outlineColor) {\n      outlineColor = outlineColor.map(x => x / 255) as Color;\n      outlineColor[3] = Number.isFinite(outlineColor[3]) ? outlineColor[3] : 1;\n\n      this.setState({\n        outlineColor\n      });\n    }\n    if (!props.sdf && props.outlineWidth) {\n      log.warn(`${this.id}: fontSettings.sdf is required to render outline`)();\n    }\n  }\n\n  draw(params) {\n    const {sdf, smoothing, outlineWidth} = this.props;\n    const {outlineColor} = this.state;\n    const outlineBuffer = outlineWidth\n      ? Math.max(smoothing, DEFAULT_BUFFER * (1 - outlineWidth))\n      : -1;\n\n    params.uniforms = {\n      ...params.uniforms,\n      // Refer the following doc about gamma and buffer\n      // https://blog.mapbox.com/drawing-text-with-signed-distance-fields-in-mapbox-gl-b0933af6f817\n      sdfBuffer: DEFAULT_BUFFER,\n      outlineBuffer,\n      gamma: smoothing,\n      sdf: Boolean(sdf),\n      outlineColor\n    };\n\n    super.draw(params);\n\n    // draw text without outline on top to ensure a thick outline won't occlude other characters\n    if (sdf && outlineWidth) {\n      const {iconManager} = this.state;\n      const iconsTexture = iconManager.getTexture();\n\n      if (iconsTexture) {\n        this.state.model.draw({uniforms: {outlineBuffer: DEFAULT_BUFFER}});\n      }\n    }\n  }\n\n  protected getInstanceOffset(icons: string): number[] {\n    return icons ? Array.from(icons).flatMap(icon => super.getInstanceOffset(icon)) : EMPTY_ARRAY;\n  }\n\n  getInstanceColorMode(icons: string): number {\n    return 1; // mask\n  }\n\n  getInstanceIconFrame(icons: string): number[] {\n    return icons\n      ? Array.from(icons).flatMap(icon => super.getInstanceIconFrame(icon))\n      : EMPTY_ARRAY;\n  }\n}\n", "const INF = 1e20;\n\nexport default class TinySDF {\n    constructor({\n        fontSize = 24,\n        buffer = 3,\n        radius = 8,\n        cutoff = 0.25,\n        fontFamily = 'sans-serif',\n        fontWeight = 'normal',\n        fontStyle = 'normal'\n    } = {}) {\n        this.buffer = buffer;\n        this.cutoff = cutoff;\n        this.radius = radius;\n\n        // make the canvas size big enough to both have the specified buffer around the glyph\n        // for \"halo\", and account for some glyphs possibly being larger than their font size\n        const size = this.size = fontSize + buffer * 4;\n\n        const canvas = this._createCanvas(size);\n        const ctx = this.ctx = canvas.getContext('2d', {willReadFrequently: true});\n        ctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;\n\n        ctx.textBaseline = 'alphabetic';\n        ctx.textAlign = 'left'; // Necessary so that RTL text doesn't have different alignment\n        ctx.fillStyle = 'black';\n\n        // temporary arrays for the distance transform\n        this.gridOuter = new Float64Array(size * size);\n        this.gridInner = new Float64Array(size * size);\n        this.f = new Float64Array(size);\n        this.z = new Float64Array(size + 1);\n        this.v = new Uint16Array(size);\n    }\n\n    _createCanvas(size) {\n        const canvas = document.createElement('canvas');\n        canvas.width = canvas.height = size;\n        return canvas;\n    }\n\n    draw(char) {\n        const {\n            width: glyphAdvance,\n            actualBoundingBoxAscent,\n            actualBoundingBoxDescent,\n            actualBoundingBoxLeft,\n            actualBoundingBoxRight\n        } = this.ctx.measureText(char);\n\n        // The integer/pixel part of the top alignment is encoded in metrics.glyphTop\n        // The remainder is implicitly encoded in the rasterization\n        const glyphTop = Math.ceil(actualBoundingBoxAscent);\n        const glyphLeft = 0;\n\n        // If the glyph overflows the canvas size, it will be clipped at the bottom/right\n        const glyphWidth = Math.max(0, Math.min(this.size - this.buffer, Math.ceil(actualBoundingBoxRight - actualBoundingBoxLeft)));\n        const glyphHeight = Math.min(this.size - this.buffer, glyphTop + Math.ceil(actualBoundingBoxDescent));\n\n        const width = glyphWidth + 2 * this.buffer;\n        const height = glyphHeight + 2 * this.buffer;\n\n        const len = Math.max(width * height, 0);\n        const data = new Uint8ClampedArray(len);\n        const glyph = {data, width, height, glyphWidth, glyphHeight, glyphTop, glyphLeft, glyphAdvance};\n        if (glyphWidth === 0 || glyphHeight === 0) return glyph;\n\n        const {ctx, buffer, gridInner, gridOuter} = this;\n        ctx.clearRect(buffer, buffer, glyphWidth, glyphHeight);\n        ctx.fillText(char, buffer, buffer + glyphTop);\n        const imgData = ctx.getImageData(buffer, buffer, glyphWidth, glyphHeight);\n\n        // Initialize grids outside the glyph range to alpha 0\n        gridOuter.fill(INF, 0, len);\n        gridInner.fill(0, 0, len);\n\n        for (let y = 0; y < glyphHeight; y++) {\n            for (let x = 0; x < glyphWidth; x++) {\n                const a = imgData.data[4 * (y * glyphWidth + x) + 3] / 255; // alpha value\n                if (a === 0) continue; // empty pixels\n\n                const j = (y + buffer) * width + x + buffer;\n\n                if (a === 1) { // fully drawn pixels\n                    gridOuter[j] = 0;\n                    gridInner[j] = INF;\n\n                } else { // aliased pixels\n                    const d = 0.5 - a;\n                    gridOuter[j] = d > 0 ? d * d : 0;\n                    gridInner[j] = d < 0 ? d * d : 0;\n                }\n            }\n        }\n\n        edt(gridOuter, 0, 0, width, height, width, this.f, this.v, this.z);\n        edt(gridInner, buffer, buffer, glyphWidth, glyphHeight, width, this.f, this.v, this.z);\n\n        for (let i = 0; i < len; i++) {\n            const d = Math.sqrt(gridOuter[i]) - Math.sqrt(gridInner[i]);\n            data[i] = Math.round(255 - 255 * (d / this.radius + this.cutoff));\n        }\n\n        return glyph;\n    }\n}\n\n// 2D Euclidean squared distance transform by Felzenszwalb & Huttenlocher https://cs.brown.edu/~pff/papers/dt-final.pdf\nfunction edt(data, x0, y0, width, height, gridSize, f, v, z) {\n    for (let x = x0; x < x0 + width; x++) edt1d(data, y0 * gridSize + x, gridSize, height, f, v, z);\n    for (let y = y0; y < y0 + height; y++) edt1d(data, y * gridSize + x0, 1, width, f, v, z);\n}\n\n// 1D squared distance transform\nfunction edt1d(grid, offset, stride, length, f, v, z) {\n    v[0] = 0;\n    z[0] = -INF;\n    z[1] = INF;\n    f[0] = grid[offset];\n\n    for (let q = 1, k = 0, s = 0; q < length; q++) {\n        f[q] = grid[offset + q * stride];\n        const q2 = q * q;\n        do {\n            const r = v[k];\n            s = (f[q] - f[r] + q2 - r * r) / (q - r) / 2;\n        } while (s <= z[k] && --k > -1);\n\n        k++;\n        v[k] = q;\n        z[k] = s;\n        z[k + 1] = INF;\n    }\n\n    for (let q = 0, k = 0; q < length; q++) {\n        while (z[k + 1] < q) k++;\n        const r = v[k];\n        const qr = q - r;\n        grid[offset + q * stride] = f[r] + qr * qr;\n    }\n}\n", "/* eslint-disable max-statements, max-params, complexity, max-depth */\n// TODO merge with icon-layer/icon-manager\nimport {log} from '@deck.gl/core';\nimport type {NumericArray} from '@math.gl/core';\n\nconst MISSING_CHAR_WIDTH = 32;\nconst SINGLE_LINE = [];\n\nexport type Character = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  layoutWidth: number;\n  layoutHeight: number;\n  layoutOffsetY?: number;\n};\n\nexport type CharacterMapping = Record<string, Character>;\n\nexport function nextPowOfTwo(number: number): number {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\n/**\n * Generate character mapping table or update from an existing mapping table\n */\nexport function buildMapping({\n  characterSet,\n  getFontWidth,\n  fontHeight,\n  buffer,\n  maxCanvasWidth,\n  mapping = {},\n  xOffset = 0,\n  yOffset = 0\n}: {\n  /** list of characters */\n  characterSet: Set<string>;\n  /** function to get width of each character */\n  getFontWidth: (char: string) => number;\n  /** height of font */\n  fontHeight: number;\n  /** bleeding buffer surround each character */\n  buffer: number;\n  /** max width of font atlas */\n  maxCanvasWidth: number;\n  /** cached mapping table */\n  mapping?: CharacterMapping;\n  /** x position of last character in the existing mapping table */\n  xOffset?: number;\n  /** y position of last character in the existing mapping table */\n  yOffset?: number;\n}): {\n  /** new mapping table */\n  mapping: CharacterMapping;\n  /** x position of last character in the new mapping table */\n  xOffset: number;\n  /** y position of last character in the new mapping table */\n  yOffset: number;\n  /** height of the font atlas canvas, power of 2 */\n  canvasHeight: number;\n} {\n  let row = 0;\n  // continue from x position of last character in the old mapping\n  let x = xOffset;\n  const rowHeight = fontHeight + buffer * 2;\n\n  for (const char of characterSet) {\n    if (!mapping[char]) {\n      // measure texts\n      // TODO - use Advanced text metrics when they are adopted:\n      // https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics\n      const width = getFontWidth(char);\n\n      if (x + width + buffer * 2 > maxCanvasWidth) {\n        x = 0;\n        row++;\n      }\n      mapping[char] = {\n        x: x + buffer,\n        y: yOffset + row * rowHeight + buffer,\n        width,\n        height: rowHeight,\n        layoutWidth: width,\n        layoutHeight: fontHeight\n      };\n      x += width + buffer * 2;\n    }\n  }\n\n  return {\n    mapping,\n    xOffset: x,\n    yOffset: yOffset + row * rowHeight,\n    canvasHeight: nextPowOfTwo(yOffset + (row + 1) * rowHeight)\n  };\n}\n\nfunction getTextWidth(\n  text: string[],\n  startIndex: number,\n  endIndex: number,\n  mapping: CharacterMapping\n): number {\n  let width = 0;\n  for (let i = startIndex; i < endIndex; i++) {\n    const character = text[i];\n    width += mapping[character]?.layoutWidth || 0;\n  }\n\n  return width;\n}\n\nfunction breakAll(\n  text: string[],\n  startIndex: number,\n  endIndex: number,\n  maxWidth: number,\n  iconMapping: CharacterMapping,\n  target: number[]\n): number {\n  let rowStartCharIndex = startIndex;\n  let rowOffsetLeft = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    // 2. figure out where to break lines\n    const textWidth = getTextWidth(text, i, i + 1, iconMapping);\n    if (rowOffsetLeft + textWidth > maxWidth) {\n      if (rowStartCharIndex < i) {\n        target.push(i);\n      }\n      rowStartCharIndex = i;\n      rowOffsetLeft = 0;\n    }\n    rowOffsetLeft += textWidth;\n  }\n\n  return rowOffsetLeft;\n}\n\nfunction breakWord(\n  text: string[],\n  startIndex: number,\n  endIndex: number,\n  maxWidth: number,\n  iconMapping: CharacterMapping,\n  target: number[]\n): number {\n  let rowStartCharIndex = startIndex;\n  let groupStartCharIndex = startIndex;\n  let groupEndCharIndex = startIndex;\n  let rowOffsetLeft = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    // 1. break text into word groups\n    //  - if current char is white space\n    //  - else if next char is white space\n    //  - else if reach last char\n    if (text[i] === ' ') {\n      groupEndCharIndex = i + 1;\n    } else if (text[i + 1] === ' ' || i + 1 === endIndex) {\n      groupEndCharIndex = i + 1;\n    }\n\n    if (groupEndCharIndex > groupStartCharIndex) {\n      // 2. break text into next row at maxWidth\n      let groupWidth = getTextWidth(text, groupStartCharIndex, groupEndCharIndex, iconMapping);\n      if (rowOffsetLeft + groupWidth > maxWidth) {\n        if (rowStartCharIndex < groupStartCharIndex) {\n          target.push(groupStartCharIndex);\n          rowStartCharIndex = groupStartCharIndex;\n          rowOffsetLeft = 0;\n        }\n\n        // if a single text group is bigger than maxWidth, then `break-all`\n        if (groupWidth > maxWidth) {\n          groupWidth = breakAll(\n            text,\n            groupStartCharIndex,\n            groupEndCharIndex,\n            maxWidth,\n            iconMapping,\n            target\n          );\n          // move reference to last row\n          rowStartCharIndex = target[target.length - 1];\n        }\n      }\n      groupStartCharIndex = groupEndCharIndex;\n      rowOffsetLeft += groupWidth;\n    }\n  }\n\n  return rowOffsetLeft;\n}\n\n/**\n * Wrap the given text so that each line does not exceed the given max width.\n * Returns a list of indices where line breaks should be inserted.\n */\nexport function autoWrapping(\n  text: string[],\n  wordBreak: 'break-all' | 'break-word',\n  maxWidth: number,\n  iconMapping: CharacterMapping,\n  startIndex: number = 0,\n  endIndex: number\n): number[] {\n  if (endIndex === undefined) {\n    endIndex = text.length;\n  }\n  const result = [];\n  if (wordBreak === 'break-all') {\n    breakAll(text, startIndex, endIndex, maxWidth, iconMapping, result);\n  } else {\n    breakWord(text, startIndex, endIndex, maxWidth, iconMapping, result);\n  }\n  return result;\n}\n\nfunction transformRow(\n  line: string[],\n  startIndex: number,\n  endIndex: number,\n  iconMapping: CharacterMapping,\n  leftOffsets: number[],\n  rowSize: [number, number]\n) {\n  let x = 0;\n  let rowHeight = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    const character = line[i];\n    const frame = iconMapping[character];\n    if (frame) {\n      if (!rowHeight) {\n        // frame.height should be a constant\n        rowHeight = frame.layoutHeight;\n      }\n      leftOffsets[i] = x + frame.layoutWidth / 2;\n      x += frame.layoutWidth;\n    } else {\n      log.warn(`Missing character: ${character} (${character.codePointAt(0)})`)();\n      leftOffsets[i] = x;\n      x += MISSING_CHAR_WIDTH;\n    }\n  }\n\n  rowSize[0] = x;\n  rowSize[1] = rowHeight;\n}\n\n/**\n * Transform a text paragraph to an array of characters, each character contains\n */\nexport function transformParagraph(\n  paragraph: string,\n  /** CSS line-height */\n  lineHeight: number,\n  /** CSS word-break option */\n  wordBreak: 'break-word' | 'break-all',\n  /** CSS max-width */\n  maxWidth: number,\n  /** character mapping table for retrieving a character from font atlas */\n  iconMapping: CharacterMapping\n): {\n  /** x position of each character */\n  x: number[];\n  /** y position of each character */\n  y: number[];\n  /** the current row width of each character */\n  rowWidth: number[];\n  /** the width and height of the paragraph */\n  size: [number, number];\n} {\n  // Break into an array of characters\n  // When dealing with double-length unicode characters, `str.length` or `str[i]` do not work\n  const characters = Array.from(paragraph);\n  const numCharacters = characters.length;\n  const x = new Array(numCharacters) as number[];\n  const y = new Array(numCharacters) as number[];\n  const rowWidth = new Array(numCharacters) as number[];\n  const autoWrappingEnabled =\n    (wordBreak === 'break-word' || wordBreak === 'break-all') && isFinite(maxWidth) && maxWidth > 0;\n\n  // maxWidth and height of the paragraph\n  const size: [number, number] = [0, 0];\n  const rowSize: [number, number] = [0, 0];\n  let rowOffsetTop = 0;\n  let lineStartIndex = 0;\n  let lineEndIndex = 0;\n\n  for (let i = 0; i <= numCharacters; i++) {\n    const char = characters[i];\n    if (char === '\\n' || i === numCharacters) {\n      lineEndIndex = i;\n    }\n\n    if (lineEndIndex > lineStartIndex) {\n      const rows = autoWrappingEnabled\n        ? autoWrapping(characters, wordBreak, maxWidth, iconMapping, lineStartIndex, lineEndIndex)\n        : SINGLE_LINE;\n\n      for (let rowIndex = 0; rowIndex <= rows.length; rowIndex++) {\n        const rowStart = rowIndex === 0 ? lineStartIndex : rows[rowIndex - 1];\n        const rowEnd = rowIndex < rows.length ? rows[rowIndex] : lineEndIndex;\n\n        transformRow(characters, rowStart, rowEnd, iconMapping, x, rowSize);\n        for (let j = rowStart; j < rowEnd; j++) {\n          const char = characters[j];\n          const layoutOffsetY = iconMapping[char]?.layoutOffsetY || 0;\n          y[j] = rowOffsetTop + rowSize[1] / 2 + layoutOffsetY;\n          rowWidth[j] = rowSize[0];\n        }\n\n        rowOffsetTop = rowOffsetTop + rowSize[1] * lineHeight;\n        size[0] = Math.max(size[0], rowSize[0]);\n      }\n      lineStartIndex = lineEndIndex;\n    }\n\n    if (char === '\\n') {\n      // Make sure result.length matches paragraph.length\n      x[lineStartIndex] = 0;\n      y[lineStartIndex] = 0;\n      rowWidth[lineStartIndex] = 0;\n      lineStartIndex++;\n    }\n  }\n\n  // last row\n  size[1] = rowOffsetTop;\n  return {x, y, rowWidth, size};\n}\n\nexport function getTextFromBuffer({\n  value,\n  length,\n  stride,\n  offset,\n  startIndices,\n  characterSet\n}: {\n  value: Uint8Array | Uint8ClampedArray | Uint16Array | Uint32Array;\n  length: number;\n  stride?: number;\n  offset?: number;\n  startIndices: NumericArray;\n  characterSet?: Set<string>;\n}): {\n  texts: string[];\n  characterCount: number;\n} {\n  const bytesPerElement = value.BYTES_PER_ELEMENT;\n  const elementStride = stride ? stride / bytesPerElement : 1;\n  const elementOffset = offset ? offset / bytesPerElement : 0;\n  const characterCount =\n    startIndices[length] || Math.ceil((value.length - elementOffset) / elementStride);\n  const autoCharacterSet = characterSet && new Set<number>();\n\n  const texts = new Array(length);\n\n  let codes = value;\n  if (elementStride > 1 || elementOffset > 0) {\n    const ArrayType = value.constructor as\n      | Uint8ArrayConstructor\n      | Uint8ClampedArrayConstructor\n      | Uint16ArrayConstructor\n      | Uint32ArrayConstructor;\n    codes = new ArrayType(characterCount);\n    for (let i = 0; i < characterCount; i++) {\n      codes[i] = value[i * elementStride + elementOffset];\n    }\n  }\n\n  for (let index = 0; index < length; index++) {\n    const startIndex = startIndices[index];\n    const endIndex = startIndices[index + 1] || characterCount;\n    const codesAtIndex = codes.subarray(startIndex, endIndex);\n    // @ts-ignore TS wants the argument to be number[] but typed array works too\n    texts[index] = String.fromCodePoint.apply(null, codesAtIndex);\n    if (autoCharacterSet) {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      codesAtIndex.forEach(autoCharacterSet.add, autoCharacterSet);\n    }\n  }\n\n  if (autoCharacterSet) {\n    for (const charCode of autoCharacterSet) {\n      characterSet.add(String.fromCodePoint(charCode));\n    }\n  }\n\n  return {texts, characterCount};\n}\n", "/**\n * LRU Cache class with limit\n *\n * Update order for each get/set operation\n * Delete oldest when reach given limit\n */\n\nexport default class LRUCache<ValueT> {\n  private limit: number;\n  private _cache: Record<string, ValueT> = {};\n  /** access/update order, first item is oldest, last item is newest */\n  private _order: string[] = [];\n\n  constructor(limit: number = 5) {\n    this.limit = limit;\n  }\n\n  get(key: string): ValueT {\n    const value = this._cache[key];\n    if (value) {\n      // update order\n      this._deleteOrder(key);\n      this._appendOrder(key);\n    }\n    return value;\n  }\n\n  set(key: string, value: ValueT): void {\n    if (!this._cache[key]) {\n      // if reach limit, delete the oldest\n      if (Object.keys(this._cache).length === this.limit) {\n        this.delete(this._order[0]);\n      }\n\n      this._cache[key] = value;\n      this._appendOrder(key);\n    } else {\n      // if found in cache, delete the old one, insert new one to the first of list\n      this.delete(key);\n\n      this._cache[key] = value;\n      this._appendOrder(key);\n    }\n  }\n\n  delete(key: string): void {\n    const value = this._cache[key];\n    if (value) {\n      delete this._cache[key];\n      this._deleteOrder(key);\n    }\n  }\n\n  private _deleteOrder(key: string): void {\n    const index = this._order.indexOf(key);\n    if (index >= 0) {\n      this._order.splice(index, 1);\n    }\n  }\n\n  private _appendOrder(key: string): void {\n    this._order.push(key);\n  }\n}\n", "/* global document */\nimport TinySDF from '@mapbox/tiny-sdf';\n\nimport {log} from '@deck.gl/core';\n\nimport {buildMapping, CharacterMapping} from './utils';\nimport LRUCache from './lru-cache';\n\nimport type {Texture} from '@deck.gl/core';\n\nfunction getDefaultCharacterSet() {\n  const charSet: string[] = [];\n  for (let i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n  return charSet;\n}\n\nexport type FontSettings = {\n  /** CSS font family\n   * @default 'Monaco, monospace'\n   */\n  fontFamily?: string;\n  /** CSS font weight\n   * @default 'normal'\n   */\n  fontWeight?: string | number;\n  /** Specifies a list of characters to include in the font.\n   * @default (ASCII characters 32-128)\n   */\n  characterSet?: Set<string> | string[] | string;\n  /** Font size in pixels. This option is only applied for generating `fontAtlas`, it does not impact the size of displayed text labels. Larger `fontSize` will give you a sharper look when rendering text labels with very large font sizes. But larger `fontSize` requires more time and space to generate the `fontAtlas`.\n   * @default 64\n   */\n  fontSize?: number;\n  /** Whitespace buffer around each side of the character. In general, bigger `fontSize` requires bigger `buffer`. Increase `buffer` will add more space between each character when layout `characterSet` in `fontAtlas`. This option could be tuned to provide sufficient space for drawing each character and avoiding overlapping of neighboring characters.\n   * @default 4\n   */\n  buffer?: number;\n  /** Flag to enable / disable `sdf`. [`sdf` (Signed Distance Fields)](http://cs.brown.edu/people/pfelzens/papers/dt-final.pdf) will provide a sharper look when rendering with very large or small font sizes. `TextLayer` integrates with [`TinySDF`](https://github.com/mapbox/tiny-sdf) which implements the `sdf` algorithm.\n   * @default false\n   */\n  sdf?: boolean;\n  /** How much of the radius (relative) is used for the inside part the glyph. Bigger `cutoff` makes character thinner. Smaller `cutoff` makes character look thicker. Only applies when `sdf: true`.\n   * @default 0.25\n   */\n  cutoff?: number;\n  /** How many pixels around the glyph shape to use for encoding distance. Bigger radius yields higher quality outcome. Only applies when `sdf: true`.\n   * @default 12\n   */\n  radius?: number;\n  /** How much smoothing to apply to the text edges. Only applies when `sdf: true`.\n   * @default 0.1\n   */\n  smoothing?: number;\n};\n\nexport const DEFAULT_FONT_SETTINGS: Required<FontSettings> = {\n  fontFamily: 'Monaco, monospace',\n  fontWeight: 'normal',\n  characterSet: getDefaultCharacterSet(),\n  fontSize: 64,\n  buffer: 4,\n  sdf: false,\n  cutoff: 0.25,\n  radius: 12,\n  smoothing: 0.1\n};\n\nconst MAX_CANVAS_WIDTH = 1024;\n\nconst BASELINE_SCALE = 0.9;\nconst HEIGHT_SCALE = 1.2;\n\n// only preserve latest three fontAtlas\nconst CACHE_LIMIT = 3;\n\ntype FontAtlas = {\n  /** x position of last character in mapping */\n  xOffset: number;\n  /** y position of last character in mapping */\n  yOffset: number;\n  /** bounding box of each character in the texture */\n  mapping: CharacterMapping;\n  /** packed texture */\n  data: HTMLCanvasElement;\n  /** texture width */\n  width: number;\n  /** texture height */\n  height: number;\n};\n\nlet cache = new LRUCache<FontAtlas>(CACHE_LIMIT);\n\n/**\n * get all the chars not in cache\n * @returns chars not in cache\n */\nfunction getNewChars(cacheKey: string, characterSet: Set<string> | string[] | string): Set<string> {\n  let newCharSet: Set<string>;\n  if (typeof characterSet === 'string') {\n    newCharSet = new Set(Array.from(characterSet));\n  } else {\n    newCharSet = new Set(characterSet);\n  }\n\n  const cachedFontAtlas = cache.get(cacheKey);\n  if (!cachedFontAtlas) {\n    return newCharSet;\n  }\n\n  for (const char in cachedFontAtlas.mapping) {\n    if (newCharSet.has(char)) {\n      newCharSet.delete(char);\n    }\n  }\n  return newCharSet;\n}\n\nfunction populateAlphaChannel(alphaChannel: Uint8ClampedArray, imageData: ImageData): void {\n  // populate distance value from tinySDF to image alpha channel\n  for (let i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\n\nfunction setTextStyle(\n  ctx: CanvasRenderingContext2D,\n  fontFamily: string,\n  fontSize: number,\n  fontWeight: string | number\n): void {\n  ctx.font = `${fontWeight} ${fontSize}px ${fontFamily}`;\n  ctx.fillStyle = '#000';\n  ctx.textBaseline = 'alphabetic';\n  ctx.textAlign = 'left';\n}\n\n/**\n * Sets the Font Atlas LRU Cache Limit\n * @param {number} limit LRU Cache limit\n */\nexport function setFontAtlasCacheLimit(limit: number): void {\n  log.assert(Number.isFinite(limit) && limit >= CACHE_LIMIT, 'Invalid cache limit');\n\n  cache = new LRUCache(limit);\n}\n\nexport default class FontAtlasManager {\n  /** Font settings */\n  props: Required<FontSettings> = {...DEFAULT_FONT_SETTINGS};\n\n  /** Cache key of the current font atlas */\n  private _key?: string;\n  /** The current font atlas */\n  private _atlas?: FontAtlas;\n\n  get texture(): Texture | undefined {\n    return this._atlas;\n  }\n\n  get mapping(): CharacterMapping | undefined {\n    return this._atlas && this._atlas.mapping;\n  }\n\n  get scale(): number {\n    const {fontSize, buffer} = this.props;\n    return (fontSize * HEIGHT_SCALE + buffer * 2) / fontSize;\n  }\n\n  setProps(props: FontSettings = {}) {\n    Object.assign(this.props, props);\n\n    // update cache key\n    this._key = this._getKey();\n\n    const charSet = getNewChars(this._key, this.props.characterSet);\n    const cachedFontAtlas = cache.get(this._key);\n\n    // if a fontAtlas associated with the new settings is cached and\n    // there are no new chars\n    if (cachedFontAtlas && charSet.size === 0) {\n      // update texture with cached fontAtlas\n      if (this._atlas !== cachedFontAtlas) {\n        this._atlas = cachedFontAtlas;\n      }\n      return;\n    }\n\n    // update fontAtlas with new settings\n    const fontAtlas = this._generateFontAtlas(charSet, cachedFontAtlas);\n    this._atlas = fontAtlas;\n\n    // update cache\n    cache.set(this._key, fontAtlas);\n  }\n\n  // eslint-disable-next-line max-statements\n  private _generateFontAtlas(characterSet: Set<string>, cachedFontAtlas?: FontAtlas): FontAtlas {\n    const {fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    let canvas = cachedFontAtlas && cachedFontAtlas.data;\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.width = MAX_CANVAS_WIDTH;\n    }\n    const ctx = canvas.getContext('2d', {willReadFrequently: true})!;\n\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 1. build mapping\n    const {mapping, canvasHeight, xOffset, yOffset} = buildMapping({\n      getFontWidth: char => ctx.measureText(char).width,\n      fontHeight: fontSize * HEIGHT_SCALE,\n      buffer,\n      characterSet,\n      maxCanvasWidth: MAX_CANVAS_WIDTH,\n      ...(cachedFontAtlas && {\n        mapping: cachedFontAtlas.mapping,\n        xOffset: cachedFontAtlas.xOffset,\n        yOffset: cachedFontAtlas.yOffset\n      })\n    });\n\n    // 2. update canvas\n    // copy old canvas data to new canvas only when height changed\n    if (canvas.height !== canvasHeight) {\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      canvas.height = canvasHeight;\n      ctx.putImageData(imageData, 0, 0);\n    }\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 3. layout characters\n    if (sdf) {\n      const tinySDF = new TinySDF({\n        fontSize,\n        buffer,\n        radius,\n        cutoff,\n        fontFamily,\n        fontWeight: `${fontWeight}`\n      });\n\n      for (const char of characterSet) {\n        const {data, width, height, glyphTop} = tinySDF.draw(char);\n        mapping[char].width = width;\n        mapping[char].layoutOffsetY = fontSize * BASELINE_SCALE - glyphTop;\n\n        const imageData = ctx.createImageData(width, height);\n        populateAlphaChannel(data, imageData);\n        ctx.putImageData(imageData, mapping[char].x, mapping[char].y);\n      }\n    } else {\n      for (const char of characterSet) {\n        ctx.fillText(char, mapping[char].x, mapping[char].y + buffer + fontSize * BASELINE_SCALE);\n      }\n    }\n\n    return {\n      xOffset,\n      yOffset,\n      mapping,\n      data: canvas,\n      width: canvas.width,\n      height: canvas.height\n    };\n  }\n\n  private _getKey(): string {\n    const {fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    if (sdf) {\n      return `${fontFamily} ${fontWeight} ${fontSize} ${buffer} ${radius} ${cutoff}`;\n    }\n    return `${fontFamily} ${fontWeight} ${fontSize} ${buffer}`;\n  }\n}\n", "export default `\\\n#define SHADER_NAME text-background-layer-vertex-shader\n\nattribute vec2 positions;\n\nattribute vec3 instancePositions;\nattribute vec3 instancePositions64Low;\nattribute vec4 instanceRects;\nattribute float instanceSizes;\nattribute float instanceAngles;\nattribute vec2 instancePixelOffsets;\nattribute float instanceLineWidths;\nattribute vec4 instanceFillColors;\nattribute vec4 instanceLineColors;\nattribute vec3 instancePickingColors;\n\nuniform bool billboard;\nuniform float opacity;\nuniform float sizeScale;\nuniform float sizeMinPixels;\nuniform float sizeMaxPixels;\nuniform vec4 padding;\nuniform int sizeUnits;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying float vLineWidth;\nvarying vec2 uv;\nvarying vec2 dimensions;\n\nvec2 rotate_by_angle(vec2 vertex, float angle) {\n  float angle_radian = radians(angle);\n  float cos_angle = cos(angle_radian);\n  float sin_angle = sin(angle_radian);\n  mat2 rotationMatrix = mat2(cos_angle, -sin_angle, sin_angle, cos_angle);\n  return rotationMatrix * vertex;\n}\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n  geometry.uv = positions;\n  geometry.pickingColor = instancePickingColors;\n  uv = positions;\n  vLineWidth = instanceLineWidths;\n\n  // convert size in meters to pixels, then scaled and clamp\n\n  // project meters to pixels and clamp to limits\n  float sizePixels = clamp(\n    project_size_to_pixel(instanceSizes * sizeScale, sizeUnits),\n    sizeMinPixels, sizeMaxPixels\n  );\n\n  dimensions = instanceRects.zw * sizePixels + padding.xy + padding.zw;\n\n  vec2 pixelOffset = (positions * instanceRects.zw + instanceRects.xy) * sizePixels + mix(-padding.xy, padding.zw, positions);\n  pixelOffset = rotate_by_angle(pixelOffset, instanceAngles);\n  pixelOffset += instancePixelOffsets;\n  pixelOffset.y *= -1.0;\n\n  if (billboard)  {\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n    vec3 offset = vec3(pixelOffset, 0.0);\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);\n  } else {\n    vec3 offset_common = vec3(project_pixel_size(pixelOffset), 0.0);\n    DECKGL_FILTER_SIZE(offset_common, geometry);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset_common, geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  }\n\n  // Apply opacity to instance color, or return instance picking color\n  vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * opacity);\n  DECKGL_FILTER_COLOR(vFillColor, geometry);\n  vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * opacity);\n  DECKGL_FILTER_COLOR(vLineColor, geometry);\n}\n`;\n", "export default `\\\n#define SHADER_NAME text-background-layer-fragment-shader\n\nprecision highp float;\n\nuniform bool stroked;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying float vLineWidth;\nvarying vec2 uv;\nvarying vec2 dimensions;\n\nvoid main(void) {\n  geometry.uv = uv;\n\n  vec2 pixelPosition = uv * dimensions;\n  if (stroked) {\n    float distToEdge = min(\n      min(pixelPosition.x, dimensions.x - pixelPosition.x),\n      min(pixelPosition.y, dimensions.y - pixelPosition.y)\n    );\n    float isBorder = smoothedge(distToEdge, vLineWidth);\n    gl_FragColor = mix(vFillColor, vLineColor, isBorder);\n  } else {\n    gl_FragColor = vFillColor;\n  }\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n", "import {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './text-background-layer-vertex.glsl';\nimport fs from './text-background-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  Accessor,\n  Unit,\n  Position,\n  Color,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\n\ntype _TextBackgroundLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  billboard?: boolean;\n  sizeScale?: number;\n  sizeUnits?: Unit;\n  sizeMinPixels?: number;\n  sizeMaxPixels?: number;\n\n  padding?: [number, number] | [number, number, number, number];\n\n  getPosition?: Accessor<DataT, Position>;\n  getSize?: Accessor<DataT, number>;\n  getAngle?: Accessor<DataT, number>;\n  getPixelOffset?: Accessor<DataT, [number, number]>;\n  getBoundingRect?: Accessor<DataT, [number, number, number, number]>;\n  getFillColor?: Accessor<DataT, Color>;\n  getLineColor?: Accessor<DataT, Color>;\n  getLineWidth?: Accessor<DataT, number>;\n};\n\nexport type TextBackgroundLayerProps<DataT = any> = _TextBackgroundLayerProps<DataT> & LayerProps;\n\nconst defaultProps: DefaultProps<TextBackgroundLayerProps> = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  padding: {type: 'array', value: [0, 0, 0, 0]},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n  getBoundingRect: {type: 'accessor', value: [0, 0, 0, 0]},\n  getFillColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineWidth: {type: 'accessor', value: 1}\n};\n\nexport default class TextBackgroundLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_TextBackgroundLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'TextBackgroundLayer';\n\n  state!: {\n    model: Model;\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.getAttributeManager()!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instanceRects: {\n        size: 4,\n        accessor: 'getBoundingRect'\n      },\n      instancePixelOffsets: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      },\n      instanceFillColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {changeFlags} = params;\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {billboard, sizeScale, sizeUnits, sizeMinPixels, sizeMaxPixels, getLineWidth} =\n      this.props;\n    let {padding} = this.props;\n\n    if (padding.length < 4) {\n      padding = [padding[0], padding[1], padding[0], padding[1]];\n    }\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        billboard,\n        stroked: Boolean(getLineWidth),\n        padding,\n        sizeUnits: UNIT[sizeUnits],\n        sizeScale,\n        sizeMinPixels,\n        sizeMaxPixels\n      })\n      .draw();\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    // a square that minimally cover the unit circle\n    const positions = [0, 0, 1, 0, 1, 1, 0, 1];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount: 4,\n        attributes: {\n          positions: {size: 2, value: new Float32Array(positions)}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, createIterable, log} from '@deck.gl/core';\nimport MultiIconLayer from './multi-icon-layer/multi-icon-layer';\nimport FontAtlasManager, {\n  DEFAULT_FONT_SETTINGS,\n  setFontAtlasCacheLimit\n} from './font-atlas-manager';\nimport {transformParagraph, getTextFromBuffer} from './utils';\n\nimport TextBackgroundLayer from './text-background-layer/text-background-layer';\n\nimport type {FontSettings} from './font-atlas-manager';\nimport type {\n  LayerProps,\n  LayerDataSource,\n  Accessor,\n  AccessorFunction,\n  AccessorContext,\n  Unit,\n  Position,\n  Color,\n  UpdateParameters,\n  GetPickingInfoParams,\n  PickingInfo,\n  DefaultProps\n} from '@deck.gl/core';\n\nconst TEXT_ANCHOR = {\n  start: 1,\n  middle: 0,\n  end: -1\n} as const;\n\nconst ALIGNMENT_BASELINE = {\n  top: 1,\n  center: 0,\n  bottom: -1\n} as const;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst DEFAULT_LINE_HEIGHT = 1.0;\n\ntype _TextLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /** If `true`, the text always faces camera. Otherwise the text faces up (z).\n   * @default true\n   */\n  billboard?: boolean;\n  /**\n   * Text size multiplier.\n   * @default 1\n   */\n  sizeScale?: number;\n  /**\n   * The units of the size, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'pixels'\n   */\n  sizeUnits?: Unit;\n  /**\n   * The minimum size in pixels. When using non-pixel `sizeUnits`, this prop can be used to prevent the icon from getting too small when zoomed out.\n   * @default 0\n   */\n  sizeMinPixels?: number;\n  /**\n   * The maximum size in pixels. When using non-pixel `sizeUnits`, this prop can be used to prevent the icon from getting too big when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  sizeMaxPixels?: number;\n\n  /** Whether to render background for the text blocks.\n   * @default false\n   */\n  background?: boolean;\n  /** Background color accessor.\n   * @default [255, 255, 255, 255]\n   */\n  getBackgroundColor?: Accessor<DataT, Color>;\n  /** Border color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getBorderColor?: Accessor<DataT, Color>;\n  /** Border width accessor.\n   * @default 0\n   */\n  getBorderWidth?: Accessor<DataT, number>;\n  /**\n   * The padding of the background..\n   * If an array of 2 is supplied, it is interpreted as `[padding_x, padding_y]` in pixels.\n   * If an array of 4 is supplied, it is interpreted as `[padding_left, padding_top, padding_right, padding_bottom]` in pixels.\n   * @default [0, 0, 0, 0]\n   */\n  backgroundPadding?: [number, number] | [number, number, number, number];\n  /**\n   * Specifies a list of characters to include in the font. If set to 'auto', will be automatically generated from the data set.\n   * @default (ASCII characters 32-128)\n   */\n  characterSet?: FontSettings['characterSet'] | 'auto';\n  /** CSS font family\n   * @default 'Monaco, monospace'\n   */\n  fontFamily?: FontSettings['fontFamily'];\n  /** CSS font weight\n   * @default 'normal'\n   */\n  fontWeight?: FontSettings['fontWeight'];\n  /** A unitless number that will be multiplied with the current text size to set the line height.\n   * @default 'normal'\n   */\n  lineHeight?: number;\n  /**\n   * Width of outline around the text, relative to the text size. Only effective if `fontSettings.sdf` is `true`.\n   * @default 0\n   */\n  outlineWidth?: number;\n  /**\n   * Color of outline around the text, in `[r, g, b, [a]]`. Each channel is a number between 0-255 and `a` is 255 if not supplied.\n   * @default [0, 0, 0, 255]\n   */\n  outlineColor?: Color;\n  /**\n   * Advance options for fine tuning the appearance and performance of the generated shared `fontAtlas`.\n   */\n  fontSettings?: FontSettings;\n  /**\n   * Available options are `break-all` and `break-word`. A valid `maxWidth` has to be provided to use `wordBreak`.\n   * @default 'break-word'\n   */\n  wordBreak?: 'break-word' | 'break-all';\n  /**\n   * A unitless number that will be multiplied with the current text size to set the width limit of a string.\n   * If specified, when the text is longer than the width limit, it will be wrapped into multiple lines using\n   * the strategy of `wordBreak`.\n   * @default -1\n   */\n  maxWidth?: number;\n  /**\n   * Label text accessor\n   */\n  getText?: AccessorFunction<DataT, string>;\n  /**\n   * Anchor position accessor\n   */\n  getPosition?: Accessor<DataT, Position>;\n  /**\n   * Label color accessor\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n  /**\n   * Label size accessor\n   * @default 32\n   */\n  getSize?: Accessor<DataT, number>;\n  /**\n   * Label rotation accessor, in degrees\n   * @default 0\n   */\n  getAngle?: Accessor<DataT, number>;\n  /**\n   * Horizontal alignment accessor\n   * @default 'middle'\n   */\n  getTextAnchor?: Accessor<DataT, 'start' | 'middle' | 'end'>;\n  /**\n   * Vertical alignment accessor\n   * @default 'center'\n   */\n  getAlignmentBaseline?: Accessor<DataT, 'top' | 'center' | 'bottom'>;\n  /**\n   * Label offset from the anchor position, [x, y] in pixels\n   * @default [0, 0]\n   */\n  getPixelOffset?: Accessor<DataT, [number, number]>;\n  /**\n   * @deprecated Use `background` and `getBackgroundColor` instead\n   */\n  backgroundColor?: Color;\n};\n\nexport type TextLayerProps<DataT = any> = _TextLayerProps<DataT> & LayerProps;\n\nconst defaultProps: DefaultProps<TextLayerProps> = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  background: false,\n  getBackgroundColor: {type: 'accessor', value: [255, 255, 255, 255]},\n  getBorderColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getBorderWidth: {type: 'accessor', value: 0},\n  backgroundPadding: {type: 'array', value: [0, 0, 0, 0]},\n\n  characterSet: {type: 'object', value: DEFAULT_FONT_SETTINGS.characterSet},\n  fontFamily: DEFAULT_FONT_SETTINGS.fontFamily,\n  fontWeight: DEFAULT_FONT_SETTINGS.fontWeight,\n  lineHeight: DEFAULT_LINE_HEIGHT,\n  outlineWidth: {type: 'number', value: 0, min: 0},\n  outlineColor: {type: 'color', value: DEFAULT_COLOR},\n  fontSettings: {type: 'object', value: {}, compare: 1},\n\n  // auto wrapping options\n  wordBreak: 'break-word',\n  maxWidth: {type: 'number', value: -1},\n\n  getText: {type: 'accessor', value: x => x.text},\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 32},\n  getAngle: {type: 'accessor', value: 0},\n  getTextAnchor: {type: 'accessor', value: 'middle'},\n  getAlignmentBaseline: {type: 'accessor', value: 'center'},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n\n  // deprecated\n  backgroundColor: {deprecatedFor: ['background', 'getBackgroundColor']}\n};\n\n/** Render text labels at given coordinates. */\nexport default class TextLayer<DataT = any, ExtraPropsT extends {} = {}> extends CompositeLayer<\n  ExtraPropsT & Required<_TextLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'TextLayer';\n\n  state!: {\n    styleVersion: number;\n    fontAtlasManager: FontAtlasManager;\n    characterSet?: Set<string>;\n    startIndices?: number[];\n    numInstances?: number;\n    getText?: AccessorFunction<DataT, string>;\n  };\n\n  initializeState() {\n    this.state = {\n      styleVersion: 0,\n      fontAtlasManager: new FontAtlasManager()\n    };\n\n    // Breaking change in v8.9\n    if (this.props.maxWidth > 0) {\n      log.warn('v8.9 breaking change: TextLayer maxWidth is now relative to text size')();\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  updateState(params: UpdateParameters<this>) {\n    const {props, oldProps, changeFlags} = params;\n    const textChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText));\n\n    if (textChanged) {\n      this._updateText();\n    }\n\n    const fontChanged = this._updateFontAtlas();\n\n    const styleChanged =\n      fontChanged ||\n      props.lineHeight !== oldProps.lineHeight ||\n      props.wordBreak !== oldProps.wordBreak ||\n      props.maxWidth !== oldProps.maxWidth;\n\n    if (styleChanged) {\n      this.setState({\n        styleVersion: this.state.styleVersion + 1\n      });\n    }\n  }\n\n  getPickingInfo({info}: GetPickingInfoParams): PickingInfo {\n    // because `TextLayer` assign the same pickingInfoIndex for one text label,\n    // here info.index refers the index of text label in props.data\n    info.object = info.index >= 0 ? this.props.data[info.index] : null;\n    return info;\n  }\n\n  /** Returns true if font has changed */\n  private _updateFontAtlas(): boolean {\n    const {fontSettings, fontFamily, fontWeight} = this.props;\n    const {fontAtlasManager, characterSet} = this.state;\n\n    const fontProps = {\n      ...fontSettings,\n      characterSet,\n      fontFamily,\n      fontWeight\n    };\n\n    if (!fontAtlasManager.mapping) {\n      // This is the first update\n      fontAtlasManager.setProps(fontProps);\n      return true;\n    }\n\n    for (const key in fontProps) {\n      if (fontProps[key] !== fontAtlasManager.props[key]) {\n        fontAtlasManager.setProps(fontProps);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // Text strings are variable width objects\n  // Count characters and start offsets\n  private _updateText() {\n    const {data, characterSet} = this.props;\n    const textBuffer = (data as any).attributes?.getText;\n    let {getText} = this.props;\n    let startIndices: number[] = (data as any).startIndices;\n    let numInstances: number;\n\n    const autoCharacterSet = characterSet === 'auto' && new Set();\n\n    if (textBuffer && startIndices) {\n      const {texts, characterCount} = getTextFromBuffer({\n        ...(ArrayBuffer.isView(textBuffer) ? {value: textBuffer} : textBuffer),\n        // @ts-ignore if data.attribute is defined then length is expected\n        length: data.length,\n        startIndices,\n        characterSet: autoCharacterSet\n      });\n      numInstances = characterCount;\n      getText = (_, {index}) => texts[index];\n    } else {\n      const {iterable, objectInfo} = createIterable(data);\n      startIndices = [0];\n      numInstances = 0;\n\n      for (const object of iterable) {\n        objectInfo.index++;\n        // Break into an array of characters\n        // When dealing with double-length unicode characters, `str.length` or `str[i]` do not work\n        const text = Array.from(getText(object, objectInfo) || '');\n        if (autoCharacterSet) {\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          text.forEach(autoCharacterSet.add, autoCharacterSet);\n        }\n        numInstances += text.length;\n        startIndices.push(numInstances);\n      }\n    }\n\n    this.setState({\n      getText,\n      startIndices,\n      numInstances,\n      characterSet: autoCharacterSet || characterSet\n    });\n  }\n\n  /** There are two size systems in this layer:\n\n    + Pixel size: user-specified text size, via getSize, sizeScale, sizeUnits etc.\n      The layer roughly matches the output of the layer to CSS pixels, e.g. getSize: 12, sizeScale: 2\n      in layer props is roughly equivalent to font-size: 24px in CSS.\n    + Texture size: internally, character positions in a text blob are calculated using the sizes of iconMapping,\n      which depends on how large each character is drawn into the font atlas. This is controlled by\n      fontSettings.fontSize (default 64) and most users do not set it manually.\n      These numbers are intended to be used in the vertex shader and never to be exposed to the end user.\n\n    All surfaces exposed to the user should either use the pixel size or a multiplier relative to the pixel size. */\n\n  /** Calculate the size and position of each character in a text string.\n   * Values are in texture size */\n  private transformParagraph(\n    object: DataT,\n    objectInfo: AccessorContext<DataT>\n  ): ReturnType<typeof transformParagraph> {\n    const {fontAtlasManager} = this.state;\n    const iconMapping = fontAtlasManager.mapping!;\n    const getText = this.state.getText!;\n    const {wordBreak, lineHeight, maxWidth} = this.props;\n\n    const paragraph = getText(object, objectInfo) || '';\n    return transformParagraph(\n      paragraph,\n      lineHeight,\n      wordBreak,\n      maxWidth * fontAtlasManager.props.fontSize,\n      iconMapping\n    );\n  }\n\n  /** Returns the x, y, width, height of each text string, relative to pixel size.\n   * Used to render the background.\n   */\n  private getBoundingRect: AccessorFunction<DataT, [number, number, number, number]> = (\n    object,\n    objectInfo\n  ) => {\n    let {\n      size: [width, height]\n    } = this.transformParagraph(object, objectInfo);\n    const {fontSize} = this.state.fontAtlasManager.props;\n    width /= fontSize;\n    height /= fontSize;\n\n    const {getTextAnchor, getAlignmentBaseline} = this.props;\n    const anchorX =\n      TEXT_ANCHOR[\n        typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor\n      ];\n    const anchorY =\n      ALIGNMENT_BASELINE[\n        typeof getAlignmentBaseline === 'function'\n          ? getAlignmentBaseline(object, objectInfo)\n          : getAlignmentBaseline\n      ];\n\n    return [((anchorX - 1) * width) / 2, ((anchorY - 1) * height) / 2, width, height];\n  };\n\n  /** Returns the x, y offsets of each character in a text string, in texture size.\n   * Used to layout characters in the vertex shader.\n   */\n  private getIconOffsets: AccessorFunction<DataT, number[]> = (object, objectInfo) => {\n    const {getTextAnchor, getAlignmentBaseline} = this.props;\n\n    const {\n      x,\n      y,\n      rowWidth,\n      size: [width, height]\n    } = this.transformParagraph(object, objectInfo);\n    const anchorX =\n      TEXT_ANCHOR[\n        typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor\n      ];\n    const anchorY =\n      ALIGNMENT_BASELINE[\n        typeof getAlignmentBaseline === 'function'\n          ? getAlignmentBaseline(object, objectInfo)\n          : getAlignmentBaseline\n      ];\n\n    const numCharacters = x.length;\n    const offsets = new Array(numCharacters * 2);\n    let index = 0;\n\n    for (let i = 0; i < numCharacters; i++) {\n      // For a multi-line object, offset in x-direction needs consider\n      // the row offset in the paragraph and the object offset in the row\n      const rowOffset = ((1 - anchorX) * (width - rowWidth[i])) / 2;\n      offsets[index++] = ((anchorX - 1) * width) / 2 + rowOffset + x[i];\n      offsets[index++] = ((anchorY - 1) * height) / 2 + y[i];\n    }\n    return offsets;\n  };\n\n  renderLayers() {\n    const {\n      startIndices,\n      numInstances,\n      getText,\n      fontAtlasManager: {scale, texture, mapping},\n      styleVersion\n    } = this.state;\n\n    const {\n      data,\n      _dataDiff,\n      getPosition,\n      getColor,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      getBackgroundColor,\n      getBorderColor,\n      getBorderWidth,\n      backgroundPadding,\n      background,\n      billboard,\n      fontSettings,\n      outlineWidth,\n      outlineColor,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      transitions,\n      updateTriggers\n    } = this.props;\n\n    const CharactersLayerClass = this.getSubLayerClass('characters', MultiIconLayer);\n    const BackgroundLayerClass = this.getSubLayerClass('background', TextBackgroundLayer);\n\n    return [\n      background &&\n        new BackgroundLayerClass(\n          {\n            // background props\n            getFillColor: getBackgroundColor,\n            getLineColor: getBorderColor,\n            getLineWidth: getBorderWidth,\n            padding: backgroundPadding,\n\n            // props shared with characters layer\n            getPosition,\n            getSize,\n            getAngle,\n            getPixelOffset,\n            billboard,\n            sizeScale,\n            sizeUnits,\n            sizeMinPixels,\n            sizeMaxPixels,\n\n            transitions: transitions && {\n              getPosition: transitions.getPosition,\n              getAngle: transitions.getAngle,\n              getSize: transitions.getSize,\n              getFillColor: transitions.getBackgroundColor,\n              getLineColor: transitions.getBorderColor,\n              getLineWidth: transitions.getBorderWidth,\n              getPixelOffset: transitions.getPixelOffset\n            }\n          },\n          this.getSubLayerProps({\n            id: 'background',\n            updateTriggers: {\n              getPosition: updateTriggers.getPosition,\n              getAngle: updateTriggers.getAngle,\n              getSize: updateTriggers.getSize,\n              getFillColor: updateTriggers.getBackgroundColor,\n              getLineColor: updateTriggers.getBorderColor,\n              getLineWidth: updateTriggers.getBorderWidth,\n              getPixelOffset: updateTriggers.getPixelOffset,\n              getBoundingRect: {\n                getText: updateTriggers.getText,\n                getTextAnchor: updateTriggers.getTextAnchor,\n                getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n                styleVersion\n              }\n            }\n          }),\n          {\n            data:\n              // @ts-ignore (2339) attribute is not defined on all data types\n              data.attributes && data.attributes.background\n                ? // @ts-ignore (2339) attribute is not defined on all data types\n                  {length: data.length, attributes: data.attributes.background}\n                : data,\n            _dataDiff,\n            // Maintain the same background behavior as <=8.3. Remove in v9?\n            autoHighlight: false,\n            getBoundingRect: this.getBoundingRect\n          }\n        ),\n      new CharactersLayerClass(\n        {\n          sdf: fontSettings.sdf,\n          smoothing: Number.isFinite(fontSettings.smoothing)\n            ? fontSettings.smoothing\n            : DEFAULT_FONT_SETTINGS.smoothing,\n          outlineWidth: outlineWidth / (fontSettings.radius || DEFAULT_FONT_SETTINGS.radius),\n          outlineColor,\n          iconAtlas: texture,\n          iconMapping: mapping,\n\n          getPosition,\n          getColor,\n          getSize,\n          getAngle,\n          getPixelOffset,\n\n          billboard,\n          sizeScale: sizeScale * scale,\n          sizeUnits,\n          sizeMinPixels: sizeMinPixels * scale,\n          sizeMaxPixels: sizeMaxPixels * scale,\n\n          transitions: transitions && {\n            getPosition: transitions.getPosition,\n            getAngle: transitions.getAngle,\n            getColor: transitions.getColor,\n            getSize: transitions.getSize,\n            getPixelOffset: transitions.getPixelOffset\n          }\n        },\n        this.getSubLayerProps({\n          id: 'characters',\n          updateTriggers: {\n            all: updateTriggers.getText,\n            getPosition: updateTriggers.getPosition,\n            getAngle: updateTriggers.getAngle,\n            getColor: updateTriggers.getColor,\n            getSize: updateTriggers.getSize,\n            getPixelOffset: updateTriggers.getPixelOffset,\n            getIconOffsets: {\n              getTextAnchor: updateTriggers.getTextAnchor,\n              getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n              styleVersion\n            }\n          }\n        }),\n        {\n          data,\n          _dataDiff,\n          startIndices,\n          numInstances,\n          getIconOffsets: this.getIconOffsets,\n          getIcon: getText\n        }\n      )\n    ];\n  }\n\n  static set fontAtlasCacheLimit(limit: number) {\n    setFontAtlasCacheLimit(limit);\n  }\n}\n", "import {CompositeLayer, Layer} from '@deck.gl/core';\n\nimport IconLayer from '../icon-layer/icon-layer';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport TextLayer from '../text-layer/text-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\n\nexport const POINT_LAYER = {\n  circle: {\n    type: ScatterplotLayer,\n    props: {\n      filled: 'filled',\n      stroked: 'stroked',\n\n      lineWidthMaxPixels: 'lineWidthMaxPixels',\n      lineWidthMinPixels: 'lineWidthMinPixels',\n      lineWidthScale: 'lineWidthScale',\n      lineWidthUnits: 'lineWidthUnits',\n      pointRadiusMaxPixels: 'radiusMaxPixels',\n      pointRadiusMinPixels: 'radiusMinPixels',\n      pointRadiusScale: 'radiusScale',\n      pointRadiusUnits: 'radiusUnits',\n      pointAntialiasing: 'antialiasing',\n      pointBillboard: 'billboard',\n\n      getFillColor: 'getFillColor',\n      getLineColor: 'getLineColor',\n      getLineWidth: 'getLineWidth',\n      getPointRadius: 'getRadius'\n    }\n  },\n  icon: {\n    type: IconLayer,\n    props: {\n      iconAtlas: 'iconAtlas',\n      iconMapping: 'iconMapping',\n\n      iconSizeMaxPixels: 'sizeMaxPixels',\n      iconSizeMinPixels: 'sizeMinPixels',\n      iconSizeScale: 'sizeScale',\n      iconSizeUnits: 'sizeUnits',\n      iconAlphaCutoff: 'alphaCutoff',\n      iconBillboard: 'billboard',\n\n      getIcon: 'getIcon',\n      getIconAngle: 'getAngle',\n      getIconColor: 'getColor',\n      getIconPixelOffset: 'getPixelOffset',\n      getIconSize: 'getSize'\n    }\n  },\n  text: {\n    type: TextLayer,\n    props: {\n      textSizeMaxPixels: 'sizeMaxPixels',\n      textSizeMinPixels: 'sizeMinPixels',\n      textSizeScale: 'sizeScale',\n      textSizeUnits: 'sizeUnits',\n\n      textBackground: 'background',\n      textBackgroundPadding: 'backgroundPadding',\n      textFontFamily: 'fontFamily',\n      textFontWeight: 'fontWeight',\n      textLineHeight: 'lineHeight',\n      textMaxWidth: 'maxWidth',\n      textOutlineColor: 'outlineColor',\n      textOutlineWidth: 'outlineWidth',\n      textWordBreak: 'wordBreak',\n      textCharacterSet: 'characterSet',\n      textBillboard: 'billboard',\n      textFontSettings: 'fontSettings',\n\n      getText: 'getText',\n      getTextAngle: 'getAngle',\n      getTextColor: 'getColor',\n      getTextPixelOffset: 'getPixelOffset',\n      getTextSize: 'getSize',\n      getTextAnchor: 'getTextAnchor',\n      getTextAlignmentBaseline: 'getAlignmentBaseline',\n      getTextBackgroundColor: 'getBackgroundColor',\n      getTextBorderColor: 'getBorderColor',\n      getTextBorderWidth: 'getBorderWidth'\n    }\n  }\n};\n\nexport const LINE_LAYER = {\n  type: PathLayer,\n  props: {\n    lineWidthUnits: 'widthUnits',\n    lineWidthScale: 'widthScale',\n    lineWidthMinPixels: 'widthMinPixels',\n    lineWidthMaxPixels: 'widthMaxPixels',\n    lineJointRounded: 'jointRounded',\n    lineCapRounded: 'capRounded',\n    lineMiterLimit: 'miterLimit',\n    lineBillboard: 'billboard',\n\n    getLineColor: 'getColor',\n    getLineWidth: 'getWidth'\n  }\n};\n\nexport const POLYGON_LAYER = {\n  type: SolidPolygonLayer,\n  props: {\n    extruded: 'extruded',\n    filled: 'filled',\n    wireframe: 'wireframe',\n    elevationScale: 'elevationScale',\n    material: 'material',\n    _full3d: '_full3d',\n\n    getElevation: 'getElevation',\n    getFillColor: 'getFillColor',\n    getLineColor: 'getLineColor'\n  }\n};\n\nexport function getDefaultProps({\n  type,\n  props\n}: {\n  type: typeof Layer;\n  props: Record<string, string>;\n}): Record<string, any> {\n  const result = {};\n  for (const key in props) {\n    result[key] = type.defaultProps[props[key]];\n  }\n  return result;\n}\n\nexport function forwardProps(\n  layer: CompositeLayer,\n  mapping: Record<string, string>\n): Record<string, any> {\n  const {transitions, updateTriggers} = layer.props;\n  const result: Record<string, any> = {\n    updateTriggers: {},\n    transitions: transitions && {\n      getPosition: transitions.geometry\n    }\n  };\n\n  for (const sourceKey in mapping) {\n    const targetKey = mapping[sourceKey];\n    let value = layer.props[sourceKey];\n    if (sourceKey.startsWith('get')) {\n      // isAccessor\n      value = (layer as any).getSubLayerAccessor(value);\n      result.updateTriggers[targetKey] = updateTriggers[sourceKey];\n      if (transitions) {\n        result.transitions[targetKey] = transitions[sourceKey];\n      }\n    }\n    result[targetKey] = value;\n  }\n  return result;\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {log} from '@deck.gl/core';\nimport type {\n  Feature,\n  GeoJSON,\n  GeoJsonGeometryTypes,\n  LineString,\n  MultiLineString,\n  MultiPoint,\n  MultiPolygon,\n  Point,\n  Polygon\n} from 'geojson';\n\ntype SupportedGeometry = Point | MultiPoint | LineString | MultiLineString | Polygon | MultiPolygon;\n\nexport type SeparatedGeometries = {\n  pointFeatures: {geometry: Point}[];\n  lineFeatures: {geometry: LineString}[];\n  polygonFeatures: {geometry: Polygon}[];\n  polygonOutlineFeatures: {geometry: LineString}[];\n};\n\n/**\n * \"Normalizes\" complete or partial GeoJSON data into iterable list of features\n * Can accept GeoJSON geometry or \"Feature\", \"FeatureCollection\" in addition\n * to plain arrays and iterables.\n * Works by extracting the feature array or wrapping single objects in an array,\n * so that subsequent code can simply iterate over features.\n *\n * @param {object} geojson - geojson data\n * @param {Object|Array} data - geojson object (FeatureCollection, Feature or\n *  Geometry) or array of features\n * @return {Array|\"iteratable\"} - iterable list of features\n */\nexport function getGeojsonFeatures(geojson: GeoJSON): Feature[] {\n  // If array, assume this is a list of features\n  if (Array.isArray(geojson)) {\n    return geojson;\n  }\n\n  log.assert(geojson.type, 'GeoJSON does not have type');\n\n  switch (geojson.type) {\n    case 'Feature':\n      // Wrap the feature in a 'Features' array\n      return [geojson];\n    case 'FeatureCollection':\n      // Just return the 'Features' array from the collection\n      log.assert(Array.isArray(geojson.features), 'GeoJSON does not have features array');\n      return geojson.features;\n    default:\n      // Assume it's a geometry, we'll check type in separateGeojsonFeatures\n      // Wrap the geometry object in a 'Feature' object and wrap in an array\n      return [{geometry: geojson}] as Feature[];\n  }\n}\n\n// Linearize\nexport function separateGeojsonFeatures(\n  features: Feature[],\n  wrapFeature: <T>(row: T, sourceObject: any, sourceObjectIndex: number) => T,\n  dataRange: {startRow?: number; endRow?: number} = {}\n): SeparatedGeometries {\n  const separated: SeparatedGeometries = {\n    pointFeatures: [],\n    lineFeatures: [],\n    polygonFeatures: [],\n    polygonOutlineFeatures: []\n  };\n  const {startRow = 0, endRow = features.length} = dataRange;\n\n  for (let featureIndex = startRow; featureIndex < endRow; featureIndex++) {\n    const feature = features[featureIndex];\n    const {geometry} = feature;\n\n    if (!geometry) {\n      // geometry can be null per specification\n      continue; // eslint-disable-line no-continue\n    }\n\n    if (geometry.type === 'GeometryCollection') {\n      log.assert(Array.isArray(geometry.geometries), 'GeoJSON does not have geometries array');\n      const {geometries} = geometry;\n      for (let i = 0; i < geometries.length; i++) {\n        const subGeometry = geometries[i];\n        separateGeometry(\n          subGeometry as SupportedGeometry,\n          separated,\n          wrapFeature,\n          feature,\n          featureIndex\n        );\n      }\n    } else {\n      separateGeometry(geometry, separated, wrapFeature, feature, featureIndex);\n    }\n  }\n\n  return separated;\n}\n\nfunction separateGeometry(\n  geometry: SupportedGeometry,\n  separated: SeparatedGeometries,\n  wrapFeature: <T>(row: T, sourceObject: any, sourceObjectIndex: number) => T,\n  sourceFeature: Feature,\n  sourceFeatureIndex: number\n) {\n  const {type, coordinates} = geometry;\n  const {pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures} = separated;\n\n  if (!validateGeometry(type, coordinates)) {\n    // Avoid hard failure if some features are malformed\n    log.warn(`${type} coordinates are malformed`)();\n    return;\n  }\n\n  // Split each feature, but keep track of the source feature and index (for Multi* geometries)\n  switch (type) {\n    case 'Point':\n      pointFeatures.push(\n        wrapFeature(\n          {\n            geometry\n          },\n          sourceFeature,\n          sourceFeatureIndex\n        )\n      );\n      break;\n    case 'MultiPoint':\n      coordinates.forEach(point => {\n        pointFeatures.push(\n          wrapFeature(\n            {\n              geometry: {type: 'Point', coordinates: point}\n            },\n            sourceFeature,\n            sourceFeatureIndex\n          )\n        );\n      });\n      break;\n    case 'LineString':\n      lineFeatures.push(\n        wrapFeature(\n          {\n            geometry\n          },\n          sourceFeature,\n          sourceFeatureIndex\n        )\n      );\n      break;\n    case 'MultiLineString':\n      // Break multilinestrings into multiple lines\n      coordinates.forEach(path => {\n        lineFeatures.push(\n          wrapFeature(\n            {\n              geometry: {type: 'LineString', coordinates: path}\n            },\n            sourceFeature,\n            sourceFeatureIndex\n          )\n        );\n      });\n      break;\n    case 'Polygon':\n      polygonFeatures.push(\n        wrapFeature(\n          {\n            geometry\n          },\n          sourceFeature,\n          sourceFeatureIndex\n        )\n      );\n      // Break polygon into multiple lines\n      coordinates.forEach(path => {\n        polygonOutlineFeatures.push(\n          wrapFeature(\n            {\n              geometry: {type: 'LineString', coordinates: path}\n            },\n            sourceFeature,\n            sourceFeatureIndex\n          )\n        );\n      });\n      break;\n    case 'MultiPolygon':\n      // Break multipolygons into multiple polygons\n      coordinates.forEach(polygon => {\n        polygonFeatures.push(\n          wrapFeature(\n            {\n              geometry: {type: 'Polygon', coordinates: polygon}\n            },\n            sourceFeature,\n            sourceFeatureIndex\n          )\n        );\n        // Break polygon into multiple lines\n        polygon.forEach(path => {\n          polygonOutlineFeatures.push(\n            wrapFeature(\n              {\n                geometry: {type: 'LineString', coordinates: path}\n              },\n              sourceFeature,\n              sourceFeatureIndex\n            )\n          );\n        });\n      });\n      break;\n    default:\n  }\n}\n\n/**\n * Simple GeoJSON validation util. For perf reasons we do not validate against the full spec,\n * only the following:\n   - geometry.type is supported\n   - geometry.coordinate has correct nesting level\n */\nconst COORDINATE_NEST_LEVEL: Record<SupportedGeometry['type'], number> = {\n  Point: 1,\n  MultiPoint: 2,\n  LineString: 2,\n  MultiLineString: 3,\n  Polygon: 3,\n  MultiPolygon: 4\n};\n\nexport function validateGeometry(type: GeoJsonGeometryTypes, coordinates: any): boolean {\n  let nestLevel = COORDINATE_NEST_LEVEL[type] as number;\n\n  log.assert(nestLevel, `Unknown GeoJSON type ${type}`);\n\n  while (coordinates && --nestLevel > 0) {\n    coordinates = coordinates[0];\n  }\n\n  return coordinates && Number.isFinite(coordinates[0]);\n}\n", "import {BinaryAttribute, LayerData, LayerProps} from '@deck.gl/core';\nimport {PolygonLayerProps, ScatterplotLayerProps} from '..';\nimport {calculatePickingColors} from './geojson-binary';\nimport {BinaryFeatures} from '@loaders.gl/schema';\nimport {SeparatedGeometries} from './geojson';\n\n// TODO: PathLayer is not yet typed\ntype PathLayerProps = LayerProps & Record<string, any>;\n\ntype SubLayersProps = {\n  points: Partial<ScatterplotLayerProps>;\n  lines: Partial<PathLayerProps>;\n  polygons: Partial<PolygonLayerProps>;\n  polygonsOutline: Partial<PathLayerProps>;\n};\n\ntype ExtendedBinaryFeatures = {\n  [P in keyof BinaryFeatures]: BinaryFeatures[P] & {attributes?: Record<string, BinaryAttribute>};\n};\n\nfunction createEmptyLayerProps(): SubLayersProps {\n  return {\n    points: {},\n    lines: {},\n    polygons: {},\n    polygonsOutline: {}\n  };\n}\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\nexport function createLayerPropsFromFeatures(\n  features: SeparatedGeometries,\n  featuresDiff\n): SubLayersProps {\n  const layerProps = createEmptyLayerProps();\n  const {pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures} = features;\n\n  layerProps.points.data = pointFeatures;\n  layerProps.points._dataDiff = featuresDiff.pointFeatures && (() => featuresDiff.pointFeatures);\n  layerProps.points.getPosition = getCoordinates;\n\n  layerProps.lines.data = lineFeatures;\n  layerProps.lines._dataDiff = featuresDiff.lineFeatures && (() => featuresDiff.lineFeatures);\n  layerProps.lines.getPath = getCoordinates;\n\n  layerProps.polygons.data = polygonFeatures;\n  layerProps.polygons._dataDiff =\n    featuresDiff.polygonFeatures && (() => featuresDiff.polygonFeatures);\n  layerProps.polygons.getPolygon = getCoordinates;\n\n  layerProps.polygonsOutline.data = polygonOutlineFeatures;\n  layerProps.polygonsOutline._dataDiff =\n    featuresDiff.polygonOutlineFeatures && (() => featuresDiff.polygonOutlineFeatures);\n  layerProps.polygonsOutline.getPath = getCoordinates;\n\n  return layerProps;\n}\n\nexport function createLayerPropsFromBinary(\n  geojsonBinary: Required<ExtendedBinaryFeatures>,\n  encodePickingColor\n): SubLayersProps {\n  // The binary data format is documented here\n  // https://github.com/visgl/loaders.gl/blob/master/modules/gis/docs/api-reference/geojson-to-binary.md\n  // It is the default output from the `MVTLoader` and can also be obtained\n  // from GeoJSON by using the `geojsonToBinary` utility function.\n  const layerProps = createEmptyLayerProps();\n  const {points, lines, polygons} = geojsonBinary;\n\n  const customPickingColors = calculatePickingColors(geojsonBinary, encodePickingColor);\n\n  layerProps.points.data = {\n    length: points.positions.value.length / points.positions.size,\n    attributes: {\n      ...points.attributes,\n      getPosition: points.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.points!\n      }\n    },\n    properties: points.properties,\n    numericProps: points.numericProps,\n    featureIds: points.featureIds\n  } as LayerData<any>;\n\n  layerProps.lines.data = {\n    length: lines.pathIndices.value.length - 1,\n    startIndices: lines.pathIndices.value,\n    attributes: {\n      ...lines.attributes,\n      getPath: lines.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.lines!\n      }\n    },\n    properties: lines.properties,\n    numericProps: lines.numericProps,\n    featureIds: lines.featureIds\n  } as LayerData<any>;\n  layerProps.lines._pathType = 'open';\n\n  layerProps.polygons.data = {\n    length: polygons.polygonIndices.value.length - 1,\n    startIndices: polygons.polygonIndices.value,\n    attributes: {\n      ...polygons.attributes,\n      getPolygon: polygons.positions,\n      pickingColors: {\n        size: 3,\n        value: customPickingColors.polygons!\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  } as LayerData<any>;\n  layerProps.polygons._normalize = false;\n  if (polygons.triangles) {\n    (layerProps.polygons.data as any).attributes.indices = polygons.triangles.value;\n  }\n\n  layerProps.polygonsOutline.data = {\n    length: polygons.primitivePolygonIndices.value.length - 1,\n    startIndices: polygons.primitivePolygonIndices.value,\n    attributes: {\n      ...polygons.attributes,\n      getPath: polygons.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.polygons!\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  } as LayerData<any>;\n  layerProps.polygonsOutline._pathType = 'open';\n\n  return layerProps;\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Accessor,\n  Color,\n  CompositeLayer,\n  CompositeLayerProps,\n  Layer,\n  PickingInfo,\n  Unit,\n  Material,\n  UpdateParameters,\n  _ConstructorOf,\n  DefaultProps\n} from '@deck.gl/core';\n\nimport type {BinaryFeatures} from '@loaders.gl/schema';\nimport type {Feature, GeoJSON} from 'geojson';\n\nimport {replaceInRange} from '../utils';\nimport {BinaryFeatureTypes, binaryToFeatureForAccesor} from './geojson-binary';\nimport {\n  POINT_LAYER,\n  LINE_LAYER,\n  POLYGON_LAYER,\n  getDefaultProps,\n  forwardProps\n} from './sub-layer-map';\n\nimport {getGeojsonFeatures, SeparatedGeometries, separateGeojsonFeatures} from './geojson';\nimport {createLayerPropsFromFeatures, createLayerPropsFromBinary} from './geojson-layer-props';\n\n/** All properties supported by GeoJsonLayer */\nexport type GeoJsonLayerProps = _GeoJsonLayerProps & CompositeLayerProps;\n\n/** Properties added by GeoJsonLayer */\nexport type _GeoJsonLayerProps = {\n  data: string | GeoJSON | BinaryFeatures | Promise<GeoJSON | BinaryFeatures>;\n  /**\n   * How to render Point and MultiPoint features in the data.\n   *\n   * Supported types are:\n   *  * `'circle'`\n   *  * `'icon'`\n   *  * `'text'`\n   *\n   * @default 'circle'\n   */\n  pointType?: string;\n} & _GeoJsonLayerFillProps &\n  _GeoJsonLayerStrokeProps &\n  _GeoJsonLayer3DProps &\n  _GeoJsonLayerPointCircleProps &\n  _GeojsonLayerIconPointProps &\n  _GeojsonLayerTextPointProps;\n\n/** GeoJsonLayer fill options. */\ntype _GeoJsonLayerFillProps = {\n  /**\n   * Whether to draw a filled polygon (solid fill).\n   *\n   * Note that only the area between the outer polygon and any holes will be filled.\n   *\n   * @default true\n   */\n  filled?: boolean;\n\n  /**\n   * Fill collor value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<Feature, Color>;\n};\n\n/** GeoJsonLayer stroke options. */\ntype _GeoJsonLayerStrokeProps = {\n  /**\n   * Whether to draw an outline around the polygon (solid fill).\n   *\n   * Note that both the outer polygon as well the outlines of any holes will be drawn.\n   *\n   * @default true\n   */\n  stroked?: boolean;\n\n  /**\n   * Line color value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<Feature, Color>;\n\n  /**\n   * Line width value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineWidth?: Accessor<Feature, number>;\n\n  /**\n   * The units of the line width, one of `meters`, `common`, and `pixels`.\n   *\n   * @default 'meters'\n   * @see Unit.\n   */\n  lineWidthUnits?: Unit;\n\n  /**\n   * A multiplier that is applied to all line widths\n   *\n   * @default 1\n   */\n  lineWidthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   *\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels\n   *\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Type of joint. If `true`, draw round joints. Otherwise draw miter joints.\n   *\n   * @default false\n   */\n  lineJointRounded?: boolean;\n\n  /**\n   * The maximum extent of a joint in ratio to the stroke width.\n   *\n   * Only works if `lineJointRounded` is false.\n   *\n   * @default 4\n   */\n  lineMiterLimit?: number;\n\n  /**\n   * Type of line caps.\n   *\n   * If `true`, draw round caps. Otherwise draw square caps.\n   *\n   * @default false\n   */\n  lineCapRounded?: boolean;\n\n  /**\n   * If `true`, extrude the line in screen space (width always faces the camera).\n   * If `false`, the width always faces up.\n   *\n   * @default false\n   */\n  lineBillboard?: boolean;\n};\n\n/** GeoJsonLayer 3D options. */\ntype _GeoJsonLayer3DProps = {\n  /**\n   * Extrude Polygon and MultiPolygon features along the z-axis if set to true\n   *\n   * Based on the elevations provided by the `getElevation` accessor.\n   *\n   * @default false\n   */\n  extruded?: boolean;\n\n  /**\n   * Whether to generate a line wireframe of the hexagon.\n   *\n   * @default false\n   */\n  wireframe?: boolean;\n\n  /**\n   * (Experimental) This prop is only effective with `XYZ` data.\n   * When true, polygon tesselation will be performed on the plane with the largest area, instead of the xy plane.\n   * @default false\n   */\n  _full3d?: boolean;\n\n  /**\n   * Elevation valur or accessor.\n   *\n   * Only used if `extruded: true`.\n   *\n   * @default 1000\n   */\n  getElevation?: Accessor<Feature, number>;\n\n  /**\n   * Elevation multiplier.\n   *\n   * The final elevation is calculated by `elevationScale * getElevation(d)`.\n   * `elevationScale` is a handy property to scale all elevation without updating the data.\n   *\n   * @default 1\n   */\n  elevationScale?: boolean;\n\n  /**\n   * Material settings for lighting effect. Applies to extruded polgons.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n};\n\n/** GeoJsonLayer Properties forwarded to `ScatterPlotLayer` if `pointType` is `'circle'` */\nexport type _GeoJsonLayerPointCircleProps = {\n  getPointRadius?: Accessor<Feature, number>;\n  pointRadiusUnits?: Unit;\n  pointRadiusScale?: number;\n  pointRadiusMinPixels?: number;\n  pointRadiusMaxPixels?: number;\n  pointAntialiasing?: boolean;\n  pointBillboard?: boolean;\n\n  /** @deprecated use getPointRadius */\n  getRadius?: Accessor<Feature, number>;\n};\n\n/** GeoJsonLayer properties forwarded to `IconLayer` if `pointType` is `'icon'` */\ntype _GeojsonLayerIconPointProps = {\n  iconAtlas?: any;\n  iconMapping?: any;\n  getIcon?: Accessor<Feature, any>;\n  getIconSize?: Accessor<Feature, number>;\n  getIconColor?: Accessor<Feature, Color>;\n  getIconAngle?: Accessor<Feature, number>;\n  getIconPixelOffset?: Accessor<Feature, number[]>;\n  iconSizeUnits?: Unit;\n  iconSizeScale?: number;\n  iconSizeMinPixels?: number;\n  iconSizeMaxPixels?: number;\n  iconBillboard?: boolean;\n  iconAlphaCutoff?: number;\n};\n\n/** GeoJsonLayer properties forwarded to `TextLayer` if `pointType` is `'text'` */\ntype _GeojsonLayerTextPointProps = {\n  getText?: Accessor<Feature, any>;\n  getTextColor?: Accessor<Feature, Color>;\n  getTextAngle?: Accessor<Feature, number>;\n  getTextSize?: Accessor<Feature, number>;\n  getTextAnchor?: Accessor<Feature, string>;\n  getTextAlignmentBaseline?: Accessor<Feature, string>;\n  getTextPixelOffset?: Accessor<Feature, number[]>;\n  getTextBackgroundColor?: Accessor<Feature, Color>;\n  getTextBorderColor?: Accessor<Feature, Color>;\n  getTextBorderWidth?: Accessor<Feature, number>;\n  textSizeUnits?: Unit;\n  textSizeScale?: number;\n  textSizeMinPixels?: number;\n  textSizeMaxPixels?: number;\n  textCharacterSet?: any;\n  textFontFamily?: string;\n  textFontWeight?: number;\n  textLineHeight?: number;\n  textMaxWidth?: number;\n  textWordBreak?: string; // TODO\n  textBackground?: boolean;\n  textBackgroundPadding?: number[];\n  textOutlineColor?: Color;\n  textOutlineWidth?: number;\n  textBillboard?: boolean;\n  textFontSettings?: any;\n};\n\nconst FEATURE_TYPES = ['points', 'linestrings', 'polygons'];\n\nconst defaultProps: DefaultProps<GeoJsonLayerProps> = {\n  ...getDefaultProps(POINT_LAYER.circle),\n  ...getDefaultProps(POINT_LAYER.icon),\n  ...getDefaultProps(POINT_LAYER.text),\n  ...getDefaultProps(LINE_LAYER),\n  ...getDefaultProps(POLYGON_LAYER),\n\n  // Overwrite sub layer defaults\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  _full3d: false,\n  iconAtlas: {type: 'object', value: null},\n  iconMapping: {type: 'object', value: {}},\n  getIcon: {type: 'accessor', value: f => f.properties.icon},\n  getText: {type: 'accessor', value: f => f.properties.text},\n\n  // Self props\n  pointType: 'circle',\n\n  // TODO: deprecated, remove in v9\n  getRadius: {deprecatedFor: 'getPointRadius'}\n};\n\ntype GeoJsonPickingInfo = PickingInfo & {\n  featureType?: string | null;\n  info?: any;\n};\n\n/** Render GeoJSON formatted data as polygons, lines and points (circles, icons and/or texts). */\nexport default class GeoJsonLayer<ExtraProps extends {} = {}> extends CompositeLayer<\n  Required<GeoJsonLayerProps> & ExtraProps\n> {\n  static layerName = 'GeoJsonLayer';\n  static defaultProps = defaultProps;\n\n  initializeState(): void {\n    this.state = {\n      layerProps: {},\n      features: {}\n    };\n  }\n\n  updateState({props, changeFlags}: UpdateParameters<this>): void {\n    if (!changeFlags.dataChanged) {\n      return;\n    }\n    const {data} = this.props;\n    const binary =\n      data && 'points' in (data as {}) && 'polygons' in (data as {}) && 'lines' in (data as {});\n\n    this.setState({binary});\n\n    if (binary) {\n      this._updateStateBinary({props, changeFlags});\n    } else {\n      this._updateStateJSON({props, changeFlags});\n    }\n  }\n\n  private _updateStateBinary({props, changeFlags}): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const layerProps = createLayerPropsFromBinary(props.data, this.encodePickingColor);\n    this.setState({layerProps});\n  }\n\n  private _updateStateJSON({props, changeFlags}): void {\n    const features: Feature[] = getGeojsonFeatures(props.data) as any;\n    const wrapFeature = this.getSubLayerRow.bind(this);\n    let newFeatures: SeparatedGeometries = {} as SeparatedGeometries;\n    const featuresDiff = {};\n\n    if (Array.isArray(changeFlags.dataChanged)) {\n      const oldFeatures = this.state.features;\n      for (const key in oldFeatures) {\n        newFeatures[key] = oldFeatures[key].slice();\n        featuresDiff[key] = [];\n      }\n\n      for (const dataRange of changeFlags.dataChanged) {\n        const partialFeatures = separateGeojsonFeatures(features, wrapFeature, dataRange);\n        for (const key in oldFeatures) {\n          featuresDiff[key].push(\n            replaceInRange({\n              data: newFeatures[key],\n              getIndex: f => f.__source.index,\n              dataRange,\n              replace: partialFeatures[key]\n            })\n          );\n        }\n      }\n    } else {\n      newFeatures = separateGeojsonFeatures(features, wrapFeature);\n    }\n\n    const layerProps = createLayerPropsFromFeatures(newFeatures, featuresDiff);\n\n    this.setState({\n      features: newFeatures,\n      featuresDiff,\n      layerProps\n    });\n  }\n\n  getPickingInfo(params): GeoJsonPickingInfo {\n    const info = super.getPickingInfo(params) as GeoJsonPickingInfo;\n    const {index, sourceLayer} = info;\n    info.featureType = FEATURE_TYPES.find(ft => sourceLayer!.id.startsWith(`${this.id}-${ft}-`));\n    if (index >= 0 && sourceLayer!.id.startsWith(`${this.id}-points-text`) && this.state.binary) {\n      info.index = (this.props.data as BinaryFeatures).points!.globalFeatureIds.value[index];\n    }\n    return info;\n  }\n\n  _updateAutoHighlight(info: GeoJsonPickingInfo): void {\n    // All sub layers except the points layer use source feature index to encode the picking color\n    // The points layer uses indices from the points data array.\n    const pointLayerIdPrefix = `${this.id}-points-`;\n    const sourceIsPoints = info.featureType === 'points';\n    for (const layer of this.getSubLayers()) {\n      if (layer.id.startsWith(pointLayerIdPrefix) === sourceIsPoints) {\n        layer.updateAutoHighlight(info);\n      }\n    }\n  }\n\n  private _renderPolygonLayer(): Layer | null {\n    const {extruded, wireframe} = this.props;\n    const {layerProps} = this.state;\n    const id = 'polygons-fill';\n\n    const PolygonFillLayer =\n      this.shouldRenderSubLayer(id, layerProps.polygons.data) &&\n      this.getSubLayerClass(id, POLYGON_LAYER.type);\n\n    if (PolygonFillLayer) {\n      const forwardedProps = forwardProps(this, POLYGON_LAYER.props);\n      // Avoid building the lineColors attribute if wireframe is off\n      const useLineColor = extruded && wireframe;\n      if (!useLineColor) {\n        delete forwardedProps.getLineColor;\n      }\n      // using a legacy API to invalid lineColor attributes\n      forwardedProps.updateTriggers.lineColors = useLineColor;\n\n      return new PolygonFillLayer(\n        forwardedProps,\n        this.getSubLayerProps({\n          id,\n          updateTriggers: forwardedProps.updateTriggers\n        }),\n        layerProps.polygons\n      );\n    }\n    return null;\n  }\n\n  private _renderLineLayers(): (Layer | false)[] | null {\n    const {extruded, stroked} = this.props;\n    const {layerProps} = this.state;\n    const polygonStrokeLayerId = 'polygons-stroke';\n    const lineStringsLayerId = 'linestrings';\n\n    const PolygonStrokeLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer(polygonStrokeLayerId, layerProps.polygonsOutline.data) &&\n      this.getSubLayerClass(polygonStrokeLayerId, LINE_LAYER.type);\n    const LineStringsLayer =\n      this.shouldRenderSubLayer(lineStringsLayerId, layerProps.lines.data) &&\n      this.getSubLayerClass(lineStringsLayerId, LINE_LAYER.type);\n\n    if (PolygonStrokeLayer || LineStringsLayer) {\n      const forwardedProps = forwardProps(this, LINE_LAYER.props);\n\n      return [\n        PolygonStrokeLayer &&\n          new PolygonStrokeLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id: polygonStrokeLayerId,\n              updateTriggers: forwardedProps.updateTriggers\n            }),\n            layerProps.polygonsOutline\n          ),\n\n        LineStringsLayer &&\n          new LineStringsLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id: lineStringsLayerId,\n              updateTriggers: forwardedProps.updateTriggers\n            }),\n            layerProps.lines\n          )\n      ];\n    }\n    return null;\n  }\n\n  private _renderPointLayers(): Layer[] | null {\n    const {pointType} = this.props;\n    const {layerProps, binary} = this.state;\n    let {highlightedObjectIndex} = this.props;\n\n    if (!binary && Number.isFinite(highlightedObjectIndex)) {\n      highlightedObjectIndex = layerProps.points.data.findIndex(\n        d => d.__source.index === highlightedObjectIndex\n      );\n    }\n\n    // Avoid duplicate sub layer ids\n    const types = new Set(pointType.split('+'));\n    const pointLayers: Layer[] = [];\n    for (const type of types) {\n      const id = `points-${type}`;\n      const PointLayerMapping = POINT_LAYER[type];\n      const PointsLayer: _ConstructorOf<Layer> =\n        PointLayerMapping &&\n        this.shouldRenderSubLayer(id, layerProps.points.data) &&\n        this.getSubLayerClass(id, PointLayerMapping.type);\n      if (PointsLayer) {\n        const forwardedProps = forwardProps(this, PointLayerMapping.props);\n        let pointsLayerProps = layerProps.points;\n\n        if (type === 'text' && binary) {\n          // Picking colors are per-point but for text per-character are required\n          // getPickingInfo() maps back to the correct index\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {instancePickingColors, ...rest} = pointsLayerProps.data.attributes;\n          pointsLayerProps = {\n            ...pointsLayerProps,\n            data: {...pointsLayerProps.data, attributes: rest}\n          };\n        }\n\n        pointLayers.push(\n          new PointsLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id,\n              updateTriggers: forwardedProps.updateTriggers,\n              highlightedObjectIndex\n            }),\n            pointsLayerProps\n          )\n        );\n      }\n    }\n    return pointLayers;\n  }\n\n  renderLayers() {\n    const {extruded} = this.props;\n\n    const polygonFillLayer = this._renderPolygonLayer();\n    const lineLayers = this._renderLineLayers();\n    const pointLayers = this._renderPointLayers();\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonFillLayer,\n      lineLayers,\n      pointLayers,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonFillLayer\n    ];\n  }\n\n  protected getSubLayerAccessor<In, Out>(accessor: Accessor<In, Out>): Accessor<In, Out> {\n    const {binary} = this.state;\n    if (!binary || typeof accessor !== 'function') {\n      return super.getSubLayerAccessor(accessor);\n    }\n\n    return (object, info) => {\n      const {data, index} = info;\n      const feature = binaryToFeatureForAccesor(data as unknown as BinaryFeatureTypes, index);\n      // @ts-ignore (TS2349) accessor is always function\n      return accessor(feature, info);\n    };\n  }\n}\n", "// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport BinSorter from './bin-sorter';\nimport {getScaleFunctionByScaleType} from './scale-utils';\nimport {getValueFunc, wrapGetValueFunc} from './aggregation-operation-utils';\n\nfunction nop() {}\n\nconst dimensionSteps = ['getBins', 'getDomain', 'getScaleFunc'];\nconst defaultDimensions = [\n  {\n    key: 'fillColor',\n    accessor: 'getFillColor',\n    pickingInfo: 'colorValue',\n    getBins: {\n      triggers: {\n        value: {\n          prop: 'getColorValue',\n          updateTrigger: 'getColorValue'\n        },\n        weight: {\n          prop: 'getColorWeight',\n          updateTrigger: 'getColorWeight'\n        },\n        aggregation: {\n          prop: 'colorAggregation'\n        },\n        filterData: {\n          prop: '_filterData',\n          updateTrigger: '_filterData'\n        }\n      }\n    },\n    getDomain: {\n      triggers: {\n        lowerPercentile: {\n          prop: 'lowerPercentile'\n        },\n        upperPercentile: {\n          prop: 'upperPercentile'\n        },\n        scaleType: {\n          prop: 'colorScaleType'\n        }\n      }\n    },\n    getScaleFunc: {\n      triggers: {\n        domain: {prop: 'colorDomain'},\n        range: {prop: 'colorRange'}\n      },\n      onSet: {\n        props: 'onSetColorDomain'\n      }\n    },\n    nullValue: [0, 0, 0, 0]\n  },\n  {\n    key: 'elevation',\n    accessor: 'getElevation',\n    pickingInfo: 'elevationValue',\n    getBins: {\n      triggers: {\n        value: {\n          prop: 'getElevationValue',\n          updateTrigger: 'getElevationValue'\n        },\n        weight: {\n          prop: 'getElevationWeight',\n          updateTrigger: 'getElevationWeight'\n        },\n        aggregation: {\n          prop: 'elevationAggregation'\n        },\n        filterData: {\n          prop: '_filterData',\n          updateTrigger: '_filterData'\n        }\n      }\n    },\n    getDomain: {\n      triggers: {\n        lowerPercentile: {\n          prop: 'elevationLowerPercentile'\n        },\n        upperPercentile: {\n          prop: 'elevationUpperPercentile'\n        },\n        scaleType: {\n          prop: 'elevationScaleType'\n        }\n      }\n    },\n    getScaleFunc: {\n      triggers: {\n        domain: {prop: 'elevationDomain'},\n        range: {prop: 'elevationRange'}\n      },\n      onSet: {\n        props: 'onSetElevationDomain'\n      }\n    },\n    nullValue: -1\n  }\n];\nconst defaultGetCellSize = props => props.cellSize;\nexport default class CPUAggregator {\n  constructor(opts) {\n    this.state = {\n      layerData: {},\n      dimensions: {\n        // color: {\n        //   getValue: null,\n        //   domain: null,\n        //   sortedBins: null,\n        //   scaleFunc: nop\n        // },\n        // elevation: {\n        //   getValue: null,\n        //   domain: null,\n        //   sortedBins: null,\n        //   scaleFunc: nop\n        // }\n      }\n    };\n    this.changeFlags = {};\n    this.dimensionUpdaters = {};\n\n    this._getCellSize = opts.getCellSize || defaultGetCellSize;\n    this._getAggregator = opts.getAggregator;\n    this._addDimension(opts.dimensions || defaultDimensions);\n  }\n\n  static defaultDimensions() {\n    return defaultDimensions;\n  }\n\n  updateState(opts, aggregationParams) {\n    const {oldProps, props, changeFlags} = opts;\n    this.updateGetValueFuncs(oldProps, props, changeFlags);\n    const reprojectNeeded = this.needsReProjectPoints(oldProps, props, changeFlags);\n    let aggregationDirty = false;\n    if (changeFlags.dataChanged || reprojectNeeded) {\n      // project data into bin and aggregate wegiths per bin\n      this.getAggregatedData(props, aggregationParams);\n      aggregationDirty = true;\n    } else {\n      const dimensionChanges = this.getDimensionChanges(oldProps, props, changeFlags) || [];\n      // this here is layer\n      dimensionChanges.forEach(f => typeof f === 'function' && f());\n      aggregationDirty = true;\n    }\n    this.setState({aggregationDirty});\n\n    return this.state;\n  }\n\n  // Update private state\n  setState(updateObject) {\n    this.state = {...this.state, ...updateObject};\n  }\n\n  // Update private state.dimensions\n  setDimensionState(key, updateObject) {\n    this.setState({\n      dimensions: {\n        ...this.state.dimensions,\n        [key]: {...this.state.dimensions[key], ...updateObject}\n      }\n    });\n  }\n\n  normalizeResult(result = {}) {\n    // support previous hexagonAggregator API\n    if (result.hexagons) {\n      return {data: result.hexagons, ...result};\n    } else if (result.layerData) {\n      return {data: result.layerData, ...result};\n    }\n\n    return result;\n  }\n\n  getAggregatedData(props, aggregationParams) {\n    const aggregator = this._getAggregator(props);\n\n    const result = aggregator(props, aggregationParams);\n    this.setState({\n      layerData: this.normalizeResult(result)\n    });\n    this.changeFlags = {\n      layerData: true\n    };\n    this.getSortedBins(props);\n  }\n\n  updateGetValueFuncs(oldProps, props, changeFlags) {\n    for (const key in this.dimensionUpdaters) {\n      const {value, weight, aggregation} = this.dimensionUpdaters[key].getBins.triggers;\n      let getValue = props[value.prop];\n      const getValueChanged = this.needUpdateDimensionStep(\n        this.dimensionUpdaters[key].getBins,\n        oldProps,\n        props,\n        changeFlags\n      );\n\n      if (getValueChanged) {\n        if (getValue) {\n          getValue = wrapGetValueFunc(getValue, {data: props.data});\n        } else {\n          // If `getValue` is not provided from props, build it with aggregation and weight.\n          getValue = getValueFunc(props[aggregation.prop], props[weight.prop], {data: props.data});\n        }\n      }\n\n      if (getValue) {\n        this.setDimensionState(key, {getValue});\n      }\n    }\n  }\n\n  needsReProjectPoints(oldProps, props, changeFlags) {\n    return (\n      this._getCellSize(oldProps) !== this._getCellSize(props) ||\n      this._getAggregator(oldProps) !== this._getAggregator(props) ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPosition))\n    );\n  }\n\n  // Adds dimensions\n  addDimension(dimensions) {\n    this._addDimension(dimensions);\n  }\n\n  _addDimension(dimensions = []) {\n    dimensions.forEach(dimension => {\n      const {key} = dimension;\n      this.dimensionUpdaters[key] = this.getDimensionUpdaters(dimension);\n      this.state.dimensions[key] = {\n        getValue: null,\n        domain: null,\n        sortedBins: null,\n        scaleFunc: nop\n      };\n    });\n  }\n\n  getDimensionUpdaters({key, accessor, pickingInfo, getBins, getDomain, getScaleFunc, nullValue}) {\n    return {\n      key,\n      accessor,\n      pickingInfo,\n      getBins: {updater: this.getDimensionSortedBins, ...getBins},\n      getDomain: {updater: this.getDimensionValueDomain, ...getDomain},\n      getScaleFunc: {updater: this.getDimensionScale, ...getScaleFunc},\n      attributeAccessor: this.getSubLayerDimensionAttribute(key, nullValue)\n    };\n  }\n\n  needUpdateDimensionStep(dimensionStep, oldProps, props, changeFlags) {\n    // whether need to update current dimension step\n    // dimension step is the value, domain, scaleFunction of each dimension\n    // each step is an object with properties links to layer prop and whether the prop is\n    // controlled by updateTriggers\n    // getBins: {\n    //   value: {\n    //     prop: 'getElevationValue',\n    //     updateTrigger: 'getElevationValue'\n    //   },\n    //   weight: {\n    //     prop: 'getElevationWeight',\n    //     updateTrigger: 'getElevationWeight'\n    //   },\n    //   aggregation: {\n    //     prop: 'elevationAggregation'\n    //   }\n    // }\n    return Object.values(dimensionStep.triggers).some(item => {\n      if (item.updateTrigger) {\n        // check based on updateTriggers change first\n        // if data has changed, always update value\n        return (\n          changeFlags.dataChanged ||\n          (changeFlags.updateTriggersChanged &&\n            (changeFlags.updateTriggersChanged.all ||\n              changeFlags.updateTriggersChanged[item.updateTrigger]))\n        );\n      }\n      // fallback to direct comparison\n      return oldProps[item.prop] !== props[item.prop];\n    });\n  }\n\n  getDimensionChanges(oldProps, props, changeFlags) {\n    // const {dimensionUpdaters} = this.state;\n    const updaters = [];\n\n    // get dimension to be updated\n    for (const key in this.dimensionUpdaters) {\n      // return the first triggered updater for each dimension\n      const needUpdate = dimensionSteps.find(step =>\n        this.needUpdateDimensionStep(\n          this.dimensionUpdaters[key][step],\n          oldProps,\n          props,\n          changeFlags\n        )\n      );\n\n      if (needUpdate) {\n        updaters.push(\n          this.dimensionUpdaters[key][needUpdate].updater.bind(\n            this,\n            props,\n            this.dimensionUpdaters[key]\n          )\n        );\n      }\n    }\n\n    return updaters.length ? updaters : null;\n  }\n\n  getUpdateTriggers(props) {\n    const _updateTriggers = props.updateTriggers || {};\n    const updateTriggers = {};\n\n    for (const key in this.dimensionUpdaters) {\n      const {accessor} = this.dimensionUpdaters[key];\n      // fold dimension triggers into each accessor\n      updateTriggers[accessor] = {};\n\n      dimensionSteps.forEach(step => {\n        Object.values(this.dimensionUpdaters[key][step].triggers).forEach(\n          ({prop, updateTrigger}) => {\n            if (updateTrigger) {\n              // if prop is based on updateTrigger e.g. getColorValue, getColorWeight\n              // and updateTriggers is passed in from layer prop\n              // fold the updateTriggers into accessor\n              const fromProp = _updateTriggers[updateTrigger];\n              if (typeof fromProp === 'object' && !Array.isArray(fromProp)) {\n                // if updateTrigger is an object spread it\n                Object.assign(updateTriggers[accessor], fromProp);\n              } else if (fromProp !== undefined) {\n                updateTriggers[accessor][prop] = fromProp;\n              }\n            } else {\n              // if prop is not based on updateTrigger\n              updateTriggers[accessor][prop] = props[prop];\n            }\n          }\n        );\n      });\n    }\n\n    return updateTriggers;\n  }\n\n  getSortedBins(props) {\n    for (const key in this.dimensionUpdaters) {\n      this.getDimensionSortedBins(props, this.dimensionUpdaters[key]);\n    }\n  }\n\n  getDimensionSortedBins(props, dimensionUpdater) {\n    const {key} = dimensionUpdater;\n    const {getValue} = this.state.dimensions[key];\n\n    const sortedBins = new BinSorter(this.state.layerData.data || [], {\n      getValue,\n      filterData: props._filterData\n    });\n    this.setDimensionState(key, {sortedBins});\n    this.getDimensionValueDomain(props, dimensionUpdater);\n  }\n\n  getDimensionValueDomain(props, dimensionUpdater) {\n    const {getDomain, key} = dimensionUpdater;\n    const {\n      triggers: {lowerPercentile, upperPercentile, scaleType}\n    } = getDomain;\n    const valueDomain = this.state.dimensions[key].sortedBins.getValueDomainByScale(\n      props[scaleType.prop],\n      [props[lowerPercentile.prop], props[upperPercentile.prop]]\n    );\n\n    this.setDimensionState(key, {valueDomain});\n    this.getDimensionScale(props, dimensionUpdater);\n  }\n\n  getDimensionScale(props, dimensionUpdater) {\n    const {key, getScaleFunc, getDomain} = dimensionUpdater;\n    const {domain, range} = getScaleFunc.triggers;\n    const {scaleType} = getDomain.triggers;\n    const {onSet} = getScaleFunc;\n    const dimensionRange = props[range.prop];\n    const dimensionDomain = props[domain.prop] || this.state.dimensions[key].valueDomain;\n    const getScaleFunction = getScaleFunctionByScaleType(scaleType && props[scaleType.prop]);\n    const scaleFunc = getScaleFunction(dimensionDomain, dimensionRange);\n\n    if (typeof onSet === 'object' && typeof props[onSet.props] === 'function') {\n      props[onSet.props](scaleFunc.domain());\n    }\n\n    this.setDimensionState(key, {scaleFunc});\n  }\n\n  getSubLayerDimensionAttribute(key, nullValue) {\n    return cell => {\n      const {sortedBins, scaleFunc} = this.state.dimensions[key];\n      const bin = sortedBins.binMap[cell.index];\n\n      if (bin && bin.counts === 0) {\n        // no points left in bin after filtering\n        return nullValue;\n      }\n      const cv = bin && bin.value;\n      const domain = scaleFunc.domain();\n\n      const isValueInDomain = cv >= domain[0] && cv <= domain[domain.length - 1];\n\n      // if cell value is outside domain, set alpha to 0\n      return isValueInDomain ? scaleFunc(cv) : nullValue;\n    };\n  }\n\n  getSubLayerAccessors(props) {\n    const accessors = {};\n    for (const key in this.dimensionUpdaters) {\n      const {accessor} = this.dimensionUpdaters[key];\n      accessors[accessor] = this.getSubLayerDimensionAttribute(props, key);\n    }\n\n    return accessors;\n  }\n\n  getPickingInfo({info}) {\n    const isPicked = info.picked && info.index > -1;\n    let object = null;\n\n    if (isPicked) {\n      // const {sortedColorBins, sortedElevationBins} = this.state;\n\n      const cell = this.state.layerData.data[info.index];\n\n      const binInfo = {};\n      for (const key in this.dimensionUpdaters) {\n        const {pickingInfo} = this.dimensionUpdaters[key];\n        const {sortedBins} = this.state.dimensions[key];\n        const value = sortedBins.binMap[cell.index] && sortedBins.binMap[cell.index].value;\n        binInfo[pickingInfo] = value;\n      }\n\n      object = Object.assign(binInfo, cell, {\n        points: cell.filteredPoints || cell.points\n      });\n    }\n\n    // override object with picked cell\n    info.picked = Boolean(object);\n    info.object = object;\n\n    return info;\n  }\n\n  getAccessor(dimensionKey) {\n    if (!this.dimensionUpdaters.hasOwnProperty(dimensionKey)) {\n      return nop;\n    }\n    return this.dimensionUpdaters[dimensionKey].attributeAccessor;\n  }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {GridCellLayer} from '@deck.gl/layers';\nimport {Accessor, AccessorFunction, Color, Position, Material, DefaultProps} from '@deck.gl/core';\n\nimport {defaultColorRange} from '../utils/color-utils';\nimport {pointToDensityGridDataCPU} from './grid-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer, {AggregationLayerProps} from '../aggregation-layer';\n\nimport {Layer, UpdateParameters, GetPickingInfoParams, PickingInfo} from '@deck.gl/core';\nimport {AggregateAccessor} from '../types';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction nop() {}\n\nconst defaultProps: DefaultProps<CPUGridLayerProps> = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {type: 'accessor', value: null}, // default value is calculated from `getColorWeight` and `colorAggregation`\n  getColorWeight: {type: 'accessor', value: 1},\n  colorAggregation: 'SUM',\n  lowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  upperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {type: 'accessor', value: null}, // default value is calculated from `getElevationWeight` and `elevationAggregation`\n  getElevationWeight: {type: 'accessor', value: 1},\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  elevationUpperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n\n  gridAggregator: pointToDensityGridDataCPU,\n\n  // grid\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getPosition: {type: 'accessor', value: x => x.position},\n  extruded: false,\n\n  // Optional material for 'lighting' shader module\n  material: true,\n\n  // data filter\n  _filterData: {type: 'function', value: null, optional: true}\n};\n\n/** All properties supported by CPUGridLayer. */\nexport type CPUGridLayerProps<DataT = any> = _CPUGridLayerProps<DataT> &\n  AggregationLayerProps<DataT>;\n\n/** Properties added by CPUGridLayer. */\ntype _CPUGridLayerProps<DataT> = {\n  /**\n   * Size of each cell in meters.\n   * @default 1000\n   */\n  cellSize?: number;\n\n  /**\n   * Color scale domain, default is set to the extent of aggregated weights in each cell.\n   * @default [min(colorWeight), max(colorWeight)]\n   */\n  colorDomain?: [number, number] | null;\n\n  /**\n   * Default: [colorbrewer](http://colorbrewer2.org/#type=sequential&scheme=YlOrRd&n=6) `6-class YlOrRd`\n   */\n  colorRange?: Color[];\n\n  /**\n   * Cell size multiplier, clamped between 0 - 1.\n   * @default 1\n   */\n  coverage?: number;\n\n  /**\n   * Elevation scale input domain, default is set to between 0 and the max of aggregated weights in each cell.\n   * @default [0, max(elevationWeight)]\n   */\n  elevationDomain?: [number, number] | null;\n\n  /**\n   * Elevation scale output range.\n   * @default [0, 1000]\n   */\n  elevationRange?: [number, number];\n\n  /**\n   * Cell elevation multiplier.\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /**\n   * Whether to enable cell elevation. If set to false, all cell will be flat.\n   * @default true\n   */\n  extruded?: boolean;\n\n  /**\n   * Filter cells and re-calculate color by `upperPercentile`.\n   * Cells with value arger than the upperPercentile will be hidden.\n   * @default 100\n   */\n  upperPercentile?: number;\n\n  /**\n   * Filter cells and re-calculate color by `lowerPercentile`.\n   * Cells with value smaller than the lowerPercentile will be hidden.\n   * @default 0\n   */\n  lowerPercentile?: number;\n\n  /**\n   * Filter cells and re-calculate elevation by `elevationUpperPercentile`.\n   * Cells with elevation value larger than the `elevationUpperPercentile` will be hidden.\n   * @default 100\n   */\n  elevationUpperPercentile?: number;\n\n  /**\n   * Filter cells and re-calculate elevation by `elevationLowerPercentile`.\n   * Cells with elevation value larger than the `elevationLowerPercentile` will be hidden.\n   * @default 0\n   */\n  elevationLowerPercentile?: number;\n\n  /**\n   * Scaling function used to determine the color of the grid cell, default value is 'quantize'.\n   * Supported Values are 'quantize', 'linear', 'quantile' and 'ordinal'.\n   * @default 'quantize'\n   */\n  colorScaleType?: 'quantize' | 'linear' | 'quantile' | 'ordinal';\n\n  /**\n   * Scaling function used to determine the elevation of the grid cell, only supports 'linear'.\n   */\n  elevationScaleType?: 'linear';\n\n  // TODO - document\n  gridAggregator?: (props: any, params: any) => any;\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n\n  /**\n   * Defines the operation used to aggregate all data object weights to calculate a cell's color value.\n   * @default 'SUM'\n   */\n  colorAggregation?: 'SUM' | 'MEAN' | 'MIN' | 'MAX';\n\n  /**\n   * Defines the operation used to aggregate all data object weights to calculate a cell's elevation value.\n   * @default 'SUM'\n   */\n  elevationAggregation?: 'SUM' | 'MEAN' | 'MIN' | 'MAX';\n\n  /**\n   * Method called to retrieve the position of each object.\n   * @default object => object.position\n   */\n  getPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * The weight of a data object used to calculate the color value for a cell.\n   * @default 1\n   */\n  getColorWeight?: Accessor<DataT, number>;\n\n  /**\n   * After data objects are aggregated into cells, this accessor is called on each cell to get the value that its color is based on.\n   * @default null\n   */\n  getColorValue?: AggregateAccessor<DataT> | null;\n\n  /**\n   * The weight of a data object used to calculate the elevation value for a cell.\n   * @default 1\n   */\n  getElevationWeight?: Accessor<DataT, number>;\n\n  /**\n   * After data objects are aggregated into cells, this accessor is called on each cell to get the value that its elevation is based on.\n   * @default null\n   */\n  getElevationValue?: AggregateAccessor<DataT> | null;\n\n  /**\n   * This callback will be called when bin color domain has been calculated.\n   * @default () => {}\n   */\n  onSetColorDomain?: (minMax: [number, number]) => void;\n\n  /**\n   * This callback will be called when bin elevation domain has been calculated.\n   * @default () => {}\n   */\n  onSetElevationDomain?: (minMax: [number, number]) => void;\n\n  /**\n   * (Experimental) Filter data objects\n   */\n  _filterData: null | ((d: DataT) => boolean);\n};\n\n/** Aggregate data into a grid-based heatmap. Aggregation is performed on CPU. */\nexport default class CPUGridLayer<\n  DataT = any,\n  ExtraPropsT extends {} = {}\n> extends AggregationLayer<DataT, ExtraPropsT & Required<_CPUGridLayerProps<DataT>>> {\n  static layerName = 'CPUGridLayer';\n  static defaultProps = defaultProps;\n\n  initializeState(): void {\n    const cpuAggregator = new CPUAggregator({\n      getAggregator: props => props.gridAggregator,\n      getCellSize: props => props.cellSize\n    });\n\n    this.state = {\n      cpuAggregator,\n      aggregatorState: cpuAggregator.state\n    };\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.add({\n      positions: {size: 3, type: GL.DOUBLE, accessor: 'getPosition'}\n    });\n    // color and elevation attributes can't be added as attributes\n    // they are calcualted using 'getValue' accessor that takes an array of pints.\n  }\n\n  updateState(opts: UpdateParameters<this>) {\n    super.updateState(opts);\n    this.setState({\n      // make a copy of the internal state of cpuAggregator for testing\n      aggregatorState: this.state.cpuAggregator.updateState(opts, {\n        viewport: this.context.viewport,\n        attributes: this.getAttributes(),\n        numInstances: this.getNumInstances()\n      })\n    });\n  }\n\n  getPickingInfo({info}: GetPickingInfoParams): PickingInfo {\n    return this.state.cpuAggregator.getPickingInfo({info});\n  }\n\n  // create a method for testing\n  _onGetSublayerColor(cell) {\n    return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n  }\n\n  // create a method for testing\n  _onGetSublayerElevation(cell) {\n    return this.state.cpuAggregator.getAccessor('elevation')(cell);\n  }\n\n  _getSublayerUpdateTriggers() {\n    return this.state.cpuAggregator.getUpdateTriggers(this.props);\n  }\n\n  renderLayers(): Layer {\n    const {elevationScale, extruded, cellSize, coverage, material, transitions} = this.props;\n    const {cpuAggregator} = this.state;\n    const SubLayerClass = this.getSubLayerClass('grid-cell', GridCellLayer);\n    const updateTriggers = this._getSublayerUpdateTriggers();\n\n    return new SubLayerClass(\n      {\n        cellSize,\n        coverage,\n        material,\n        elevationScale,\n        extruded,\n\n        getFillColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getFillColor: transitions.getColorValue || transitions.getColorWeight,\n          getElevation: transitions.getElevationValue || transitions.getElevationWeight\n        }\n      },\n      this.getSubLayerProps({\n        id: 'grid-cell',\n        updateTriggers\n      }),\n      {\n        data: cpuAggregator.state.layerData.data\n      }\n    );\n  }\n}\n", "var thirdPi = Math.PI / 3,\n    angles = [0, thirdPi, 2 * thirdPi, 3 * thirdPi, 4 * thirdPi, 5 * thirdPi];\n\nfunction pointX(d) {\n  return d[0];\n}\n\nfunction pointY(d) {\n  return d[1];\n}\n\nexport default function() {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 1,\n      y1 = 1,\n      x = pointX,\n      y = pointY,\n      r,\n      dx,\n      dy;\n\n  function hexbin(points) {\n    var binsById = {}, bins = [], i, n = points.length;\n\n    for (i = 0; i < n; ++i) {\n      if (isNaN(px = +x.call(null, point = points[i], i, points))\n          || isNaN(py = +y.call(null, point, i, points))) continue;\n\n      var point,\n          px,\n          py,\n          pj = Math.round(py = py / dy),\n          pi = Math.round(px = px / dx - (pj & 1) / 2),\n          py1 = py - pj;\n\n      if (Math.abs(py1) * 3 > 1) {\n        var px1 = px - pi,\n            pi2 = pi + (px < pi ? -1 : 1) / 2,\n            pj2 = pj + (py < pj ? -1 : 1),\n            px2 = px - pi2,\n            py2 = py - pj2;\n        if (px1 * px1 + py1 * py1 > px2 * px2 + py2 * py2) pi = pi2 + (pj & 1 ? 1 : -1) / 2, pj = pj2;\n      }\n\n      var id = pi + \"-\" + pj, bin = binsById[id];\n      if (bin) bin.push(point);\n      else {\n        bins.push(bin = binsById[id] = [point]);\n        bin.x = (pi + (pj & 1) / 2) * dx;\n        bin.y = pj * dy;\n      }\n    }\n\n    return bins;\n  }\n\n  function hexagon(radius) {\n    var x0 = 0, y0 = 0;\n    return angles.map(function(angle) {\n      var x1 = Math.sin(angle) * radius,\n          y1 = -Math.cos(angle) * radius,\n          dx = x1 - x0,\n          dy = y1 - y0;\n      x0 = x1, y0 = y1;\n      return [dx, dy];\n    });\n  }\n\n  hexbin.hexagon = function(radius) {\n    return \"m\" + hexagon(radius == null ? r : +radius).join(\"l\") + \"z\";\n  };\n\n  hexbin.centers = function() {\n    var centers = [],\n        j = Math.round(y0 / dy),\n        i = Math.round(x0 / dx);\n    for (var y = j * dy; y < y1 + r; y += dy, ++j) {\n      for (var x = i * dx + (j & 1) * dx / 2; x < x1 + dx / 2; x += dx) {\n        centers.push([x, y]);\n      }\n    }\n    return centers;\n  };\n\n  hexbin.mesh = function() {\n    var fragment = hexagon(r).slice(0, 4).join(\"l\");\n    return hexbin.centers().map(function(p) { return \"M\" + p + \"m\" + fragment; }).join(\"\");\n  };\n\n  hexbin.x = function(_) {\n    return arguments.length ? (x = _, hexbin) : x;\n  };\n\n  hexbin.y = function(_) {\n    return arguments.length ? (y = _, hexbin) : y;\n  };\n\n  hexbin.radius = function(_) {\n    return arguments.length ? (r = +_, dx = r * 2 * Math.sin(thirdPi), dy = r * 1.5, hexbin) : r;\n  };\n\n  hexbin.size = function(_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], hexbin) : [x1 - x0, y1 - y0];\n  };\n\n  hexbin.extent = function(_) {\n    return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], hexbin) : [[x0, y0], [x1, y1]];\n  };\n\n  return hexbin.radius(1);\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {hexbin} from 'd3-hexbin';\nimport {createIterable, log} from '@deck.gl/core';\n\n/**\n * Use d3-hexbin to performs hexagonal binning from geo points to hexagons\n * @param {Iterable} data - array of points\n * @param {Number} radius - hexagon radius in meter\n * @param {function} getPosition - get points lon lat\n * @param {Object} viewport - current viewport object\n\n * @return {Object} - hexagons and countRange\n */\nexport function pointToHexbin(props, aggregationParams) {\n  const {data, radius} = props;\n  const {viewport, attributes} = aggregationParams;\n  // get hexagon radius in mercator world unit\n  const centerLngLat = data.length ? getPointsCenter(data, aggregationParams) : null;\n  const radiusCommon = getRadiusInCommon(radius, viewport, centerLngLat);\n\n  // add world space coordinates to points\n  const screenPoints = [];\n  const {iterable, objectInfo} = createIterable(data);\n  const positions = attributes.positions.value;\n  const {size} = attributes.positions.getAccessor();\n  for (const object of iterable) {\n    objectInfo.index++;\n    const posIndex = objectInfo.index * size;\n    const position = [positions[posIndex], positions[posIndex + 1]];\n    const arrayIsFinite = Number.isFinite(position[0]) && Number.isFinite(position[1]);\n    if (arrayIsFinite) {\n      screenPoints.push({\n        screenCoord: viewport.projectFlat(position),\n        source: object,\n        index: objectInfo.index\n      });\n    } else {\n      log.warn('HexagonLayer: invalid position')();\n    }\n  }\n\n  const newHexbin = hexbin()\n    .radius(radiusCommon)\n    .x(d => d.screenCoord[0])\n    .y(d => d.screenCoord[1]);\n\n  const hexagonBins = newHexbin(screenPoints);\n\n  return {\n    hexagons: hexagonBins.map((hex, index) => ({\n      position: viewport.unprojectFlat([hex.x, hex.y]),\n      points: hex,\n      index\n    })),\n    radiusCommon\n  };\n}\n\n/**\n * Get the bounding box of all data points\n */\nexport function getPointsCenter(data, aggregationParams) {\n  const {attributes} = aggregationParams;\n  const positions = attributes.positions.value;\n  const {size} = attributes.positions.getAccessor();\n\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  let i;\n\n  for (i = 0; i < size * data.length; i += size) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    const arrayIsFinite = Number.isFinite(x) && Number.isFinite(y);\n\n    if (arrayIsFinite) {\n      minX = Math.min(x, minX);\n      maxX = Math.max(x, maxX);\n      minY = Math.min(y, minY);\n      maxY = Math.max(y, maxY);\n    }\n  }\n\n  // return center\n  return [minX, minY, maxX, maxY].every(Number.isFinite)\n    ? [(minX + maxX) / 2, (minY + maxY) / 2]\n    : null;\n}\n\n/**\n * Get radius in mercator world space coordinates from meter\n * @param {Number} radius - in meter\n * @param {Object} viewport - current viewport object\n * @param {Array<Number>} center - data center\n\n * @return {Number} radius in mercator world spcae coordinates\n */\nexport function getRadiusInCommon(radius, viewport, center) {\n  const {unitsPerMeter} = viewport.getDistanceScales(center);\n  // x, y distance should be the same\n  return radius * unitsPerMeter[0];\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Accessor,\n  AccessorFunction,\n  Color,\n  log,\n  Position,\n  Material,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport {ColumnLayer} from '@deck.gl/layers';\n\nimport {defaultColorRange} from '../utils/color-utils';\n\nimport {pointToHexbin} from './hexagon-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer, {AggregationLayerProps} from '../aggregation-layer';\n\nimport GL from '@luma.gl/constants';\nimport {AggregateAccessor} from '../types';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction nop() {}\n\nconst defaultProps: DefaultProps<HexagonLayerProps> = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {type: 'accessor', value: null}, // default value is calcuated from `getColorWeight` and `colorAggregation`\n  getColorWeight: {type: 'accessor', value: 1},\n  colorAggregation: 'SUM',\n  lowerPercentile: {type: 'number', value: 0, min: 0, max: 100},\n  upperPercentile: {type: 'number', value: 100, min: 0, max: 100},\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {type: 'accessor', value: null}, // default value is calcuated from `getElevationWeight` and `elevationAggregation`\n  getElevationWeight: {type: 'accessor', value: 1},\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {type: 'number', value: 0, min: 0, max: 100},\n  elevationUpperPercentile: {type: 'number', value: 100, min: 0, max: 100},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n\n  radius: {type: 'number', value: 1000, min: 1},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  extruded: false,\n  hexagonAggregator: pointToHexbin,\n  getPosition: {type: 'accessor', value: x => x.position},\n  // Optional material for 'lighting' shader module\n  material: true,\n\n  // data filter\n  _filterData: {type: 'function', value: null, optional: true}\n};\n\n/** All properties supported by by HexagonLayer. */\nexport type HexagonLayerProps<DataT = any> = _HexagonLayerProps<DataT> &\n  AggregationLayerProps<DataT>;\n\n/** Properties added by HexagonLayer. */\ntype _HexagonLayerProps<DataT = any> = {\n  /**\n   * Radius of hexagon bin in meters. The hexagons are pointy-topped (rather than flat-topped).\n   * @default 1000\n   */\n  radius?: number;\n\n  /**\n   * Function to aggregate data into hexagonal bins.\n   * @default d3-hexbin\n   */\n  hexagonAggregator?: (props: any, params: any) => any;\n\n  /**\n   * Color scale input domain.\n   * @default [min(colorWeight), max(colorWeight)]\n   */\n  colorDomain?: [number, number] | null;\n\n  /**\n   * Specified as an array of colors [color1, color2, ...].\n   * @default `6-class YlOrRd` - [colorbrewer](http://colorbrewer2.org/#type=sequential&scheme=YlOrRd&n=6)\n   */\n  colorRange?: Color[];\n\n  /**\n   * Hexagon radius multiplier, clamped between 0 - 1.\n   * @default 1\n   */\n  coverage?: number;\n\n  /**\n   * Elevation scale input domain. The elevation scale is a linear scale that maps number of counts to elevation.\n   * @default [0, max(elevationWeight)]\n   */\n  elevationDomain?: [number, number] | null;\n\n  /**\n   * Elevation scale output range.\n   * @default [0, 1000]\n   */\n  elevationRange?: [number, number];\n\n  /**\n   * Hexagon elevation multiplier.\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /**\n   * Whether to enable cell elevation. If set to false, all cell will be flat.\n   * @default false\n   */\n  extruded?: boolean;\n\n  /**\n   * Filter bins and re-calculate color by `upperPercentile`.\n   * Hexagons with color value larger than the `upperPercentile` will be hidden.\n   * @default 100\n   */\n  upperPercentile?: number;\n\n  /**\n   * Filter bins and re-calculate color by `lowerPercentile`.\n   * Hexagons with color value smaller than the `lowerPercentile` will be hidden.\n   * @default 0\n   */\n  lowerPercentile?: number;\n\n  /**\n   * Filter bins and re-calculate elevation by `elevationUpperPercentile`.\n   * Hexagons with elevation value larger than the `elevationUpperPercentile` will be hidden.\n   * @default 100\n   */\n  elevationUpperPercentile?: number;\n\n  /**\n   * Filter bins and re-calculate elevation by `elevationLowerPercentile`.\n   * Hexagons with elevation value larger than the `elevationLowerPercentile` will be hidden.\n   * @default 0\n   */\n  elevationLowerPercentile?: number;\n\n  /**\n   * Scaling function used to determine the color of the grid cell, default value is 'quantize'.\n   * Supported Values are 'quantize', 'quantile' and 'ordinal'.\n   * @default 'quantize'\n   */\n  colorScaleType?: 'quantize' | 'quantile' | 'ordinal';\n\n  /**\n   * Scaling function used to determine the elevation of the grid cell, only supports 'linear'.\n   */\n  elevationScaleType?: 'linear';\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n\n  /**\n   * Defines the operation used to aggregate all data object weights to calculate a cell's color value.\n   * @default 'SUM'\n   */\n  colorAggregation?: 'SUM' | 'MEAN' | 'MIN' | 'MAX';\n\n  /**\n   * Defines the operation used to aggregate all data object weights to calculate a cell's elevation value.\n   * @default 'SUM'\n   */\n  elevationAggregation?: 'SUM' | 'MEAN' | 'MIN' | 'MAX';\n\n  /**\n   * Method called to retrieve the position of each object.\n   * @default object => object.position\n   */\n  getPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * The weight of a data object used to calculate the color value for a bin.\n   * @default 1\n   */\n  getColorWeight?: Accessor<DataT, number>;\n\n  /**\n   * After data objects are aggregated into bins, this accessor is called on each cell to get the value that its color is based on.\n   * @default null\n   */\n  getColorValue?: AggregateAccessor<DataT> | null;\n\n  /**\n   * The weight of a data object used to calculate the elevation value for a bin.\n   * @default 1\n   */\n  getElevationWeight?: Accessor<DataT, number>;\n\n  /**\n   * After data objects are aggregated into bins, this accessor is called on each cell to get the value that its elevation is based on.\n   * @default null\n   */\n  getElevationValue?: AggregateAccessor<DataT> | null;\n\n  /**\n   * This callback will be called when cell color domain has been calculated.\n   * @default () => {}\n   */\n  onSetColorDomain?: (minMax: [number, number]) => void;\n\n  /**\n   * This callback will be called when cell elevation domain has been calculated.\n   * @default () => {}\n   */\n  onSetElevationDomain?: (minMax: [number, number]) => void;\n\n  /**\n   * (Experimental) Filter data objects\n   */\n  _filterData: null | ((d: DataT) => boolean);\n};\n\n/** Aggregates data into a hexagon-based heatmap. The color and height of a hexagon are determined based on the objects it contains. */\nexport default class HexagonLayer<DataT, ExtraPropsT extends {} = {}> extends AggregationLayer<\n  DataT,\n  ExtraPropsT & Required<_HexagonLayerProps<DataT>>\n> {\n  static layerName = 'HexagonLayer';\n  static defaultProps = defaultProps;\n\n  state!: AggregationLayer<DataT>['state'] & {\n    cpuAggregator: CPUAggregator;\n    aggregatorState: any;\n  };\n  initializeState() {\n    const cpuAggregator = new CPUAggregator({\n      getAggregator: props => props.hexagonAggregator,\n      getCellSize: props => props.radius\n    });\n\n    this.state = {\n      cpuAggregator,\n      aggregatorState: cpuAggregator.state,\n      vertices: null\n    };\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.add({\n      positions: {size: 3, type: GL.DOUBLE, accessor: 'getPosition'}\n    });\n    // color and elevation attributes can't be added as attributes\n    // they are calculated using 'getValue' accessor that takes an array of pints.\n  }\n\n  updateState(opts: UpdateParameters<this>) {\n    super.updateState(opts);\n\n    if (opts.changeFlags.propsOrDataChanged) {\n      const aggregatorState = this.state.cpuAggregator.updateState(opts, {\n        viewport: this.context.viewport,\n        attributes: this.getAttributes()\n      });\n      if (this.state.aggregatorState.layerData !== aggregatorState.layerData) {\n        // if user provided custom aggregator and returns hexagonVertices,\n        // Need to recalculate radius and angle based on vertices\n        const {hexagonVertices} = aggregatorState.layerData || {};\n        this.setState({\n          vertices: hexagonVertices && this.convertLatLngToMeterOffset(hexagonVertices)\n        });\n      }\n\n      this.setState({\n        // make a copy of the internal state of cpuAggregator for testing\n        aggregatorState\n      });\n    }\n  }\n\n  convertLatLngToMeterOffset(hexagonVertices) {\n    const {viewport} = this.context;\n    if (Array.isArray(hexagonVertices) && hexagonVertices.length === 6) {\n      // get centroid of hexagons\n      const vertex0 = hexagonVertices[0];\n      const vertex3 = hexagonVertices[3];\n\n      const centroid = [(vertex0[0] + vertex3[0]) / 2, (vertex0[1] + vertex3[1]) / 2];\n      const centroidFlat = viewport.projectFlat(centroid);\n\n      const {metersPerUnit} = viewport.getDistanceScales(centroid);\n\n      // offset all points by centroid to meter offset\n      const vertices = hexagonVertices.map(vt => {\n        const vtFlat = viewport.projectFlat(vt);\n\n        return [\n          (vtFlat[0] - centroidFlat[0]) * metersPerUnit[0],\n          (vtFlat[1] - centroidFlat[1]) * metersPerUnit[1]\n        ];\n      });\n\n      return vertices;\n    }\n\n    log.error('HexagonLayer: hexagonVertices needs to be an array of 6 points')();\n    return null;\n  }\n\n  getPickingInfo({info}) {\n    return this.state.cpuAggregator.getPickingInfo({info});\n  }\n\n  // create a method for testing\n  _onGetSublayerColor(cell) {\n    return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n  }\n\n  // create a method for testing\n  _onGetSublayerElevation(cell) {\n    return this.state.cpuAggregator.getAccessor('elevation')(cell);\n  }\n\n  _getSublayerUpdateTriggers() {\n    return this.state.cpuAggregator.getUpdateTriggers(this.props);\n  }\n\n  renderLayers() {\n    const {elevationScale, extruded, coverage, material, transitions} = this.props;\n    const {aggregatorState, vertices} = this.state;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n    const updateTriggers = this._getSublayerUpdateTriggers();\n\n    const geometry = vertices\n      ? {vertices, radius: 1}\n      : {\n          // default geometry\n          radius: aggregatorState.layerData.radiusCommon || 1,\n          radiusUnits: 'common',\n          angle: 90\n        };\n    return new SubLayerClass(\n      {\n        ...geometry,\n        diskResolution: 6,\n        elevationScale,\n        extruded,\n        coverage,\n        material,\n\n        getFillColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getFillColor: transitions.getColorValue || transitions.getColorWeight,\n          getElevation: transitions.getElevationValue || transitions.getElevationWeight\n        }\n      },\n      this.getSubLayerProps({\n        id: 'hexagon-cell',\n        updateTriggers\n      }),\n      {\n        data: aggregatorState.layerData.data\n      }\n    );\n  }\n}\n", "// Code to Offsets Map needed to implement Marching Squares algorithm\n// Ref: https://en.wikipedia.org/wiki/Marching_squares\n\n// Table to map code to the intersection offsets\n// All offsets are relative to the center of marching cell (which is top right corner of grid-cell, and center of marching-square)\nconst HALF = 0.5;\nconst ONE6TH = 1 / 6;\nconst OFFSET = {\n  N: [0, HALF], // NORTH\n  E: [HALF, 0], // EAST\n  S: [0, -HALF], // SOUTH\n  W: [-HALF, 0], // WEST\n\n  // CORNERS\n  NE: [HALF, HALF],\n  NW: [-HALF, HALF],\n  SE: [HALF, -HALF],\n  SW: [-HALF, -HALF]\n};\n\n// NOTE: vertices are ordered in CCW direction, starting from NW corner\n\n// Triangles\nconst SW_TRIANGLE = [OFFSET.W, OFFSET.SW, OFFSET.S];\nconst SE_TRIANGLE = [OFFSET.S, OFFSET.SE, OFFSET.E];\nconst NE_TRIANGLE = [OFFSET.E, OFFSET.NE, OFFSET.N];\nconst NW_TRIANGLE = [OFFSET.NW, OFFSET.W, OFFSET.N];\n\n// Trapezoids\nconst SW_TRAPEZOID = [\n  [-HALF, ONE6TH],\n  [-HALF, -ONE6TH],\n  [-ONE6TH, -HALF],\n  [ONE6TH, -HALF]\n];\nconst SE_TRAPEZOID = [\n  [-ONE6TH, -HALF],\n  [ONE6TH, -HALF],\n  [HALF, -ONE6TH],\n  [HALF, ONE6TH]\n];\nconst NE_TRAPEZOID = [\n  [HALF, -ONE6TH],\n  [HALF, ONE6TH],\n  [ONE6TH, HALF],\n  [-ONE6TH, HALF]\n];\nconst NW_TRAPEZOID = [\n  [-HALF, ONE6TH],\n  [-HALF, -ONE6TH],\n  [ONE6TH, HALF],\n  [-ONE6TH, HALF]\n];\n\n// Rectangles\nconst S_RECTANGLE = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.E];\nconst E_RECTANGLE = [OFFSET.S, OFFSET.SE, OFFSET.NE, OFFSET.N];\nconst N_RECTANGLE = [OFFSET.NW, OFFSET.W, OFFSET.E, OFFSET.NE];\nconst W_RECTANGLE = [OFFSET.NW, OFFSET.SW, OFFSET.S, OFFSET.N];\nconst EW_RECTANGEL = [\n  [-HALF, ONE6TH],\n  [-HALF, -ONE6TH],\n  [HALF, -ONE6TH],\n  [HALF, ONE6TH]\n];\nconst SN_RECTANGEL = [\n  [-ONE6TH, -HALF],\n  [ONE6TH, -HALF],\n  [ONE6TH, HALF],\n  [-ONE6TH, HALF]\n];\n\n// Square\nconst SQUARE = [OFFSET.NW, OFFSET.SW, OFFSET.SE, OFFSET.NE];\n\n// Pentagons\nconst SW_PENTAGON = [OFFSET.NW, OFFSET.SW, OFFSET.SE, OFFSET.E, OFFSET.N];\nconst SE_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.NE, OFFSET.N];\nconst NE_PENTAGON = [OFFSET.NW, OFFSET.W, OFFSET.S, OFFSET.SE, OFFSET.NE];\nconst NW_PENTAGON = [OFFSET.NW, OFFSET.SW, OFFSET.S, OFFSET.E, OFFSET.NE];\n\nconst NW_N_PENTAGON = [OFFSET.NW, OFFSET.W, [HALF, -ONE6TH], [HALF, ONE6TH], OFFSET.N];\nconst NE_E_PENTAGON = [[-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.E, OFFSET.NE, OFFSET.N];\nconst SE_S_PENTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.S, OFFSET.SE, OFFSET.E];\nconst SW_W_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, [ONE6TH, HALF], [-ONE6TH, HALF]];\n\nconst NW_W_PENTAGON = [OFFSET.NW, OFFSET.W, [-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.N];\nconst NE_N_PENTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.E, OFFSET.NE, OFFSET.N];\nconst SE_E_PENTAGON = [OFFSET.S, OFFSET.SE, OFFSET.E, [ONE6TH, HALF], [-ONE6TH, HALF]];\nconst SW_S_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, [HALF, -ONE6TH], [HALF, ONE6TH]];\n\n// Hexagon\nconst S_HEXAGON = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.E, [ONE6TH, HALF], [-ONE6TH, HALF]];\nconst E_HEXAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.S, OFFSET.SE, OFFSET.NE, OFFSET.N];\nconst N_HEXAGON = [OFFSET.NW, OFFSET.W, [-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.E, OFFSET.NE];\nconst W_HEXAGON = [OFFSET.NW, OFFSET.SW, OFFSET.S, [HALF, -ONE6TH], [HALF, ONE6TH], OFFSET.N];\nconst SW_NE_HEXAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, OFFSET.E, OFFSET.NE, OFFSET.N];\nconst NW_SE_HEXAGON = [OFFSET.NW, OFFSET.W, OFFSET.S, OFFSET.SE, OFFSET.E, OFFSET.N];\n\n// Heptagon (7-sided)\nconst NE_HEPTAGON = [\n  [-HALF, ONE6TH],\n  [-HALF, -ONE6TH],\n  [-ONE6TH, -HALF],\n  [ONE6TH, -HALF],\n  OFFSET.E,\n  OFFSET.NE,\n  OFFSET.N\n];\nconst SW_HEPTAGON = [\n  OFFSET.W,\n  OFFSET.SW,\n  OFFSET.S,\n  [HALF, -ONE6TH],\n  [HALF, ONE6TH],\n  [ONE6TH, HALF],\n  [-ONE6TH, HALF]\n];\nconst NW_HEPTAGON = [\n  OFFSET.NW,\n  OFFSET.W,\n  [-ONE6TH, -HALF],\n  [ONE6TH, -HALF],\n  [HALF, -ONE6TH],\n  [HALF, ONE6TH],\n  OFFSET.N\n];\nconst SE_HEPTAGON = [\n  [-HALF, ONE6TH],\n  [-HALF, -ONE6TH],\n  OFFSET.S,\n  OFFSET.SE,\n  OFFSET.E,\n  [ONE6TH, HALF],\n  [-ONE6TH, HALF]\n];\n\n// Octagon\nconst OCTAGON = [\n  [-HALF, ONE6TH],\n  [-HALF, -ONE6TH],\n  [-ONE6TH, -HALF],\n  [ONE6TH, -HALF],\n  [HALF, -ONE6TH],\n  [HALF, ONE6TH],\n  [ONE6TH, HALF],\n  [-ONE6TH, HALF]\n];\n\n// Note: above wiki page invertes white/black dots for generating the code, we don't\nexport const ISOLINES_CODE_OFFSET_MAP = {\n  // key is equal to the code of 4 vertices (invert the code specified in wiki)\n  // value can be an array or an Object\n  // Array : [line] or [line, line], where each line is [start-point, end-point], and each point is [x, y]\n  // Object : to handle saddle cases, whos output depends on mean value of all 4 corners\n  //  key: code of mean value (0 or 1)\n  //  value: Array , as above defines one or two line segments\n  0: [],\n  1: [[OFFSET.W, OFFSET.S]],\n  2: [[OFFSET.S, OFFSET.E]],\n  3: [[OFFSET.W, OFFSET.E]],\n  4: [[OFFSET.N, OFFSET.E]],\n  5: {\n    0: [\n      [OFFSET.W, OFFSET.S],\n      [OFFSET.N, OFFSET.E]\n    ],\n    1: [\n      [OFFSET.W, OFFSET.N],\n      [OFFSET.S, OFFSET.E]\n    ]\n  },\n  6: [[OFFSET.N, OFFSET.S]],\n  7: [[OFFSET.W, OFFSET.N]],\n  8: [[OFFSET.W, OFFSET.N]],\n  9: [[OFFSET.N, OFFSET.S]],\n  10: {\n    0: [\n      [OFFSET.W, OFFSET.N],\n      [OFFSET.S, OFFSET.E]\n    ],\n    1: [\n      [OFFSET.W, OFFSET.S],\n      [OFFSET.N, OFFSET.E]\n    ]\n  },\n  11: [[OFFSET.N, OFFSET.E]],\n  12: [[OFFSET.W, OFFSET.E]],\n  13: [[OFFSET.S, OFFSET.E]],\n  14: [[OFFSET.W, OFFSET.S]],\n  15: []\n};\n\nfunction ternaryToIndex(ternary) {\n  return parseInt(ternary, 4);\n}\n\nexport const ISOBANDS_CODE_OFFSET_MAP = {\n  // Below list of cases, follow the same order as in above mentioned wiki page.\n  // Each case has its code on first commented line // T,TR,R,C\n  // where T: Top, TR: Top-right, R: Right and C: current, each will be either 0, 1 or 2\n  // final code is binary representation of above code , where takes 2 digits\n  // for example:  code 2-2-2-1 => 10-10-10-01 => 10101001 => 169\n\n  // no contours\n  [ternaryToIndex('0000')]: [],\n  [ternaryToIndex('2222')]: [],\n\n  // single triangle\n  [ternaryToIndex('2221')]: [SW_TRIANGLE],\n  [ternaryToIndex('2212')]: [SE_TRIANGLE],\n  [ternaryToIndex('2122')]: [NE_TRIANGLE],\n  [ternaryToIndex('1222')]: [NW_TRIANGLE],\n  [ternaryToIndex('0001')]: [SW_TRIANGLE],\n  [ternaryToIndex('0010')]: [SE_TRIANGLE],\n  [ternaryToIndex('0100')]: [NE_TRIANGLE],\n  [ternaryToIndex('1000')]: [NW_TRIANGLE],\n\n  // single trapezoid\n  [ternaryToIndex('2220')]: [SW_TRAPEZOID],\n  [ternaryToIndex('2202')]: [SE_TRAPEZOID],\n  [ternaryToIndex('2022')]: [NE_TRAPEZOID],\n  [ternaryToIndex('0222')]: [NW_TRAPEZOID],\n  [ternaryToIndex('0002')]: [SW_TRAPEZOID],\n  [ternaryToIndex('0020')]: [SE_TRAPEZOID],\n  [ternaryToIndex('0200')]: [NE_TRAPEZOID],\n  [ternaryToIndex('2000')]: [NW_TRAPEZOID],\n\n  // single rectangle\n  [ternaryToIndex('0011')]: [S_RECTANGLE],\n  [ternaryToIndex('0110')]: [E_RECTANGLE],\n  [ternaryToIndex('1100')]: [N_RECTANGLE],\n  [ternaryToIndex('1001')]: [W_RECTANGLE],\n  [ternaryToIndex('2211')]: [S_RECTANGLE],\n  [ternaryToIndex('2112')]: [E_RECTANGLE],\n  [ternaryToIndex('1122')]: [N_RECTANGLE],\n  [ternaryToIndex('1221')]: [W_RECTANGLE],\n  [ternaryToIndex('2200')]: [EW_RECTANGEL],\n  [ternaryToIndex('2002')]: [SN_RECTANGEL],\n  [ternaryToIndex('0022')]: [EW_RECTANGEL],\n  [ternaryToIndex('0220')]: [SN_RECTANGEL],\n\n  // single square\n  // 1111\n  [ternaryToIndex('1111')]: [SQUARE],\n\n  // single pentagon\n  [ternaryToIndex('1211')]: [SW_PENTAGON],\n  [ternaryToIndex('2111')]: [SE_PENTAGON],\n  [ternaryToIndex('1112')]: [NE_PENTAGON],\n  [ternaryToIndex('1121')]: [NW_PENTAGON],\n  [ternaryToIndex('1011')]: [SW_PENTAGON],\n  [ternaryToIndex('0111')]: [SE_PENTAGON],\n  [ternaryToIndex('1110')]: [NE_PENTAGON],\n  [ternaryToIndex('1101')]: [NW_PENTAGON],\n  [ternaryToIndex('1200')]: [NW_N_PENTAGON],\n  [ternaryToIndex('0120')]: [NE_E_PENTAGON],\n  [ternaryToIndex('0012')]: [SE_S_PENTAGON],\n  [ternaryToIndex('2001')]: [SW_W_PENTAGON],\n  [ternaryToIndex('1022')]: [NW_N_PENTAGON],\n  [ternaryToIndex('2102')]: [NE_E_PENTAGON],\n  [ternaryToIndex('2210')]: [SE_S_PENTAGON],\n  [ternaryToIndex('0221')]: [SW_W_PENTAGON],\n  [ternaryToIndex('1002')]: [NW_W_PENTAGON],\n  [ternaryToIndex('2100')]: [NE_N_PENTAGON],\n  [ternaryToIndex('0210')]: [SE_E_PENTAGON],\n  [ternaryToIndex('0021')]: [SW_S_PENTAGON],\n  [ternaryToIndex('1220')]: [NW_W_PENTAGON],\n  [ternaryToIndex('0122')]: [NE_N_PENTAGON],\n  [ternaryToIndex('2012')]: [SE_E_PENTAGON],\n  [ternaryToIndex('2201')]: [SW_S_PENTAGON],\n\n  // single hexagon\n  [ternaryToIndex('0211')]: [S_HEXAGON],\n  [ternaryToIndex('2110')]: [E_HEXAGON],\n  [ternaryToIndex('1102')]: [N_HEXAGON],\n  [ternaryToIndex('1021')]: [W_HEXAGON],\n  [ternaryToIndex('2011')]: [S_HEXAGON],\n  [ternaryToIndex('0112')]: [E_HEXAGON],\n  [ternaryToIndex('1120')]: [N_HEXAGON],\n  [ternaryToIndex('1201')]: [W_HEXAGON],\n  [ternaryToIndex('2101')]: [SW_NE_HEXAGON],\n  [ternaryToIndex('0121')]: [SW_NE_HEXAGON],\n  [ternaryToIndex('1012')]: [NW_SE_HEXAGON],\n  [ternaryToIndex('1210')]: [NW_SE_HEXAGON],\n\n  // 6-sided polygons based on mean weight\n  // NOTE: merges mean value codes for extreme changes (as per above Wiki doc)\n  [ternaryToIndex('0101')]: {\n    0: [SW_TRIANGLE, NE_TRIANGLE],\n    1: [SW_NE_HEXAGON],\n    2: [SW_NE_HEXAGON]\n  },\n  [ternaryToIndex('1010')]: {\n    0: [NW_TRIANGLE, SE_TRIANGLE],\n    1: [NW_SE_HEXAGON],\n    2: [NW_SE_HEXAGON]\n  },\n  [ternaryToIndex('2121')]: {\n    0: [SW_NE_HEXAGON],\n    1: [SW_NE_HEXAGON],\n    2: [SW_TRIANGLE, NE_TRIANGLE]\n  },\n  [ternaryToIndex('1212')]: {\n    0: [NW_SE_HEXAGON],\n    1: [NW_SE_HEXAGON],\n    2: [NW_TRIANGLE, SE_TRIANGLE]\n  },\n\n  // 7-sided polygons based on mean weight\n  [ternaryToIndex('2120')]: {\n    0: [NE_HEPTAGON],\n    1: [NE_HEPTAGON],\n    2: [SW_TRAPEZOID, NE_TRIANGLE]\n  },\n  [ternaryToIndex('2021')]: {\n    0: [SW_HEPTAGON],\n    1: [SW_HEPTAGON],\n    2: [SW_TRIANGLE, NE_TRAPEZOID]\n  },\n  [ternaryToIndex('1202')]: {\n    0: [NW_HEPTAGON],\n    1: [NW_HEPTAGON],\n    2: [NW_TRIANGLE, SE_TRAPEZOID]\n  },\n  [ternaryToIndex('0212')]: {\n    0: [SE_HEPTAGON],\n    1: [SE_HEPTAGON],\n    2: [SE_TRIANGLE, NW_TRAPEZOID]\n  },\n  [ternaryToIndex('0102')]: {\n    0: [SW_TRAPEZOID, NE_TRIANGLE],\n    1: [NE_HEPTAGON],\n    2: [NE_HEPTAGON]\n  },\n  [ternaryToIndex('0201')]: {\n    0: [SW_TRIANGLE, NE_TRAPEZOID],\n    1: [SW_HEPTAGON],\n    2: [SW_HEPTAGON]\n  },\n  [ternaryToIndex('1020')]: {\n    0: [NW_TRIANGLE, SE_TRAPEZOID],\n    1: [NW_HEPTAGON],\n    2: [NW_HEPTAGON]\n  },\n  [ternaryToIndex('2010')]: {\n    0: [SE_TRIANGLE, NW_TRAPEZOID],\n    1: [SE_HEPTAGON],\n    2: [SE_HEPTAGON]\n  },\n\n  // 8-sided polygons based on mean weight\n  [ternaryToIndex('2020')]: {\n    0: [NW_TRAPEZOID, SE_TRAPEZOID],\n    1: [OCTAGON],\n    2: [SW_TRAPEZOID, NE_TRAPEZOID]\n  },\n  [ternaryToIndex('0202')]: {\n    0: [NE_TRAPEZOID, SW_TRAPEZOID],\n    1: [OCTAGON],\n    2: [NW_TRAPEZOID, SE_TRAPEZOID]\n  }\n};\n", "// All utility methods needed to implement Marching Squares algorithm\n// Ref: https://en.wikipedia.org/wiki/Marching_squares\n\nimport {log} from '@deck.gl/core';\nimport {ISOLINES_CODE_OFFSET_MAP, ISOBANDS_CODE_OFFSET_MAP} from './marching-squares-codes';\n\nexport const CONTOUR_TYPE = {\n  ISO_LINES: 1,\n  ISO_BANDS: 2\n};\n\nconst DEFAULT_THRESHOLD_DATA = {\n  zIndex: 0,\n  zOffset: 0.005\n};\n\n// Utility methods\n\nfunction getVertexCode(weight: number, threshold: number | number[]): number {\n  // threshold must be a single value or a range (array of size 2)\n\n  // Iso-bands\n  if (Array.isArray(threshold)) {\n    if (weight < threshold[0]) {\n      return 0;\n    }\n    return weight < threshold[1] ? 1 : 2;\n  }\n  // Iso-lines\n  return weight >= threshold ? 1 : 0;\n}\n\n// Returns marching square code for given cell\n/* eslint-disable complexity, max-statements*/\nexport function getCode(opts) {\n  // Assumptions\n  // Origin is on bottom-left , and X increase to right, Y to top\n  // When processing one cell, we process 4 cells, by extending row to top and on column to right\n  // to create a 2X2 cell grid\n  const {cellWeights, x, y, width, height} = opts;\n  let threshold = opts.threshold;\n  if (opts.thresholdValue) {\n    log.deprecated('thresholdValue', 'threshold')();\n    threshold = opts.thresholdValue;\n  }\n\n  const isLeftBoundary = x < 0;\n  const isRightBoundary = x >= width - 1;\n  const isBottomBoundary = y < 0;\n  const isTopBoundary = y >= height - 1;\n  const isBoundary = isLeftBoundary || isRightBoundary || isBottomBoundary || isTopBoundary;\n\n  const weights: Record<string, number> = {};\n  const codes: Record<string, number> = {};\n\n  // TOP\n  if (isLeftBoundary || isTopBoundary) {\n    codes.top = 0;\n  } else {\n    weights.top = cellWeights[(y + 1) * width + x];\n    codes.top = getVertexCode(weights.top, threshold);\n  }\n\n  // TOP-RIGHT\n  if (isRightBoundary || isTopBoundary) {\n    codes.topRight = 0;\n  } else {\n    weights.topRight = cellWeights[(y + 1) * width + x + 1];\n    codes.topRight = getVertexCode(weights.topRight, threshold);\n  }\n\n  // RIGHT\n  if (isRightBoundary || isBottomBoundary) {\n    codes.right = 0;\n  } else {\n    weights.right = cellWeights[y * width + x + 1];\n    codes.right = getVertexCode(weights.right, threshold);\n  }\n\n  // CURRENT\n  if (isLeftBoundary || isBottomBoundary) {\n    codes.current = 0;\n  } else {\n    weights.current = cellWeights[y * width + x];\n    codes.current = getVertexCode(weights.current, threshold);\n  }\n\n  const {top, topRight, right, current} = codes;\n  let code = -1;\n  if (Number.isFinite(threshold)) {\n    code = (top << 3) | (topRight << 2) | (right << 1) | current;\n  }\n  if (Array.isArray(threshold)) {\n    code = (top << 6) | (topRight << 4) | (right << 2) | current;\n  }\n\n  let meanCode = 0;\n  // meanCode is only needed for saddle cases, and they should\n  // only occur when we are not processing a cell on boundary\n  // because when on a boundary either, bottom-row, top-row, left-column or right-column will have both 0 codes\n  if (!isBoundary) {\n    meanCode = getVertexCode(\n      (weights.top + weights.topRight + weights.right + weights.current) / 4,\n      threshold\n    );\n  }\n  return {code, meanCode};\n}\n/* eslint-enable complexity, max-statements*/\n\n// Returns intersection vertices for given cellindex\n// [x, y] refers current marching cell, reference vertex is always top-right corner\nexport function getVertices(opts) {\n  const {gridOrigin, cellSize, x, y, code, meanCode, type = CONTOUR_TYPE.ISO_LINES} = opts;\n  const thresholdData = {...DEFAULT_THRESHOLD_DATA, ...opts.thresholdData};\n  let offsets =\n    type === CONTOUR_TYPE.ISO_BANDS\n      ? ISOBANDS_CODE_OFFSET_MAP[code]\n      : ISOLINES_CODE_OFFSET_MAP[code];\n\n  // handle saddle cases\n  if (!Array.isArray(offsets)) {\n    offsets = offsets[meanCode];\n  }\n\n  // Reference vertex is at top-right move to top-right corner\n\n  const vZ = thresholdData.zIndex * thresholdData.zOffset;\n  const rX = (x + 1) * cellSize[0];\n  const rY = (y + 1) * cellSize[1];\n\n  const refVertexX = gridOrigin[0] + rX;\n  const refVertexY = gridOrigin[1] + rY;\n\n  // offsets format\n  // ISO_LINES: [[1A, 1B], [2A, 2B]],\n  // ISO_BANDS: [[1A, 1B, 1C, ...], [2A, 2B, 2C, ...]],\n\n  // vertices format\n\n  // ISO_LINES: [[x1A, y1A], [x1B, y1B], [x2A, x2B], ...],\n\n  // ISO_BANDS:  => confirms to SolidPolygonLayer's simple polygon format\n  //      [\n  //        [[x1A, y1A], [x1B, y1B], [x1C, y1C] ... ],\n  //        ...\n  //      ]\n\n  if (type === CONTOUR_TYPE.ISO_BANDS) {\n    const polygons: number[][][] = [];\n    offsets.forEach(polygonOffsets => {\n      const polygon: number[][] = [];\n      polygonOffsets.forEach(xyOffset => {\n        const vX = refVertexX + xyOffset[0] * cellSize[0];\n        const vY = refVertexY + xyOffset[1] * cellSize[1];\n        polygon.push([vX, vY, vZ]);\n      });\n      polygons.push(polygon);\n    });\n    return polygons;\n  }\n\n  // default case is ISO_LINES\n  const lines: number[][] = [];\n  offsets.forEach(xyOffsets => {\n    xyOffsets.forEach(offset => {\n      const vX = refVertexX + offset[0] * cellSize[0];\n      const vY = refVertexY + offset[1] * cellSize[1];\n      lines.push([vX, vY, vZ]);\n    });\n  });\n  return lines;\n}\n", "import {getCode, getVertices, CONTOUR_TYPE} from './marching-squares';\n\n// Given all the cell weights, generates contours for each threshold.\n/* eslint-disable max-depth */\nexport function generateContours({\n  thresholdData,\n  cellWeights,\n  gridSize,\n  gridOrigin,\n  cellSize\n}: {\n  thresholdData: any;\n  cellWeights: Float32Array;\n  gridSize: number[];\n  gridOrigin: number[];\n  cellSize: number[];\n}) {\n  const contourSegments: {start: number[]; end: number[]; contour: any}[] = [];\n  const contourPolygons: {vertices: number[][]; contour: any}[] = [];\n  const width = gridSize[0];\n  const height = gridSize[1];\n  let segmentIndex = 0;\n  let polygonIndex = 0;\n\n  for (const data of thresholdData) {\n    const {contour} = data;\n    const {threshold} = contour;\n    for (let x = -1; x < width; x++) {\n      for (let y = -1; y < height; y++) {\n        // Get the MarchingSquares code based on neighbor cell weights.\n        const {code, meanCode} = getCode({\n          cellWeights,\n          threshold,\n          x,\n          y,\n          width,\n          height\n        });\n        const opts = {\n          type: CONTOUR_TYPE.ISO_BANDS,\n          gridOrigin,\n          cellSize,\n          x,\n          y,\n          width,\n          height,\n          code,\n          meanCode,\n          thresholdData: data\n        };\n        if (Array.isArray(threshold)) {\n          opts.type = CONTOUR_TYPE.ISO_BANDS;\n          const polygons = getVertices(opts) as number[][][];\n          for (const polygon of polygons) {\n            contourPolygons[polygonIndex++] = {\n              vertices: polygon,\n              contour\n            };\n          }\n        } else {\n          // Get the intersection vertices based on MarchingSquares code.\n          opts.type = CONTOUR_TYPE.ISO_LINES;\n          const vertices = getVertices(opts) as number[][];\n          for (let i = 0; i < vertices.length; i += 2) {\n            contourSegments[segmentIndex++] = {\n              start: vertices[i],\n              end: vertices[i + 1],\n              contour\n            };\n          }\n        }\n      }\n    }\n  }\n  return {contourSegments, contourPolygons};\n}\n/* eslint-enable max-depth */\n", "// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {LineLayer, SolidPolygonLayer} from '@deck.gl/layers';\nimport {generateContours} from './contour-utils';\nimport {\n  Accessor,\n  AccessorFunction,\n  Color,\n  Layer,\n  log,\n  Position,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\n\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION, getValueFunc} from '../utils/aggregation-operation-utils';\nimport {getBoundingBox, getGridParams} from '../utils/grid-aggregation-utils';\nimport GridAggregationLayer, {GridAggregationLayerProps} from '../grid-aggregation-layer';\n\nconst DEFAULT_COLOR = [255, 255, 255, 255];\nconst DEFAULT_STROKE_WIDTH = 1;\nconst DEFAULT_THRESHOLD = 1;\n\nconst defaultProps: DefaultProps<ContourLayerProps> = {\n  // grid aggregation\n  cellSize: {type: 'number', min: 1, max: 1000, value: 1000},\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: 1},\n  gpuAggregation: true,\n  aggregation: 'SUM',\n\n  // contour lines\n  contours: {\n    type: 'object',\n    value: [{threshold: DEFAULT_THRESHOLD}],\n    optional: true,\n    compare: 3\n  },\n\n  zOffset: 0.005\n};\n\nconst POSITION_ATTRIBUTE_NAME = 'positions';\n\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSize']\n  },\n  weights: {\n    props: ['aggregation'],\n    accessors: ['getWeight']\n  }\n};\n\n/** All properties supported by ContourLayer. */\nexport type ContourLayerProps<DataT = any> = _ContourLayerProps<DataT> &\n  GridAggregationLayerProps<DataT>;\n\n/** Properties added by ContourLayer. */\nexport type _ContourLayerProps<DataT> = {\n  /**\n   * Size of each cell in meters.\n   * @default 1000\n   */\n  cellSize?: number;\n\n  /**\n   * When set to true, aggregation is performed on GPU, provided other conditions are met.\n   * @default true\n   */\n  gpuAggregation?: boolean;\n\n  /**\n   * Defines the type of aggregation operation, valid values are 'SUM', 'MEAN', 'MIN' and 'MAX'.\n   * @default 'SUM'\n   */\n  aggregation?: 'SUM' | 'MEAN' | 'MIN' | 'MAX';\n\n  /**\n   * Definition of contours to be drawn.\n   * @default [{threshold: 1}]\n   */\n  contours: {\n    /**\n     * Isolines: `threshold` value must be a single `Number`, Isolines are generated based on this threshold value.\n     *\n     * Isobands: `threshold` value must be an Array of two `Number`s. Isobands are generated using `[threshold[0], threshold[1])` as threshold range, i.e area that has values `>= threshold[0]` and `< threshold[1]` are rendered with corresponding color. NOTE: `threshold[0]` is inclusive and `threshold[1]` is not inclusive.\n     */\n    threshold: number | number[];\n\n    /**\n     * RGBA color array to be used to render the contour.\n     * @default [255, 255, 255, 255]\n     */\n    color?: Color;\n\n    /**\n     * Applicable for `Isoline`s only, width of the Isoline in pixels.\n     * @default 1\n     */\n    strokeWidth?: number;\n\n    /** Defines z order of the contour. */\n    zIndex?: number;\n  }[];\n\n  /**\n   * A very small z offset that is added for each vertex of a contour (Isoline or Isoband).\n   * @default 0.005\n   */\n  zOffset?: number;\n\n  /**\n   * Method called to retrieve the position of each object.\n   * @default object => object.position\n   */\n  getPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * The weight of each object.\n   * @default 1\n   */\n  getWeight?: Accessor<DataT, number>;\n};\n\n/** Aggregate data into iso-lines or iso-bands for a given threshold and cell size. */\nexport default class ContourLayer<\n  DataT = any,\n  ExtraPropsT extends {} = {}\n> extends GridAggregationLayer<DataT, ExtraPropsT & Required<_ContourLayerProps<DataT>>> {\n  static layerName = 'ContourLayer';\n  static defaultProps = defaultProps;\n\n  initializeState(): void {\n    super.initializeAggregationLayer({\n      dimensions: DIMENSIONS\n    });\n    this.setState({\n      contourData: {},\n      projectPoints: false,\n      weights: {\n        count: {\n          size: 1,\n          operation: AGGREGATION_OPERATION.SUM\n        }\n      }\n    });\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions()\n      },\n      // this attribute is used in gpu aggregation path only\n      count: {size: 3, accessor: 'getWeight'}\n    });\n  }\n\n  updateState(opts: UpdateParameters<this>): void {\n    super.updateState(opts);\n    let contoursChanged = false;\n    const {oldProps, props} = opts;\n    const {aggregationDirty} = this.state;\n\n    if (oldProps.contours !== props.contours || oldProps.zOffset !== props.zOffset) {\n      contoursChanged = true;\n      this._updateThresholdData(opts.props);\n    }\n\n    if (this.getNumInstances() > 0 && (aggregationDirty || contoursChanged)) {\n      this._generateContours();\n    }\n  }\n\n  renderLayers(): Layer[] {\n    const {contourSegments, contourPolygons} = this.state.contourData;\n\n    const LinesSubLayerClass = this.getSubLayerClass('lines', LineLayer);\n    const BandsSubLayerClass = this.getSubLayerClass('bands', SolidPolygonLayer);\n\n    // Contour lines layer\n    const lineLayer =\n      contourSegments &&\n      contourSegments.length > 0 &&\n      new LinesSubLayerClass(\n        this.getSubLayerProps({\n          id: 'lines'\n        }),\n        {\n          data: this.state.contourData.contourSegments,\n          getSourcePosition: d => d.start,\n          getTargetPosition: d => d.end,\n          getColor: d => d.contour.color || DEFAULT_COLOR,\n          getWidth: d => d.contour.strokeWidth || DEFAULT_STROKE_WIDTH\n        }\n      );\n\n    // Contour bands layer\n    const bandsLayer =\n      contourPolygons &&\n      contourPolygons.length > 0 &&\n      new BandsSubLayerClass(\n        this.getSubLayerProps({\n          id: 'bands'\n        }),\n        {\n          data: this.state.contourData.contourPolygons,\n          getPolygon: d => d.vertices,\n          getFillColor: d => d.contour.color || DEFAULT_COLOR\n        }\n      );\n\n    return [lineLayer, bandsLayer];\n  }\n\n  // Aggregation Overrides\n\n  /* eslint-disable max-statements, complexity */\n  updateAggregationState(opts) {\n    const {props, oldProps} = opts;\n    const {cellSize, coordinateSystem} = props;\n    const {viewport} = this.context;\n    const cellSizeChanged = oldProps.cellSize !== cellSize;\n    let gpuAggregation = props.gpuAggregation;\n    if (this.state.gpuAggregation !== props.gpuAggregation) {\n      if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.gl)) {\n        log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n        gpuAggregation = false;\n      }\n    }\n    const gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n    this.setState({\n      gpuAggregation\n    });\n\n    const {dimensions} = this.state;\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n    const {data, weights} = dimensions;\n\n    let {boundingBox} = this.state;\n    if (positionsChanged) {\n      boundingBox = getBoundingBox(this.getAttributes(), this.getNumInstances());\n      this.setState({boundingBox});\n    }\n    if (positionsChanged || cellSizeChanged) {\n      const {gridOffset, translation, width, height, numCol, numRow} = getGridParams(\n        boundingBox,\n        cellSize,\n        viewport,\n        coordinateSystem\n      );\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        gridOffset,\n        boundingBox,\n        translation,\n        posOffset: translation.slice(), // Used for CPU aggregation, to offset points\n        gridOrigin: [-1 * translation[0], -1 * translation[1]],\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n\n    const aggregationDataDirty =\n      positionsChanged ||\n      gpuAggregationChanged ||\n      this.isAggregationDirty(opts, {\n        dimension: data,\n        compareAll: gpuAggregation // check for all (including extentions props) when using gpu aggregation\n      });\n    const aggregationWeightsDirty = this.isAggregationDirty(opts, {\n      dimension: weights\n    });\n\n    if (aggregationWeightsDirty) {\n      this._updateAccessors(opts);\n    }\n    if (aggregationDataDirty || aggregationWeightsDirty) {\n      this._resetResults();\n    }\n    this.setState({\n      aggregationDataDirty,\n      aggregationWeightsDirty\n    });\n  }\n  /* eslint-enable max-statements, complexity */\n\n  // Private (Aggregation)\n\n  private _updateAccessors(opts) {\n    const {getWeight, aggregation, data} = opts.props;\n    const {count} = this.state.weights;\n    if (count) {\n      count.getWeight = getWeight;\n      count.operation = AGGREGATION_OPERATION[aggregation];\n    }\n    this.setState({getValue: getValueFunc(aggregation, getWeight, {data})});\n  }\n\n  private _resetResults() {\n    const {count} = this.state.weights;\n    if (count) {\n      count.aggregationData = null;\n    }\n  }\n\n  // Private (Contours)\n\n  private _generateContours() {\n    const {numCol, numRow, gridOrigin, gridOffset, thresholdData} = this.state;\n    const {count} = this.state.weights;\n    let {aggregationData} = count;\n    if (!aggregationData) {\n      aggregationData = count.aggregationBuffer.getData();\n      count.aggregationData = aggregationData;\n    }\n\n    const {cellWeights} = GPUGridAggregator.getCellData({countsData: aggregationData});\n    const contourData = generateContours({\n      thresholdData,\n      cellWeights,\n      gridSize: [numCol, numRow],\n      gridOrigin,\n      cellSize: [gridOffset.xOffset, gridOffset.yOffset]\n    });\n\n    // contourData contains both iso-lines and iso-bands if requested.\n    this.setState({contourData});\n  }\n\n  private _updateThresholdData(props) {\n    const {contours, zOffset} = props;\n    const count = contours.length;\n    const thresholdData = new Array(count);\n    for (let i = 0; i < count; i++) {\n      const contour = contours[i];\n      thresholdData[i] = {\n        contour,\n        zIndex: contour.zIndex || i,\n        zOffset\n      };\n    }\n    this.setState({thresholdData});\n  }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Inspired by screen-grid-layer vertex shader in deck.gl\n\nexport default `\\\n#version 300 es\n#define SHADER_NAME gpu-grid-cell-layer-vertex-shader\n#define RANGE_COUNT 6\n\nin vec3 positions;\nin vec3 normals;\n\nin vec4 colors;\nin vec4 elevations;\nin vec3 instancePickingColors;\n\n// Custom uniforms\nuniform vec2 offset;\nuniform bool extruded;\nuniform float cellSize;\nuniform float coverage;\nuniform float opacity;\nuniform float elevationScale;\n\nuniform ivec2 gridSize;\nuniform vec2 gridOrigin;\nuniform vec2 gridOriginLow;\nuniform vec2 gridOffset;\nuniform vec2 gridOffsetLow;\nuniform vec4 colorRange[RANGE_COUNT];\nuniform vec2 elevationRange;\n\n// Domain uniforms\nuniform vec2 colorDomain;\nuniform bool colorDomainValid;\nuniform vec2 elevationDomain;\nuniform bool elevationDomainValid;\n\nlayout(std140) uniform;\nuniform ColorData\n{\n  vec4 maxMinCount;\n} colorData;\nuniform ElevationData\n{\n  vec4 maxMinCount;\n} elevationData;\n\n#define EPSILON 0.00001\n\n// Result\nout vec4 vColor;\n\nvec4 quantizeScale(vec2 domain, vec4 range[RANGE_COUNT], float value) {\n  vec4 outColor = vec4(0., 0., 0., 0.);\n  if (value >= (domain.x - EPSILON) && value <= (domain.y + EPSILON)) {\n    float domainRange = domain.y - domain.x;\n    if (domainRange <= 0.) {\n      outColor = colorRange[0];\n    } else {\n      float rangeCount = float(RANGE_COUNT);\n      float rangeStep = domainRange / rangeCount;\n      float idx = floor((value - domain.x) / rangeStep);\n      idx = clamp(idx, 0., rangeCount - 1.);\n      int intIdx = int(idx);\n      outColor = colorRange[intIdx];\n    }\n  }\n  return outColor;\n}\n\nfloat linearScale(vec2 domain, vec2 range, float value) {\n  if (value >= (domain.x - EPSILON) && value <= (domain.y + EPSILON)) {\n    return ((value - domain.x) / (domain.y - domain.x)) * (range.y - range.x) + range.x;\n  }\n  return -1.;\n}\n\nvoid main(void) {\n  vec2 clrDomain = colorDomainValid ? colorDomain : vec2(colorData.maxMinCount.a, colorData.maxMinCount.r);\n  vec4 color = quantizeScale(clrDomain, colorRange, colors.r);\n\n  float elevation = 0.0;\n\n  if (extruded) {\n    vec2 elvDomain = elevationDomainValid ? elevationDomain : vec2(elevationData.maxMinCount.a, elevationData.maxMinCount.r);\n    elevation = linearScale(elvDomain, elevationRange, elevations.r);\n    elevation = elevation  * (positions.z + 1.0) / 2.0 * elevationScale;\n  }\n\n  // if aggregated color or elevation is 0 do not render\n  float shouldRender = float(color.r > 0.0 && elevations.r >= 0.0);\n  float dotRadius = cellSize / 2. * coverage * shouldRender;\n\n  int yIndex = (gl_InstanceID / gridSize[0]);\n  int xIndex = gl_InstanceID - (yIndex * gridSize[0]);\n\n  vec2 instancePositionXFP64 = mul_fp64(vec2(gridOffset[0], gridOffsetLow[0]), vec2(float(xIndex), 0.));\n  instancePositionXFP64 = sum_fp64(instancePositionXFP64, vec2(gridOrigin[0], gridOriginLow[0]));\n  vec2 instancePositionYFP64 = mul_fp64(vec2(gridOffset[1], gridOffsetLow[1]), vec2(float(yIndex), 0.));\n  instancePositionYFP64 = sum_fp64(instancePositionYFP64, vec2(gridOrigin[1], gridOriginLow[1]));\n\n  vec3 centroidPosition = vec3(instancePositionXFP64[0], instancePositionYFP64[0], elevation);\n  vec3 centroidPosition64Low = vec3(instancePositionXFP64[1], instancePositionYFP64[1], 0.0);\n  geometry.worldPosition = centroidPosition;\n  vec3 pos = vec3(project_size(positions.xy + offset) * dotRadius, 0.);\n\n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\n  picking_setPickingColor(instancePickingColors);\n\n  gl_Position = project_position_to_clipspace(centroidPosition, centroidPosition64Low, pos, geometry.position);\n\n  // Light calculations\n  // Worldspace is the linear space after Mercator projection\n\n  vec3 normals_commonspace = project_normal(normals);\n\n   if (extruded) {\n    vec3 lightColor = lighting_getLightColor(color.rgb, project_uCameraPosition, geometry.position.xyz, normals_commonspace);\n    vColor = vec4(lightColor, color.a * opacity) / 255.;\n  } else {\n    vColor = vec4(color.rgb, color.a * opacity) / 255.;\n  }\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#version 300 es\n#define SHADER_NAME gpu-grid-cell-layer-fragment-shader\n\nprecision highp float;\n\nin vec4 vColor;\n\nout vec4 fragColor;\n\nvoid main(void) {\n  fragColor = vColor;\n  fragColor = picking_filterColor(fragColor);\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  fp64LowPart,\n  project32,\n  gouraudLighting,\n  picking,\n  LayerContext,\n  LayerProps,\n  DefaultProps\n} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, CubeGeometry, Buffer} from '@luma.gl/core';\nimport {fp64arithmetic} from '@luma.gl/shadertools';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport type {_GPUGridLayerProps} from './gpu-grid-layer';\nimport vs from './gpu-grid-cell-layer-vertex.glsl';\nimport fs from './gpu-grid-cell-layer-fragment.glsl';\n\nconst COLOR_DATA_UBO_INDEX = 0;\nconst ELEVATION_DATA_UBO_INDEX = 1;\n\nconst defaultProps: DefaultProps<_GPUGridCellLayerProps & LayerProps> = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // grid\n  gridSize: {type: 'array', value: [1, 1]},\n  gridOrigin: {type: 'array', value: [0, 0]},\n  gridOffset: {type: 'array', value: [0, 0]},\n\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  offset: {type: 'array', value: [1, 1]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  extruded: true,\n\n  material: true // Use lighting module defaults\n};\n\ntype _GPUGridCellLayerProps = _GPUGridLayerProps<any> & {\n  offset: number[];\n  gridSize: number[];\n  gridOrigin: number[];\n  gridOffset: number[];\n  colorMaxMinBuffer: Buffer;\n  elevationMaxMinBuffer: Buffer;\n};\n\nexport default class GPUGridCellLayer extends Layer<_GPUGridCellLayerProps> {\n  static layerName = 'GPUGridCellLayer';\n  static defaultProps = defaultProps;\n\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, gouraudLighting, picking, fp64arithmetic]\n    });\n  }\n\n  initializeState({gl}: LayerContext) {\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.addInstanced({\n      colors: {\n        size: 4,\n        noAlloc: true\n      },\n      elevations: {\n        size: 4,\n        noAlloc: true\n      }\n    });\n    const model = this._getModel(gl);\n    this._setupUniformBuffer(model);\n    this.setState({model});\n  }\n\n  _getModel(gl: WebGLRenderingContext): Model {\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new CubeGeometry(),\n      isInstanced: true\n    });\n  }\n\n  draw({uniforms}) {\n    const {\n      cellSize,\n      offset,\n      extruded,\n      elevationScale,\n      coverage,\n      gridSize,\n      gridOrigin,\n      gridOffset,\n      elevationRange,\n      colorMaxMinBuffer,\n      elevationMaxMinBuffer\n    } = this.props;\n\n    const gridOriginLow = [fp64LowPart(gridOrigin[0]), fp64LowPart(gridOrigin[1])];\n    const gridOffsetLow = [fp64LowPart(gridOffset[0]), fp64LowPart(gridOffset[1])];\n    const domainUniforms = this.getDomainUniforms();\n    const colorRange = colorRangeToFlatArray(this.props.colorRange);\n    this.bindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer);\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms(domainUniforms)\n      .setUniforms({\n        cellSize,\n        offset,\n        extruded,\n        elevationScale,\n        coverage,\n        gridSize,\n        gridOrigin,\n        gridOriginLow,\n        gridOffset,\n        gridOffsetLow,\n        colorRange,\n        elevationRange\n      })\n      .draw();\n    this.unbindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer);\n  }\n\n  bindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer) {\n    colorMaxMinBuffer.bind({target: GL.UNIFORM_BUFFER, index: COLOR_DATA_UBO_INDEX});\n    elevationMaxMinBuffer.bind({target: GL.UNIFORM_BUFFER, index: ELEVATION_DATA_UBO_INDEX});\n  }\n\n  unbindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer) {\n    colorMaxMinBuffer.unbind({target: GL.UNIFORM_BUFFER, index: COLOR_DATA_UBO_INDEX});\n    elevationMaxMinBuffer.unbind({target: GL.UNIFORM_BUFFER, index: ELEVATION_DATA_UBO_INDEX});\n  }\n\n  getDomainUniforms() {\n    const {colorDomain, elevationDomain} = this.props;\n    const domainUniforms: Record<string, any> = {};\n    if (colorDomain !== null) {\n      domainUniforms.colorDomainValid = true;\n      domainUniforms.colorDomain = colorDomain;\n    } else {\n      domainUniforms.colorDomainValid = false;\n    }\n    if (elevationDomain !== null) {\n      domainUniforms.elevationDomainValid = true;\n      domainUniforms.elevationDomain = elevationDomain;\n    } else {\n      domainUniforms.elevationDomainValid = false;\n    }\n    return domainUniforms;\n  }\n\n  private _setupUniformBuffer(model: Model): void {\n    const gl = this.context.gl as WebGL2RenderingContext;\n    const programHandle = model.program.handle;\n\n    const colorIndex = gl.getUniformBlockIndex(programHandle, 'ColorData');\n    const elevationIndex = gl.getUniformBlockIndex(programHandle, 'ElevationData');\n    gl.uniformBlockBinding(programHandle, colorIndex, COLOR_DATA_UBO_INDEX);\n    gl.uniformBlockBinding(programHandle, elevationIndex, ELEVATION_DATA_UBO_INDEX);\n  }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Buffer} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport {\n  Accessor,\n  AccessorFunction,\n  Color,\n  Material,\n  GetPickingInfoParams,\n  LayerContext,\n  log,\n  PickingInfo,\n  Position,\n  DefaultProps\n} from '@deck.gl/core';\n\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION} from '../utils/aggregation-operation-utils';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport GPUGridCellLayer from './gpu-grid-cell-layer';\nimport {pointToDensityGridDataCPU} from './../cpu-grid-layer/grid-aggregator';\nimport GridAggregationLayer, {GridAggregationLayerProps} from '../grid-aggregation-layer';\nimport {getBoundingBox, getGridParams} from '../utils/grid-aggregation-utils';\n\nconst defaultProps: DefaultProps<GPUGridLayerProps> = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorWeight: {type: 'accessor', value: 1},\n  colorAggregation: 'SUM',\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationWeight: {type: 'accessor', value: 1},\n  elevationAggregation: 'SUM',\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // grid\n  cellSize: {type: 'number', min: 1, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getPosition: {type: 'accessor', value: x => x.position},\n  extruded: false,\n\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\n// This layer only perform GPU aggregation, no need to seperate data and weight props\n// aggregation will be dirty when any of the props are changed.\n\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSize', 'colorAggregation', 'elevationAggregation']\n  }\n  // rest of the changes are detected by `state.attributesChanged`\n};\nconst POSITION_ATTRIBUTE_NAME = 'positions';\n\n/** All properties supported by GPUGridLayer. */\nexport type GPUGridLayerProps<DataT = any> = _GPUGridLayerProps<DataT> &\n  GridAggregationLayerProps<DataT>;\n\n/** Properties added by GPUGridLayer. */\nexport type _GPUGridLayerProps<DataT> = {\n  /**\n   * Size of each cell in meters.\n   * @default 1000\n   */\n  cellSize?: number;\n\n  /**\n   * Color scale domain, default is set to the extent of aggregated weights in each cell.\n   * @default [min(colorWeight), max(colorWeight)]\n   */\n  colorDomain?: [number, number] | null;\n\n  /**\n   * Default: [colorbrewer](http://colorbrewer2.org/#type=sequential&scheme=YlOrRd&n=6) `6-class YlOrRd`\n   */\n  colorRange?: Color[];\n\n  /**\n   * Cell size multiplier, clamped between 0 - 1.\n   * @default 1\n   */\n  coverage?: number;\n\n  /**\n   * Elevation scale input domain, default is set to between 0 and the max of aggregated weights in each cell.\n   * @default [0, max(elevationWeight)]\n   */\n  elevationDomain?: [number, number] | null;\n\n  /**\n   * Elevation scale output range.\n   * @default [0, 1000]\n   */\n  elevationRange?: [number, number];\n\n  /**\n   * Cell elevation multiplier.\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /**\n   * Whether to enable cell elevation. If set to false, all cell will be flat.\n   * @default true\n   */\n  extruded?: boolean;\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n\n  /**\n   * Defines the operation used to aggregate all data object weights to calculate a cell's color value.\n   * @default 'SUM'\n   */\n  colorAggregation?: 'SUM' | 'MEAN' | 'MIN' | 'MAX';\n\n  /**\n   * Defines the operation used to aggregate all data object weights to calculate a cell's elevation value.\n   * @default 'SUM'\n   */\n  elevationAggregation?: 'SUM' | 'MEAN' | 'MIN' | 'MAX';\n\n  /**\n   * Method called to retrieve the position of each object.\n   * @default object => object.position\n   */\n  getPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * The weight of a data object used to calculate the color value for a cell.\n   * @default 1\n   */\n  getColorWeight?: Accessor<DataT, number>;\n\n  /**\n   * The weight of a data object used to calculate the elevation value for a cell.\n   * @default 1\n   */\n  getElevationWeight?: Accessor<DataT, number>;\n};\n\n/** Aggregate data into a grid-based heatmap. Aggregation is performed on GPU (WebGL2 only). */\nexport default class GPUGridLayer<\n  DataT = any,\n  ExtraPropsT extends {} = {}\n> extends GridAggregationLayer<DataT, ExtraPropsT & Required<_GPUGridLayerProps<DataT>>> {\n  static layerName = 'GPUGridLayer';\n  static defaultProps = defaultProps;\n\n  initializeState({gl}: LayerContext): void {\n    const isSupported = GPUGridAggregator.isSupported(gl);\n    if (!isSupported) {\n      log.error('GPUGridLayer is not supported on this browser, use GridLayer instead')();\n    }\n    super.initializeAggregationLayer({\n      dimensions: DIMENSIONS\n    });\n    this.setState({\n      gpuAggregation: true,\n      projectPoints: false, // aggregation in world space\n      isSupported,\n      weights: {\n        color: {\n          needMin: true,\n          needMax: true,\n          combineMaxMin: true,\n          maxMinBuffer: new Buffer(gl, {\n            byteLength: 4 * 4,\n            accessor: {size: 4, type: GL.FLOAT, divisor: 1}\n          })\n        },\n        elevation: {\n          needMin: true,\n          needMax: true,\n          combineMaxMin: true,\n          maxMinBuffer: new Buffer(gl, {\n            byteLength: 4 * 4,\n            accessor: {size: 4, type: GL.FLOAT, divisor: 1}\n          })\n        }\n      },\n      positionAttributeName: 'positions'\n    });\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions()\n      },\n      color: {size: 3, accessor: 'getColorWeight'},\n      elevation: {size: 3, accessor: 'getElevationWeight'}\n    });\n  }\n\n  updateState(opts) {\n    if (this.state.isSupported === false) {\n      // Skip update, layer not supported\n      return;\n    }\n    super.updateState(opts);\n    const {aggregationDirty} = this.state;\n    if (aggregationDirty) {\n      // reset cached CPU Aggregation results (used for picking)\n      this.setState({\n        gridHash: null\n      });\n    }\n  }\n\n  getHashKeyForIndex(index: number): string {\n    const {numRow, numCol, boundingBox, gridOffset} = this.state;\n    const gridSize = [numCol, numRow];\n    const gridOrigin = [boundingBox.xMin, boundingBox.yMin];\n    const cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n\n    const yIndex = Math.floor(index / gridSize[0]);\n    const xIndex = index - yIndex * gridSize[0];\n    // This will match the index to the hash-key to access aggregation data from CPU aggregation results.\n    const latIdx = Math.floor(\n      (yIndex * cellSize[1] + gridOrigin[1] + 90 + cellSize[1] / 2) / cellSize[1]\n    );\n    const lonIdx = Math.floor(\n      (xIndex * cellSize[0] + gridOrigin[0] + 180 + cellSize[0] / 2) / cellSize[0]\n    );\n    return `${latIdx}-${lonIdx}`;\n  }\n\n  getPositionForIndex(index: number): Position {\n    const {numRow, numCol, boundingBox, gridOffset} = this.state;\n    const gridSize = [numCol, numRow];\n    const gridOrigin = [boundingBox.xMin, boundingBox.yMin];\n    const cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n\n    const yIndex = Math.floor(index / gridSize[0]);\n    const xIndex = index - yIndex * gridSize[0];\n    const yPos = yIndex * cellSize[1] + gridOrigin[1];\n    const xPos = xIndex * cellSize[0] + gridOrigin[0];\n    return [xPos, yPos];\n  }\n\n  getPickingInfo({info, mode}: GetPickingInfoParams): PickingInfo {\n    const {index} = info;\n    let object: any = null;\n    if (index >= 0) {\n      const {gpuGridAggregator} = this.state;\n      const position = this.getPositionForIndex(index);\n      const colorInfo = GPUGridAggregator.getAggregationData({\n        pixelIndex: index,\n        ...gpuGridAggregator.getData('color')\n      });\n      const elevationInfo = GPUGridAggregator.getAggregationData({\n        pixelIndex: index,\n        ...gpuGridAggregator.getData('elevation')\n      });\n\n      object = {\n        colorValue: colorInfo.cellWeight,\n        elevationValue: elevationInfo.cellWeight,\n        count: colorInfo.cellCount || elevationInfo.cellCount,\n        position,\n        totalCount: colorInfo.totalCount || elevationInfo.totalCount\n      };\n      if (mode !== 'hover') {\n        // perform CPU aggregation for full list of points for each cell\n        const {props} = this;\n        let {gridHash} = this.state;\n        if (!gridHash) {\n          const {gridOffset, translation, boundingBox} = this.state;\n          const {viewport} = this.context;\n          const attributes = this.getAttributes();\n          const cpuAggregation = pointToDensityGridDataCPU(props as any, {\n            gridOffset,\n            attributes,\n            viewport,\n            translation,\n            boundingBox\n          });\n          gridHash = cpuAggregation.gridHash;\n          this.setState({gridHash});\n        }\n        const key = this.getHashKeyForIndex(index);\n        const cpuAggregationData = gridHash[key];\n        Object.assign(object, cpuAggregationData);\n      }\n    }\n\n    // override object with picked cell\n    info.picked = Boolean(object);\n    info.object = object;\n\n    return info;\n  }\n\n  renderLayers() {\n    if (!this.state.isSupported) {\n      return null;\n    }\n    const {\n      elevationScale,\n      extruded,\n      cellSize: cellSizeMeters,\n      coverage,\n      material,\n      elevationRange,\n      colorDomain,\n      elevationDomain\n    } = this.props;\n\n    const {weights, numRow, numCol, gridOrigin, gridOffset} = this.state;\n    const {color, elevation} = weights;\n    const colorRange = colorRangeToFlatArray(this.props.colorRange);\n\n    const SubLayerClass = this.getSubLayerClass('gpu-grid-cell', GPUGridCellLayer);\n\n    return new SubLayerClass(\n      {\n        gridSize: [numCol, numRow],\n        gridOrigin,\n        gridOffset: [gridOffset.xOffset, gridOffset.yOffset],\n        colorRange,\n        elevationRange,\n        colorDomain,\n        elevationDomain,\n\n        cellSize: cellSizeMeters,\n        coverage,\n        material,\n        elevationScale,\n        extruded\n      },\n      this.getSubLayerProps({\n        id: 'gpu-grid-cell'\n      }),\n      {\n        data: {\n          attributes: {\n            colors: color.aggregationBuffer,\n            elevations: elevation.aggregationBuffer\n          }\n        },\n        colorMaxMinBuffer: color.maxMinBuffer,\n        elevationMaxMinBuffer: elevation.maxMinBuffer,\n        numInstances: numCol * numRow\n      }\n    );\n  }\n\n  finalizeState(context: LayerContext) {\n    const {color, elevation} = this.state.weights;\n    [color, elevation].forEach(weight => {\n      const {aggregationBuffer, maxMinBuffer} = weight;\n      maxMinBuffer.delete();\n      aggregationBuffer?.delete();\n    });\n    super.finalizeState(context);\n  }\n\n  // Aggregation Overrides\n\n  updateAggregationState(opts) {\n    const {props, oldProps} = opts;\n    const {cellSize, coordinateSystem} = props;\n    const {viewport} = this.context;\n    const cellSizeChanged = oldProps.cellSize !== cellSize;\n    const {dimensions} = this.state;\n\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n    // any attribute changed\n    const attributesChanged = positionsChanged || this.isAttributeChanged();\n\n    let {boundingBox} = this.state;\n    if (positionsChanged) {\n      boundingBox = getBoundingBox(this.getAttributes(), this.getNumInstances());\n      this.setState({boundingBox});\n    }\n    if (positionsChanged || cellSizeChanged) {\n      const {gridOffset, translation, width, height, numCol, numRow} = getGridParams(\n        boundingBox,\n        cellSize,\n        viewport,\n        coordinateSystem\n      );\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        gridOffset,\n        translation,\n        gridOrigin: [-1 * translation[0], -1 * translation[1]],\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n\n    const aggregationDataDirty =\n      attributesChanged ||\n      this.isAggregationDirty(opts, {\n        dimension: dimensions.data,\n        compareAll: true\n      });\n\n    if (aggregationDataDirty) {\n      this._updateAccessors(opts);\n    }\n    this.setState({\n      aggregationDataDirty\n    });\n  }\n\n  // Private\n\n  _updateAccessors(opts) {\n    const {colorAggregation, elevationAggregation} = opts.props;\n    const {color, elevation} = this.state.weights;\n    color.operation = AGGREGATION_OPERATION[colorAggregation];\n    elevation.operation = AGGREGATION_OPERATION[elevationAggregation];\n  }\n}\n", "import {\n  CompositeLayer,\n  CompositeLayerProps,\n  Layer,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport GPUGridLayer, {GPUGridLayerProps} from '../gpu-grid-layer/gpu-grid-layer';\nimport CPUGridLayer, {CPUGridLayerProps} from '../cpu-grid-layer/cpu-grid-layer';\n\nconst defaultProps: DefaultProps<GridLayerProps> = {\n  ...GPUGridLayer.defaultProps,\n  ...CPUGridLayer.defaultProps,\n  gpuAggregation: false\n};\n\n/** All properties supported by GridLayer. */\nexport type GridLayerProps<DataT = any> = _GridLayerProps<DataT> & CompositeLayerProps;\n\n/** Properties added by GridLayer. */\ntype _GridLayerProps<DataT> = CPUGridLayerProps<DataT> &\n  GPUGridLayerProps<DataT> & {\n    /**\n     * Whether the aggregation should be performed in high-precision 64-bit mode.\n     * @default false\n     */\n    fp64?: boolean;\n\n    /**\n     * When set to true, aggregation is performed on GPU, provided other conditions are met.\n     * @default false\n     */\n    gpuAggregation?: boolean;\n  };\n\n/** Aggregate data into a grid-based heatmap. The color and height of a cell are determined based on the objects it contains. */\nexport default class GridLayer<DataT = any, ExtraPropsT extends {} = {}> extends CompositeLayer<\n  ExtraPropsT & Required<_GridLayerProps<DataT>>\n> {\n  static layerName = 'GridLayer';\n  static defaultProps = defaultProps;\n\n  state!: CompositeLayer['state'] & {\n    useGPUAggregation: boolean;\n  };\n\n  initializeState() {\n    this.state = {\n      useGPUAggregation: true\n    };\n  }\n\n  updateState({props}: UpdateParameters<this>) {\n    this.setState({\n      useGPUAggregation: this.canUseGPUAggregation(props)\n    });\n  }\n\n  renderLayers(): Layer {\n    const {data, updateTriggers} = this.props;\n    const id = this.state.useGPUAggregation ? 'GPU' : 'CPU';\n    const LayerType = this.state.useGPUAggregation\n      ? this.getSubLayerClass('GPU', GPUGridLayer)\n      : this.getSubLayerClass('CPU', CPUGridLayer);\n    return new LayerType(\n      this.props,\n      this.getSubLayerProps({\n        id,\n        updateTriggers\n      }),\n      {\n        data\n      }\n    );\n  }\n\n  // Private methods\n\n  canUseGPUAggregation(props: GridLayer['props']) {\n    const {\n      gpuAggregation,\n      lowerPercentile,\n      upperPercentile,\n      getColorValue,\n      getElevationValue,\n      colorScaleType\n    } = props;\n    if (!gpuAggregation) {\n      // cpu aggregation is requested\n      return false;\n    }\n    if (!GPUGridAggregator.isSupported(this.context.gl)) {\n      return false;\n    }\n    if (lowerPercentile !== 0 || upperPercentile !== 100) {\n      // percentile calculations requires sorting not supported on GPU\n      return false;\n    }\n    if (getColorValue !== null || getElevationValue !== null) {\n      // accessor for custom color or elevation calculation is specified\n      return false;\n    }\n    if (colorScaleType === 'quantile' || colorScaleType === 'ordinal') {\n      // quantile and ordinal scales are not supported on GPU\n      return false;\n    }\n    return true;\n  }\n}\n", "import GL from '@luma.gl/constants';\nimport {isWebGL2} from '@luma.gl/core';\n\nexport function getBounds(points: number[][]): number[] {\n  // Now build bounding box in world space (aligned to world coordiante system)\n  const x = points.map(p => p[0]);\n  const y = points.map(p => p[1]);\n\n  const xMin = Math.min.apply(null, x);\n  const xMax = Math.max.apply(null, x);\n  const yMin = Math.min.apply(null, y);\n  const yMax = Math.max.apply(null, y);\n\n  return [xMin, yMin, xMax, yMax];\n}\n\n// true if currentBounds contains targetBounds, false otherwise\nexport function boundsContain(currentBounds: number[], targetBounds: number[]): boolean {\n  if (\n    targetBounds[0] >= currentBounds[0] &&\n    targetBounds[2] <= currentBounds[2] &&\n    targetBounds[1] >= currentBounds[1] &&\n    targetBounds[3] <= currentBounds[3]\n  ) {\n    return true;\n  }\n  return false;\n}\n\nconst scratchArray = new Float32Array(12);\n\n// For given rectangle bounds generates two triangles vertices that coverit completely\nexport function packVertices(points: number[][], dimensions: number = 2): Float32Array {\n  let index = 0;\n  for (const point of points) {\n    for (let i = 0; i < dimensions; i++) {\n      scratchArray[index++] = point[i] || 0;\n    }\n  }\n  return scratchArray;\n}\n\n// Expands boundingBox:[xMin, yMin, xMax, yMax] to match aspect ratio of given width and height\nexport function scaleToAspectRatio(boundingBox: number[], width: number, height: number): number[] {\n  const [xMin, yMin, xMax, yMax] = boundingBox;\n\n  const currentWidth = xMax - xMin;\n  const currentHeight = yMax - yMin;\n\n  let newWidth = currentWidth;\n  let newHeight = currentHeight;\n  if (currentWidth / currentHeight < width / height) {\n    // expand bounding box width\n    newWidth = (width / height) * currentHeight;\n  } else {\n    newHeight = (height / width) * currentWidth;\n  }\n\n  if (newWidth < width) {\n    newWidth = width;\n    newHeight = height;\n  }\n\n  const xCenter = (xMax + xMin) / 2;\n  const yCenter = (yMax + yMin) / 2;\n\n  return [\n    xCenter - newWidth / 2,\n    yCenter - newHeight / 2,\n    xCenter + newWidth / 2,\n    yCenter + newHeight / 2\n  ];\n}\n\n// Get texture coordiante of point inside a bounding box\nexport function getTextureCoordinates(point: number[], bounds: number[]) {\n  const [xMin, yMin, xMax, yMax] = bounds;\n  return [(point[0] - xMin) / (xMax - xMin), (point[1] - yMin) / (yMax - yMin)];\n}\n\n// Returns format and type for creating texture objects\nexport function getTextureParams({gl, floatTargetSupport}) {\n  return floatTargetSupport\n    ? {\n        // format:  should be RGBA32F on WebGL2 (float textures), RGBA in WebGL1 for float or non float textures\n        format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n        type: GL.FLOAT\n      }\n    : {\n        format: GL.RGBA,\n        type: GL.UNSIGNED_BYTE\n      };\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Inspired by screen-grid-layer vertex shader in deck.gl\n\nexport default `\\\n#define SHADER_NAME heatp-map-layer-vertex-shader\n\nuniform sampler2D maxTexture;\nuniform float intensity;\nuniform vec2 colorDomain;\nuniform float threshold;\nuniform float aggregationMode;\n\nattribute vec3 positions;\nattribute vec2 texCoords;\n\nvarying vec2 vTexCoords;\nvarying float vIntensityMin;\nvarying float vIntensityMax;\n\nvoid main(void) {\n  gl_Position = project_position_to_clipspace(positions, vec3(0.0), vec3(0.0));\n  vTexCoords = texCoords;\n  vec4 maxTexture = texture2D(maxTexture, vec2(0.5));\n  float maxValue = aggregationMode < 0.5 ? maxTexture.r : maxTexture.g;\n  float minValue = maxValue * threshold;\n  if (colorDomain[1] > 0.) {\n    // if user specified custom domain use it.\n    maxValue = colorDomain[1];\n    minValue = colorDomain[0];\n  }\n  vIntensityMax = intensity / maxValue;\n  vIntensityMin = intensity / minValue;\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME triangle-layer-fragment-shader\n\nprecision highp float;\n\nuniform float opacity;\nuniform sampler2D texture;\nuniform sampler2D colorTexture;\nuniform float aggregationMode;\n\nvarying vec2 vTexCoords;\nvarying float vIntensityMin;\nvarying float vIntensityMax;\n\nvec4 getLinearColor(float value) {\n  float factor = clamp(value * vIntensityMax, 0., 1.);\n  vec4 color = texture2D(colorTexture, vec2(factor, 0.5));\n  color.a *= min(value * vIntensityMin, 1.0);\n  return color;\n}\n\nvoid main(void) {\n  vec4 weights = texture2D(texture, vTexCoords);\n  float weight = weights.r;\n\n  if (aggregationMode > 0.5) {\n    weight /= max(1.0, weights.a);\n  }\n\n  // discard pixels with 0 weight.\n  if (weight <= 0.) {\n     discard;\n  }\n\n  vec4 linearColor = getLinearColor(weight);\n  linearColor.a *= opacity;\n  gl_FragColor =linearColor;\n}\n`;\n", "// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Texture2D} from '@luma.gl/core';\nimport {Layer, LayerContext, project32} from '@deck.gl/core';\nimport vs from './triangle-layer-vertex.glsl';\nimport fs from './triangle-layer-fragment.glsl';\n\ntype _TriangleLayerProps = {\n  colorDomain: number[];\n  aggregationMode: string;\n  threshold: number;\n  intensity: number;\n  vertexCount: number;\n  colorTexture: Texture2D;\n  maxTexture: Texture2D;\n  texture: Texture2D;\n};\n\nexport default class TriangleLayer extends Layer<_TriangleLayerProps> {\n  static layerName = 'TriangleLayer';\n\n  getShaders() {\n    return {vs, fs, modules: [project32]};\n  }\n\n  initializeState({gl}: LayerContext): void {\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.add({\n      positions: {size: 3, noAlloc: true},\n      texCoords: {size: 2, noAlloc: true}\n    });\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n\n  _getModel(gl: WebGLRenderingContext): Model {\n    const {vertexCount} = this.props;\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount\n      })\n    });\n  }\n\n  draw({uniforms}): void {\n    const {model} = this.state;\n\n    const {texture, maxTexture, colorTexture, intensity, threshold, aggregationMode, colorDomain} =\n      this.props;\n\n    model\n      .setUniforms({\n        ...uniforms,\n        texture,\n        maxTexture,\n        colorTexture,\n        intensity,\n        threshold,\n        aggregationMode,\n        colorDomain\n      })\n      .draw();\n  }\n}\n", "export default `\\\nattribute vec3 positions;\nattribute vec3 positions64Low;\nattribute float weights;\nvarying vec4 weightsTexture;\nuniform float radiusPixels;\nuniform float textureWidth;\nuniform vec4 commonBounds;\nuniform float weightsScale;\nvoid main()\n{\n  weightsTexture = vec4(weights * weightsScale, 0., 0., 1.);\n\n  float radiusTexels  = project_pixel_size(radiusPixels) * textureWidth / (commonBounds.z - commonBounds.x);\n  gl_PointSize = radiusTexels * 2.;\n\n  vec3 commonPosition = project_position(positions, positions64Low);\n\n  // map xy from commonBounds to [-1, 1]\n  gl_Position.xy = (commonPosition.xy - commonBounds.xy) / (commonBounds.zw - commonBounds.xy) ;\n  gl_Position.xy = (gl_Position.xy * 2.) - (1.);\n}\n`;\n", "export default `\\\nvarying vec4 weightsTexture;\n// Epanechnikov function, keeping for reference\n// float epanechnikovKDE(float u) {\n//   return 0.75 * (1.0 - u * u);\n// }\nfloat gaussianKDE(float u){\n  return pow(2.71828, -u*u/0.05555)/(1.77245385*0.166666);\n}\nvoid main()\n{\n  float dist = length(gl_PointCoord - vec2(0.5, 0.5));\n  if (dist > 0.5) {\n    discard;\n  }\n  gl_FragColor = weightsTexture * gaussianKDE(2. * dist);\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n", "export default `\\\nattribute vec4 inTexture;\nvarying vec4 outTexture;\n\nvoid main()\n{\noutTexture = inTexture;\ngl_Position = vec4(0, 0, 0, 1.);\n// Enforce default value for ANGLE issue (https://bugs.chromium.org/p/angleproject/issues/detail?id=3941)\ngl_PointSize = 1.0;\n}\n`;\n", "export default `\\\nvarying vec4 outTexture;\nvoid main() {\n  gl_FragColor = outTexture;\n  gl_FragColor.g = outTexture.r / max(1.0, outTexture.a);\n}\n`;\n", "// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global setTimeout clearTimeout */\nimport GL from '@luma.gl/constants';\nimport {\n  getBounds,\n  boundsContain,\n  packVertices,\n  scaleToAspectRatio,\n  getTextureCoordinates,\n  getTextureParams\n} from './heatmap-layer-utils';\nimport {\n  Buffer,\n  Texture2D,\n  Transform,\n  getParameters,\n  withParameters,\n  FEATURES,\n  hasFeatures\n} from '@luma.gl/core';\nimport {\n  Accessor,\n  AccessorFunction,\n  AttributeManager,\n  ChangeFlags,\n  Color,\n  COORDINATE_SYSTEM,\n  Layer,\n  LayerContext,\n  LayersList,\n  log,\n  Position,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport AggregationLayer, {AggregationLayerProps} from '../aggregation-layer';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport weightsVs from './weights-vs.glsl';\nimport weightsFs from './weights-fs.glsl';\nimport vsMax from './max-vs.glsl';\nimport fsMax from './max-fs.glsl';\n\nconst RESOLUTION = 2; // (number of common space pixels) / (number texels)\nconst TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: {\n    [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n    [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n  },\n  dataFormat: GL.RGBA\n};\nconst DEFAULT_COLOR_DOMAIN = [0, 0];\nconst AGGREGATION_MODE = {\n  SUM: 0,\n  MEAN: 1\n};\n\nconst defaultProps: DefaultProps<HeatmapLayerProps> = {\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: 1},\n  intensity: {type: 'number', min: 0, value: 1},\n  radiusPixels: {type: 'number', min: 1, max: 100, value: 50},\n  colorRange: defaultColorRange,\n  threshold: {type: 'number', min: 0, max: 1, value: 0.05},\n  colorDomain: {type: 'array', value: null, optional: true},\n  // 'SUM' or 'MEAN'\n  aggregation: 'SUM',\n  weightsTextureSize: {type: 'number', min: 128, max: 2048, value: 2048},\n  debounceTimeout: {type: 'number', min: 0, max: 1000, value: 500}\n};\n\nconst REQUIRED_FEATURES = [\n  FEATURES.BLEND_EQUATION_MINMAX, // max weight calculation\n  FEATURES.TEXTURE_FLOAT // weight-map as texture\n];\n\nconst FLOAT_TARGET_FEATURES = [\n  FEATURES.COLOR_ATTACHMENT_RGBA32F, // ability to render to float texture\n  FEATURES.FLOAT_BLEND // ability to blend when rendering to float texture\n];\n\nconst DIMENSIONS = {\n  data: {\n    props: ['radiusPixels']\n  }\n};\n\nexport type HeatmapLayerProps<DataT = any> = _HeatmapLayerProps<DataT> &\n  AggregationLayerProps<DataT>;\n\ntype _HeatmapLayerProps<DataT> = {\n  /**\n   * Radius of the circle in pixels, to which the weight of an object is distributed.\n   *\n   * @default 30\n   */\n  radiusPixels?: number;\n\n  /**\n   * Specified as an array of colors [color1, color2, ...].\n   *\n   * @default `6-class YlOrRd` - [colorbrewer](http://colorbrewer2.org/#type=sequential&scheme=YlOrRd&n=6)\n   */\n  colorRange?: Color[];\n\n  /**\n   * Value that is multiplied with the total weight at a pixel to obtain the final weight.\n   *\n   * @default 1\n   */\n  intensity?: number;\n\n  /**\n   * Ratio of the fading weight to the max weight, between `0` and `1`.\n   *\n   * For example, `0.1` affects all pixels with weight under 10% of the max.\n   *\n   * Ignored when `colorDomain` is specified.\n   * @default 0.05\n   */\n  threshold?: number;\n\n  /**\n   * Controls how weight values are mapped to the `colorRange`, as an array of two numbers [`minValue`, `maxValue`].\n   *\n   * @default null\n   */\n  colorDomain?: [number, number] | null;\n\n  /**\n   * Defines the type of aggregation operation\n   *\n   * V valid values are 'SUM', 'MEAN'.\n   *\n   * @default 'SUM'\n   */\n  aggregation?: 'SUM' | 'MEAN';\n\n  /**\n   * Specifies the size of weight texture.\n   * @default 2048\n   */\n  weightsTextureSize?: number;\n\n  /**\n   * Interval in milliseconds during which changes to the viewport don't trigger aggregation.\n   *\n   * @default 500\n   */\n  debounceTimeout?: number;\n\n  /**\n   * Method called to retrieve the position of each object.\n   *\n   * @default d => d.position\n   */\n  getPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * The weight of each object.\n   *\n   * @default 1\n   */\n  getWeight?: Accessor<DataT, number>;\n};\n\n/** Visualizes the spatial distribution of data. */\nexport default class HeatmapLayer<\n  DataT = any,\n  ExtraPropsT extends {} = {}\n> extends AggregationLayer<DataT, ExtraPropsT & Required<_HeatmapLayerProps<DataT>>> {\n  static layerName = 'HeatmapLayer';\n  static defaultProps = defaultProps;\n\n  state!: AggregationLayer<DataT>['state'] & {\n    supported: boolean;\n    colorDomain?: number[];\n    isWeightMapDirty?: boolean;\n    weightsTexture?: Texture2D;\n    zoom?: number;\n    worldBounds?: number[];\n    normalizedCommonBounds?: number[];\n    updateTimer?: any;\n    triPositionBuffer?: Buffer;\n    triTexCoordBuffer?: Buffer;\n  };\n\n  initializeState() {\n    const {gl} = this.context;\n    if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n      this.setState({supported: false});\n      log.error(`HeatmapLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    super.initializeAggregationLayer(DIMENSIONS);\n    this.setState({supported: true, colorDomain: DEFAULT_COLOR_DOMAIN});\n    this._setupTextureParams();\n    this._setupAttributes();\n    this._setupResources();\n  }\n\n  shouldUpdateState({changeFlags}: UpdateParameters<this>) {\n    // Need to be updated when viewport changes\n    return changeFlags.somethingChanged;\n  }\n\n  /* eslint-disable max-statements,complexity */\n  updateState(opts: UpdateParameters<this>) {\n    if (!this.state.supported) {\n      return;\n    }\n    super.updateState(opts);\n    this._updateHeatmapState(opts);\n  }\n\n  _updateHeatmapState(opts: UpdateParameters<this>) {\n    const {props, oldProps} = opts;\n    const changeFlags = this._getChangeFlags(opts);\n\n    if (changeFlags.dataChanged || changeFlags.viewportChanged) {\n      // if data is changed, do not debounce and immediately update the weight map\n      changeFlags.boundsChanged = this._updateBounds(changeFlags.dataChanged);\n      this._updateTextureRenderingBounds();\n    }\n\n    if (changeFlags.dataChanged || changeFlags.boundsChanged) {\n      // Update weight map immediately\n      clearTimeout(this.state.updateTimer);\n      this.setState({isWeightMapDirty: true});\n    } else if (changeFlags.viewportZoomChanged) {\n      // Update weight map when zoom stops\n      this._debouncedUpdateWeightmap();\n    }\n\n    if (props.colorRange !== oldProps.colorRange) {\n      this._updateColorTexture(opts);\n    }\n\n    if (this.state.isWeightMapDirty) {\n      this._updateWeightmap();\n    }\n\n    this.setState({zoom: opts.context.viewport.zoom});\n  }\n\n  renderLayers(): LayersList | Layer {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {\n      weightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      maxWeightsTexture,\n      colorTexture,\n      colorDomain\n    } = this.state;\n    const {updateTriggers, intensity, threshold, aggregation} = this.props;\n\n    const TriangleLayerClass = this.getSubLayerClass('triangle', TriangleLayer);\n\n    return new TriangleLayerClass(\n      this.getSubLayerProps({\n        id: 'triangle-layer',\n        updateTriggers\n      }),\n      {\n        // position buffer is filled with world coordinates generated from viewport.unproject\n        // i.e. LNGLAT if geospatial, CARTESIAN otherwise\n        coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n        data: {\n          attributes: {\n            positions: triPositionBuffer,\n            texCoords: triTexCoordBuffer\n          }\n        },\n        vertexCount: 4,\n        maxTexture: maxWeightsTexture,\n        colorTexture,\n        aggregationMode: AGGREGATION_MODE[aggregation] || 0,\n        texture: weightsTexture,\n        intensity,\n        threshold,\n        colorDomain\n      }\n    );\n  }\n\n  finalizeState(context: LayerContext) {\n    super.finalizeState(context);\n    const {\n      weightsTransform,\n      weightsTexture,\n      maxWeightTransform,\n      maxWeightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      colorTexture,\n      updateTimer\n    } = this.state;\n    weightsTransform?.delete();\n    weightsTexture?.delete();\n    maxWeightTransform?.delete();\n    maxWeightsTexture?.delete();\n    triPositionBuffer?.delete();\n    triTexCoordBuffer?.delete();\n    colorTexture?.delete();\n    if (updateTimer) {\n      clearTimeout(updateTimer);\n    }\n  }\n\n  // PRIVATE\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n  _getChangeFlags(opts: UpdateParameters<this>) {\n    const changeFlags: Partial<ChangeFlags> & {\n      boundsChanged?: boolean;\n      viewportZoomChanged?: boolean;\n    } = {};\n    const {dimensions} = this.state;\n    changeFlags.dataChanged =\n      this.isAttributeChanged() || // if any attribute is changed\n      this.isAggregationDirty(opts, {\n        compareAll: true,\n        dimension: dimensions.data\n      });\n    changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n\n    const {zoom} = this.state;\n    if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n      changeFlags.viewportZoomChanged = true;\n    }\n\n    return changeFlags;\n  }\n\n  _createTextures() {\n    const {gl} = this.context;\n    const {textureSize, format, type} = this.state;\n\n    this.setState({\n      weightsTexture: new Texture2D(gl, {\n        width: textureSize,\n        height: textureSize,\n        format,\n        type,\n        ...TEXTURE_OPTIONS\n      }),\n      maxWeightsTexture: new Texture2D(gl, {format, type, ...TEXTURE_OPTIONS}) // 1 X 1 texture,\n    });\n  }\n\n  _setupAttributes() {\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.add({\n      positions: {size: 3, type: GL.DOUBLE, accessor: 'getPosition'},\n      weights: {size: 1, accessor: 'getWeight'}\n    });\n    this.setState({positionAttributeName: 'positions'});\n  }\n\n  _setupTextureParams() {\n    const {gl} = this.context;\n    const {weightsTextureSize} = this.props;\n\n    const textureSize = Math.min(weightsTextureSize, getParameters(gl, gl.MAX_TEXTURE_SIZE));\n    const floatTargetSupport = hasFeatures(gl, FLOAT_TARGET_FEATURES);\n    const {format, type} = getTextureParams({gl, floatTargetSupport});\n    const weightsScale = floatTargetSupport ? 1 : 1 / 255;\n    this.setState({textureSize, format, type, weightsScale});\n    if (!floatTargetSupport) {\n      log.warn(\n        `HeatmapLayer: ${this.id} rendering to float texture not supported, fallingback to low precession format`\n      )();\n    }\n  }\n\n  getShaders(type) {\n    return super.getShaders(\n      type === 'max-weights-transform'\n        ? {\n            vs: vsMax,\n            _fs: fsMax\n          }\n        : {\n            vs: weightsVs,\n            _fs: weightsFs\n          }\n    );\n  }\n\n  _createWeightsTransform(shaders = {}) {\n    const {gl} = this.context;\n    let {weightsTransform} = this.state;\n    const {weightsTexture} = this.state;\n    weightsTransform?.delete();\n\n    weightsTransform = new Transform(gl, {\n      id: `${this.id}-weights-transform`,\n      elementCount: 1,\n      _targetTexture: weightsTexture,\n      _targetTextureVarying: 'weightsTexture',\n      ...shaders\n    });\n    this.setState({weightsTransform});\n  }\n\n  _setupResources() {\n    const {gl} = this.context;\n    this._createTextures();\n    const {textureSize, weightsTexture, maxWeightsTexture} = this.state;\n\n    const weightsTransformShaders = this.getShaders('weights-transform');\n    this._createWeightsTransform(weightsTransformShaders);\n\n    const maxWeightsTransformShaders = this.getShaders('max-weights-transform');\n    const maxWeightTransform = new Transform(gl, {\n      id: `${this.id}-max-weights-transform`,\n      _sourceTextures: {\n        inTexture: weightsTexture\n      },\n      _targetTexture: maxWeightsTexture,\n      _targetTextureVarying: 'outTexture',\n      ...maxWeightsTransformShaders,\n      elementCount: textureSize * textureSize\n    });\n\n    this.setState({\n      weightsTexture,\n      maxWeightsTexture,\n      maxWeightTransform,\n      zoom: null,\n      triPositionBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 3}\n      }),\n      triTexCoordBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 2}\n      })\n    });\n  }\n\n  // overwrite super class method to update transform model\n  updateShaders(shaderOptions) {\n    // sahder params (modules, injects) changed, update model object\n    this._createWeightsTransform(shaderOptions);\n  }\n\n  _updateMaxWeightValue() {\n    const {maxWeightTransform} = this.state;\n    maxWeightTransform.run({\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.MAX\n      }\n    });\n  }\n\n  // Computes world bounds area that needs to be processed for generate heatmap\n  _updateBounds(forceUpdate: any = false): boolean {\n    const {viewport} = this.context;\n\n    // Unproject all 4 corners of the current screen coordinates into world coordinates (lng/lat)\n    // Takes care of viewport has non zero bearing/pitch (i.e axis not aligned with world coordiante system)\n    const viewportCorners = [\n      viewport.unproject([0, 0]),\n      viewport.unproject([viewport.width, 0]),\n      viewport.unproject([viewport.width, viewport.height]),\n      viewport.unproject([0, viewport.height])\n    ].map(p => p.map(Math.fround));\n\n    // #1: get world bounds for current viewport extends\n    const visibleWorldBounds = getBounds(viewportCorners); // TODO: Change to visible bounds\n\n    const newState: Partial<HeatmapLayer['state']> = {visibleWorldBounds, viewportCorners};\n    let boundsChanged = false;\n\n    if (\n      forceUpdate ||\n      !this.state.worldBounds ||\n      !boundsContain(this.state.worldBounds, visibleWorldBounds)\n    ) {\n      // #2 : convert world bounds to common (Flat) bounds\n      // #3 : extend common bounds to match aspect ratio with viewport\n      const scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n\n      // #4 :convert aligned common bounds to world bounds\n      const worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n\n      // Clip webmercator projection limits\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n        worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n        worldBounds[0] = Math.max(worldBounds[0], -360);\n        worldBounds[2] = Math.min(worldBounds[2], 360);\n      }\n\n      // #5: now convert world bounds to common using Layer's coordiante system and origin\n      const normalizedCommonBounds = this._worldToCommonBounds(worldBounds);\n\n      newState.worldBounds = worldBounds;\n      newState.normalizedCommonBounds = normalizedCommonBounds;\n\n      boundsChanged = true;\n    }\n    this.setState(newState);\n    return boundsChanged;\n  }\n\n  _updateTextureRenderingBounds() {\n    // Just render visible portion of the texture\n    const {triPositionBuffer, triTexCoordBuffer, normalizedCommonBounds, viewportCorners} =\n      this.state;\n\n    const {viewport} = this.context;\n\n    triPositionBuffer.subData(packVertices(viewportCorners, 3));\n\n    const textureBounds = viewportCorners.map(p =>\n      getTextureCoordinates(viewport.projectPosition(p), normalizedCommonBounds!)\n    );\n    triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n  }\n\n  _updateColorTexture(opts) {\n    const {colorRange} = opts.props;\n    let {colorTexture} = this.state;\n    const colors = colorRangeToFlatArray(colorRange, false, Uint8Array as any);\n\n    if (colorTexture) {\n      colorTexture.setImageData({\n        data: colors,\n        width: colorRange.length\n      });\n    } else {\n      colorTexture = new Texture2D(this.context.gl, {\n        data: colors,\n        width: colorRange.length,\n        height: 1,\n        ...TEXTURE_OPTIONS\n      });\n    }\n    this.setState({colorTexture});\n  }\n\n  _updateWeightmap() {\n    const {radiusPixels, colorDomain, aggregation} = this.props;\n    const {weightsTransform, worldBounds, textureSize, weightsTexture, weightsScale} = this.state;\n    this.state.isWeightMapDirty = false;\n\n    // convert world bounds to common using Layer's coordiante system and origin\n    const commonBounds = this._worldToCommonBounds(worldBounds, {\n      useLayerCoordinateSystem: true\n    });\n\n    if (colorDomain && aggregation === 'SUM') {\n      // scale color domain to weight per pixel\n      const {viewport} = this.context;\n      const metersPerPixel =\n        (viewport.distanceScales.metersPerUnit[2] * (commonBounds[2] - commonBounds[0])) /\n        textureSize;\n      this.state.colorDomain = colorDomain.map(x => x * metersPerPixel * weightsScale);\n    } else {\n      this.state.colorDomain = colorDomain || DEFAULT_COLOR_DOMAIN;\n    }\n\n    const uniforms = {\n      radiusPixels,\n      commonBounds,\n      textureWidth: textureSize,\n      weightsScale\n    };\n    // Attribute manager sets data array count as instaceCount on model\n    // we need to set that as elementCount on 'weightsTransform'\n    weightsTransform.update({\n      elementCount: this.getNumInstances()\n    });\n    // Need to explictly specify clearColor as external context may have modified it\n    withParameters(this.context.gl, {clearColor: [0, 0, 0, 0]}, () => {\n      weightsTransform.run({\n        uniforms,\n        parameters: {\n          blend: true,\n          depthTest: false,\n          blendFunc: [GL.ONE, GL.ONE],\n          blendEquation: GL.FUNC_ADD\n        },\n        clearRenderTarget: true,\n        attributes: this.getAttributes(),\n        moduleSettings: this.getModuleSettings()\n      });\n    });\n    this._updateMaxWeightValue();\n\n    // reset filtering parameters (TODO: remove once luma issue#1193 is fixed)\n    weightsTexture.setParameters({\n      [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n      [GL.TEXTURE_MIN_FILTER]: GL.LINEAR\n    });\n  }\n\n  _debouncedUpdateWeightmap(fromTimer = false) {\n    let {updateTimer} = this.state;\n    const {debounceTimeout} = this.props;\n\n    if (fromTimer) {\n      updateTimer = null;\n      // update\n      this._updateBounds(true);\n      this._updateTextureRenderingBounds();\n      this.setState({isWeightMapDirty: true});\n    } else {\n      this.setState({isWeightMapDirty: false});\n      clearTimeout(updateTimer);\n      updateTimer = setTimeout(this._debouncedUpdateWeightmap.bind(this, true), debounceTimeout);\n    }\n\n    this.setState({updateTimer});\n  }\n\n  // input: worldBounds: [minLong, minLat, maxLong, maxLat]\n  // input: opts.useLayerCoordinateSystem : layers coordiante system is used\n  // optput: commonBounds: [minX, minY, maxX, maxY] scaled to fit the current texture\n  _worldToCommonBounds(worldBounds, opts: {useLayerCoordinateSystem?: boolean} = {}) {\n    const {useLayerCoordinateSystem = false} = opts;\n    const [minLong, minLat, maxLong, maxLat] = worldBounds;\n    const {viewport} = this.context;\n    const {textureSize} = this.state;\n    const {coordinateSystem} = this.props;\n\n    const offsetMode =\n      useLayerCoordinateSystem &&\n      (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS ||\n        coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS);\n    const offsetOriginCommon = offsetMode\n      ? viewport.projectPosition(this.props.coordinateOrigin)\n      : [0, 0];\n    const size = (textureSize * RESOLUTION) / viewport.scale;\n\n    let bottomLeftCommon;\n    let topRightCommon;\n\n    // Y-axis is flipped between World and Common bounds\n    if (useLayerCoordinateSystem && !offsetMode) {\n      bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);\n      topRightCommon = this.projectPosition([maxLong, maxLat, 0]);\n    } else {\n      bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);\n      topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);\n    }\n    // Ignore z component\n    return scaleToAspectRatio(\n      [\n        bottomLeftCommon[0] - offsetOriginCommon[0],\n        bottomLeftCommon[1] - offsetOriginCommon[1],\n        topRightCommon[0] - offsetOriginCommon[0],\n        topRightCommon[1] - offsetOriginCommon[1]\n      ],\n      size,\n      size\n    );\n  }\n\n  // input commonBounds: [xMin, yMin, xMax, yMax]\n  // output worldBounds: [minLong, minLat, maxLong, maxLat]\n  _commonToWorldBounds(commonBounds) {\n    const [xMin, yMin, xMax, yMax] = commonBounds;\n    const {viewport} = this.context;\n    const bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);\n    const topRightWorld = viewport.unprojectPosition([xMax, yMax]);\n\n    return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));\n  }\n}\n"],
  "mappings": "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",
  "names": ["earcut", "equals", "AGGREGATION_OPERATION", "SUM", "MEAN", "MIN", "MAX", "sumReducer", "accu", "cur", "maxReducer", "minReducer", "getMean", "pts", "accessor", "Number", "isFinite", "length", "filtered", "map", "filter", "reduce", "getSum", "getMax", "getMin", "Infinity", "getValueFunc", "aggregation", "context", "op", "wrapAccessor", "pt", "index", "source", "wrapGetValueFunc", "getValue", "indices", "DEFAULT_RUN_PARAMS", "projectPoints", "viewport", "createBufferObjects", "moduleSettings", "MAX_32_BIT_FLOAT", "MIN_BLEND_EQUATION", "MAX_BLEND_EQUATION", "MAX_MIN_BLEND_EQUATION", "EQUATION_MAP", "AGGREGATION_OPERATION", "SUM", "MEAN", "MIN", "MAX", "DEFAULT_WEIGHT_PARAMS", "size", "operation", "AGGREGATION_OPERATION", "SUM", "needMin", "needMax", "combineMaxMin", "PIXEL_SIZE", "DEFAULT_PARAMETERS", "getFloatTexture", "gl", "opts", "width", "height", "data", "unpackFlipY", "parameters", "texture", "Texture2D", "format", "isWebGL2", "type", "border", "mipmaps", "dataFormat", "getFramebuffer", "id", "fb", "Framebuffer", "attachments", "BUFFER_NAMES", "ARRAY_BUFFER_MAP", "maxData", "minData", "maxMinData", "REQUIRED_FEATURES", "FEATURES", "WEBGL2", "COLOR_ATTACHMENT_RGBA32F", "BLEND_EQUATION_MINMAX", "FLOAT_BLEND", "TEXTURE_FLOAT", "GPUGridAggregator", "getAggregationData", "aggregationData", "pixelIndex", "index", "PIXEL_SIZE", "results", "cellCount", "cellWeight", "maxCellWieght", "minCellWeight", "totalCount", "getCellData", "countsData", "size", "numCells", "length", "cellWeights", "Float32Array", "cellCounts", "Uint32Array", "i", "sizeIndex", "isSupported", "gl", "hasFeatures", "constructor", "opts", "id", "state", "weightAttributes", "textures", "meanTextures", "buffers", "framebuffers", "maxMinFramebuffers", "minFramebuffers", "maxFramebuffers", "equations", "resources", "_hasGPUSupport", "isWebGL2", "_setupModels", "delete", "gridAggregationModel", "allAggregationModel", "meanTransform", "deleteResources", "run", "setState", "aggregationParams", "_normalizeAggregationParams", "log", "_runAggregation", "getData", "weightId", "data", "aggregationBuffer", "arrayName", "bufferName", "updateShaders", "shaderOptions", "modelDirty", "DEFAULT_RUN_PARAMS", "weights", "normalizeWeightParams", "updateObject", "Object", "assign", "_getAggregateData", "needMin", "needMax", "combineMaxMin", "aggregationTexture", "readPixelsToBuffer", "target", "sourceType", "maxMinBuffer", "maxMinTexture", "minBuffer", "minTexture", "maxBuffer", "maxTexture", "_trackGPUResultBuffers", "_renderAggregateData", "cellSize", "projectPoints", "attributes", "moduleSettings", "numCol", "numRow", "translation", "scaling", "gridSize", "parameters", "blend", "depthTest", "blendFunc", "uniforms", "_renderToWeightsTexture", "_renderToMaxMinTexture", "blendEquation", "MAX_MIN_BLEND_EQUATION", "minOrMaxFb", "clearParams", "clearColor", "MAX_32_BIT_FLOAT", "MIN_BLEND_EQUATION", "MAX_BLEND_EQUATION", "withParameters", "framebuffer", "viewport", "clear", "draw", "uSampler", "texture", "operation", "AGGREGATION_OPERATION", "MIN", "MEAN", "transformOptions", "_sourceTextures", "aggregationValues", "_targetTexture", "elementCount", "width", "height", "update", "getMeanTransform", "attach", "_updateModels", "_setupFramebuffers", "framebufferSize", "getFloatTexture", "resize", "getFramebuffer", "EQUATION_MAP", "SUM", "_getMinMaxTexture", "name", "getAggregationModel", "instanceCount", "getAllAggregationModel", "_setupWeightAttributes", "vertexCount", "setVertexCount", "setAttributes", "setInstanceCount", "result", "DEFAULT_WEIGHT_PARAMS", "Array", "isArray", "forEach", "obj", "shaders", "mergeShaders", "vs", "AGGREGATE_TO_GRID_VS", "fs", "AGGREGATE_TO_GRID_FS", "modules", "fp64arithmetic", "project32", "Model", "drawMode", "AGGREGATE_ALL_VS", "AGGREGATE_ALL_FS", "isInstanced", "position", "Transform", "TRANSFORM_MEAN_VS", "_targetTextureVarying", "defaultColorRange", "colorRangeToFlatArray", "colorRange", "normalize", "ArrayType", "Float32Array", "flatArray", "Number", "isFinite", "length", "index", "i", "color", "DEFAULT_MINCOLOR", "DEFAULT_MAXCOLOR", "COLOR_PROPS", "defaultProps", "cellSizePixels", "value", "min", "cellMarginPixels", "max", "colorDomain", "colorRange", "defaultColorRange", "ScreenGridCellLayer", "Layer", "isSupported", "gl", "hasFeatures", "FEATURES", "TEXTURE_FLOAT", "getShaders", "vs", "fs", "modules", "picking", "initializeState", "context", "attributeManager", "getAttributeManager", "addInstanced", "instancePositions", "size", "update", "calculateInstancePositions", "instanceCounts", "noAlloc", "setState", "model", "_getModel", "shouldUpdateState", "changeFlags", "somethingChanged", "updateState", "params", "oldProps", "props", "numInstances", "invalidateAll", "invalidate", "_updateUniforms", "draw", "uniforms", "parameters", "maxTexture", "minColor", "maxColor", "state", "setUniforms", "depthTest", "depthMask", "attribute", "width", "height", "viewport", "numCol", "Math", "ceil", "i", "x", "y", "floor", "Model", "id", "geometry", "Geometry", "drawMode", "attributes", "positions", "Float32Array", "isInstanced", "_shouldUseMinMax", "log", "deprecated", "some", "key", "shouldUseMinMax", "colorRangeToFlatArray", "viewportChanged", "margin", "cellScale", "filterProps", "props", "filterKeys", "filteredProps", "key", "includes", "AggregationLayer", "CompositeLayer", "initializeAggregationLayer", "dimensions", "initializeState", "context", "setState", "ignoreProps", "filterProps", "constructor", "_propTypes", "data", "props", "updateState", "opts", "changeFlags", "extensionsChanged", "shaders", "getShaders", "defines", "NON_INSTANCED_MODEL", "updateShaders", "_updateAttributes", "updateAttributes", "changedAttributes", "getAttributes", "getAttributeManager", "getShaderAttributes", "getModuleSettings", "viewport", "mousePosition", "gl", "moduleSettings", "Object", "assign", "create", "pickingActive", "devicePixelRatio", "cssToDeviceRatio", "isAggregationDirty", "updateOpts", "params", "oldProps", "compareAll", "dimension", "state", "dataProps", "accessors", "updateTriggersChanged", "dataChanged", "all", "accessor", "compareProps", "newProps", "propTypes", "name", "isAttributeChanged", "isObjectEmpty", "undefined", "_getAttributeManager", "AttributeManager", "id", "stats", "obj", "isEmpty", "key", "getScale", "domain", "range", "scaleFunction", "scale", "getQuantizeScale", "value", "quantizeScale", "getLinearScale", "linearScale", "getQuantileScale", "sortedDomain", "sort", "ascending", "i", "n", "Math", "max", "length", "thresholds", "Array", "threshold", "thresholdsScale", "a", "b", "fraction", "domainLength", "domainFraction", "lowIndex", "floor", "low", "high", "bisectRight", "x", "lo", "hi", "mid", "ordinalScale", "domainMap", "key", "d", "get", "undefined", "push", "set", "getOrdinalScale", "Map", "uniqueDomain", "has", "domainRange", "log", "warn", "step", "idx", "clampIdx", "min", "notNullOrUndefined", "unique", "values", "results", "forEach", "v", "includes", "getTruthyValues", "data", "valueAccessor", "map", "filter", "getQuantileDomain", "data", "valueAccessor", "getTruthyValues", "getOrdinalDomain", "unique", "clamp", "value", "min", "max", "Math", "getScaleFunctionByScaleType", "scaleType", "getQuantizeScale", "getLinearScale", "getQuantileScale", "getOrdinalScale", "defaultGetValue", "points", "length", "MAX_32_BIT_FLOAT", "defaultGetPoints", "bin", "defaultGetIndex", "index", "ascending", "a", "b", "NaN", "defaultProps", "getValue", "getPoints", "getIndex", "filterData", "BinSorter", "constructor", "bins", "props", "aggregatedBins", "getAggregatedBins", "_updateMinMaxValues", "binMap", "getBinMap", "hasFilter", "binCount", "binIndex", "i", "filteredPoints", "filter", "value", "undefined", "Number", "isFinite", "counts", "_percentileToIndex", "percentileRange", "len", "sortedBins", "lower", "upper", "map", "n", "clamp", "lowerIdx", "Math", "ceil", "upperIdx", "floor", "maxCount", "maxValue", "minValue", "totalCount", "x", "getValueRange", "sort", "Array", "isArray", "idxRange", "getValueDomainByScale", "scale", "indexEdge", "_getScaleDomain", "scaleType", "getQuantileDomain", "slice", "d", "getOrdinalDomain", "R_EARTH", "toFinite", "n", "Number", "isFinite", "getBoundingBox", "attributes", "vertexCount", "positions", "value", "yMin", "Infinity", "yMax", "xMin", "xMax", "y", "x", "i", "boundingBox", "getTranslation", "gridOffset", "coordinateSystem", "viewport", "width", "height", "worldOrigin", "COORDINATE_SYSTEM", "CARTESIAN", "log", "assert", "LNGLAT", "DEFAULT", "alignToCell", "xOffset", "yOffset", "inValue", "cellSize", "sign", "Math", "abs", "floor", "getGridOffset", "convertToMeters", "centerLat", "calculateGridLatLonOffset", "getGridParams", "translation", "numCol", "ceil", "numRow", "latitude", "calculateLatOffset", "calculateLonOffset", "dy", "PI", "lat", "dx", "cos", "pointToDensityGridDataCPU", "props", "aggregationParams", "hashInfo", "pointsToGridHashing", "result", "getGridLayerDataFromGridHash", "gridHash", "gridOffset", "data", "cellSize", "attributes", "viewport", "projectPoints", "numInstances", "positions", "value", "size", "getAccessor", "boundingBox", "getPositionBoundingBox", "offsets", "posOffset", "getGridOffset", "xOffset", "yOffset", "width", "height", "numCol", "Math", "ceil", "numRow", "iterable", "objectInfo", "createIterable", "position", "Array", "pt", "index", "x", "y", "project", "Number", "isFinite", "yIndex", "floor", "xIndex", "key", "count", "points", "lonIdx", "latIdx", "push", "source", "Object", "keys", "length", "i", "idxs", "split", "parseInt", "positionAttribute", "numInstance", "yMin", "Infinity", "yMax", "xMin", "xMax", "GridAggregationLayer", "AggregationLayer", "initializeAggregationLayer", "dimensions", "gl", "context", "setState", "layerData", "gpuGridAggregator", "GPUGridAggregator", "id", "cpuGridAggregator", "pointToDensityGridDataCPU", "updateState", "opts", "updateAggregationState", "aggregationDataDirty", "aggregationWeightsDirty", "gpuAggregation", "state", "getNumInstances", "aggregationDirty", "_updateAggregation", "_updateWeightBins", "_uploadAggregationResults", "finalizeState", "count", "weights", "aggregationBuffer", "delete", "updateShaders", "shaders", "log", "assert", "allocateResources", "numRow", "numCol", "dataBytes", "name", "weight", "Buffer", "byteLength", "accessor", "size", "type", "divisor", "updateResults", "aggregationData", "maxMinData", "maxData", "minData", "gridOffset", "posOffset", "translation", "scaling", "boundingBox", "projectPoints", "props", "viewport", "attributes", "getAttributes", "vertexCount", "result", "run", "cellSize", "xOffset", "yOffset", "moduleSettings", "getModuleSettings", "getValue", "sortedBins", "BinSorter", "data", "aggregatedBins", "minValue", "maxValue", "totalCount", "ELEMENTCOUNT", "aggregationSize", "Float32Array", "fill", "bin", "lonIdx", "latIdx", "i", "value", "counts", "cellIndex", "defaultProps", "ScreenGridCellLayer", "getPosition", "type", "value", "d", "position", "getWeight", "gpuAggregation", "aggregation", "POSITION_ATTRIBUTE_NAME", "DIMENSIONS", "data", "props", "weights", "accessors", "ScreenGridLayer", "GridAggregationLayer", "initializeState", "gl", "context", "isSupported", "setState", "supported", "log", "error", "id", "initializeAggregationLayer", "dimensions", "getCellSize", "cellSizePixels", "count", "size", "operation", "AGGREGATION_OPERATION", "SUM", "needMax", "maxTexture", "getFloatTexture", "projectPoints", "subLayerData", "attributes", "positionAttributeName", "posOffset", "translation", "attributeManager", "getAttributeManager", "add", "accessor", "fp64", "use64bitPositions", "shouldUpdateState", "changeFlags", "state", "somethingChanged", "updateState", "opts", "renderLayers", "numRow", "numCol", "updateTriggers", "aggregationBuffer", "CellLayerClass", "getSubLayerClass", "getSubLayerProps", "instanceCounts", "numInstances", "finalizeState", "maxBuffer", "delete", "getPickingInfo", "info", "index", "gpuGridAggregator", "aggregationResults", "getData", "object", "GPUGridAggregator", "getAggregationData", "pixelIndex", "updateResults", "aggregationData", "maxData", "setData", "setImageData", "updateAggregationState", "cellSize", "cellSizeChanged", "oldProps", "viewportChanged", "warn", "gpuAggregationChanged", "positionsChanged", "isAttributeChanged", "aggregationDataDirty", "isAggregationDirty", "compareAll", "dimension", "aggregationWeightsDirty", "viewport", "width", "height", "Math", "ceil", "allocateResources", "scaling", "gridOffset", "xOffset", "yOffset", "_updateAccessors", "_resetResults", "getValue", "getValueFunc", "DEFAULT_COLOR", "defaultProps", "getSourcePosition", "type", "value", "x", "sourcePosition", "getTargetPosition", "targetPosition", "getSourceColor", "getTargetColor", "getWidth", "getHeight", "getTilt", "greatCircle", "numSegments", "min", "widthUnits", "widthScale", "widthMinPixels", "widthMaxPixels", "Number", "MAX_SAFE_INTEGER", "ArcLayer", "Layer", "getBounds", "getAttributeManager", "getShaders", "vs", "fs", "modules", "project32", "picking", "wrapLongitude", "initializeState", "attributeManager", "addInstanced", "instanceSourcePositions", "size", "fp64", "use64bitPositions", "transition", "accessor", "instanceTargetPositions", "instanceSourceColors", "props", "colorFormat", "length", "normalized", "defaultValue", "instanceTargetColors", "instanceWidths", "instanceHeights", "instanceTilts", "updateState", "opts", "oldProps", "changeFlags", "extensionsChanged", "propsChanged", "gl", "context", "state", "model", "delete", "_getModel", "invalidateAll", "draw", "uniforms", "setUniforms", "UNIT", "useShortestPath", "id", "positions", "i", "concat", "Model", "geometry", "Geometry", "drawMode", "attributes", "Float32Array", "isInstanced", "DEFAULT_INDICES", "Uint16Array", "DEFAULT_TEX_COORDS", "Float32Array", "bounds", "resolution", "createQuad", "maxXSpan", "Math", "max", "abs", "maxYSpan", "uCount", "ceil", "vCount", "vertexCount", "indices", "Uint32Array", "texCoords", "positions", "Float64Array", "vertex", "index", "u", "ut", "v", "vt", "p", "interpolateQuad", "i", "length", "quad", "lerp", "packUVsIntoRGB", "defaultProps", "image", "type", "value", "async", "bounds", "compare", "_imageCoordinateSystem", "COORDINATE_SYSTEM", "DEFAULT", "desaturate", "min", "max", "transparentColor", "tintColor", "textureParameters", "ignore", "BitmapLayer", "Layer", "getShaders", "vs", "fs", "modules", "project32", "picking", "initializeState", "attributeManager", "getAttributeManager", "remove", "noAlloc", "add", "indices", "size", "isIndexed", "update", "attribute", "state", "mesh", "positions", "fp64", "use64bitPositions", "texCoords", "updateState", "props", "oldProps", "changeFlags", "extensionsChanged", "gl", "context", "model", "delete", "_getModel", "invalidateAll", "oldMesh", "_createMesh", "setVertexCount", "vertexCount", "key", "invalidate", "setState", "_getCoordinateUniforms", "getPickingInfo", "params", "info", "color", "bitmap", "width", "height", "index", "uv", "unpackUVsFromRGB", "pixel", "Math", "floor", "disablePickingIndex", "disablePicking", "restorePickingColors", "_updateAutoHighlight", "encodePickingColor", "normalizedBounds", "isRectangularBounds", "createMesh", "viewport", "resolution", "Model", "id", "geometry", "Geometry", "drawMode", "isInstanced", "draw", "opts", "uniforms", "moduleParameters", "coordinateConversion", "pickingActive", "setUniforms", "bitmapTexture", "map", "x", "slice", "LNGLAT", "CARTESIAN", "imageCoordinateSystem", "Error", "defaultImageCoordinateSystem", "bottomLeft", "lngLatToWorld", "topRight", "u", "v", "fracUV", "vFrac", "uFrac", "Number", "isFinite", "DEFAULT_CANVAS_WIDTH", "DEFAULT_BUFFER", "noop", "DEFAULT_TEXTURE_PARAMETERS", "nextPowOfTwo", "number", "Math", "pow", "ceil", "log2", "resizeImage", "ctx", "imageData", "maxWidth", "maxHeight", "resizeRatio", "min", "width", "height", "floor", "data", "canvas", "clearRect", "drawImage", "getIconId", "icon", "id", "url", "resizeTexture", "texture", "parameters", "oldWidth", "oldHeight", "newTexture", "Texture2D", "gl", "copyToTexture", "targetY", "delete", "buildRowMapping", "mapping", "columns", "yOffset", "i", "length", "xOffset", "x", "y", "buildMapping", "icons", "buffer", "rowHeight", "canvasWidth", "push", "max", "canvasHeight", "getDiffIcons", "getIcon", "cachedIcons", "iterable", "objectInfo", "createIterable", "object", "index", "Error", "source", "sourceIndex", "IconManager", "constructor", "onUpdate", "onError", "finalize", "_texture", "getTexture", "_externalTexture", "getIconMapping", "_autoPacking", "_mapping", "setProps", "loadOptions", "autoPacking", "iconAtlas", "iconMapping", "textureParameters", "_loadOptions", "undefined", "_textureParameters", "isLoaded", "_pendingCount", "packIcons", "document", "Object", "values", "_buffer", "_canvasWidth", "_rowHeight", "_xOffset", "_yOffset", "_canvasHeight", "_canvas", "createElement", "_loadIcons", "getContext", "willReadFrequently", "load", "then", "iconDef", "setSubImageData", "generateMipmap", "catch", "error", "finally", "DEFAULT_COLOR", "defaultProps", "iconAtlas", "type", "value", "async", "iconMapping", "sizeScale", "min", "billboard", "sizeUnits", "sizeMinPixels", "sizeMaxPixels", "Number", "MAX_SAFE_INTEGER", "alphaCutoff", "max", "getPosition", "x", "position", "getIcon", "icon", "getColor", "getSize", "getAngle", "getPixelOffset", "onIconError", "optional", "textureParameters", "ignore", "IconLayer", "Layer", "getShaders", "vs", "fs", "modules", "project32", "picking", "initializeState", "state", "iconManager", "IconManager", "context", "gl", "onUpdate", "_onUpdate", "bind", "onError", "_onError", "attributeManager", "getAttributeManager", "addInstanced", "instancePositions", "size", "fp64", "use64bitPositions", "transition", "accessor", "instanceSizes", "defaultValue", "instanceOffsets", "transform", "getInstanceOffset", "instanceIconFrames", "getInstanceIconFrame", "instanceColorModes", "getInstanceColorMode", "instanceColors", "props", "colorFormat", "length", "normalized", "instanceAngles", "instancePixelOffset", "updateState", "params", "oldProps", "changeFlags", "data", "prePacked", "internalState", "isAsyncPropLoading", "setProps", "loadOptions", "autoPacking", "invalidate", "dataChanged", "updateTriggersChanged", "all", "packIcons", "extensionsChanged", "model", "delete", "_getModel", "invalidateAll", "isLoaded", "finalizeState", "finalize", "draw", "uniforms", "iconsTexture", "getTexture", "setUniforms", "iconsTextureDim", "width", "height", "UNIT", "positions", "Model", "id", "geometry", "Geometry", "drawMode", "attributes", "Float32Array", "isInstanced", "setNeedsRedraw", "evt", "getCurrentLayer", "log", "error", "message", "anchorX", "anchorY", "getIconMapping", "mapping", "mask", "y", "DEFAULT_COLOR", "defaultProps", "getSourcePosition", "type", "value", "x", "sourcePosition", "getTargetPosition", "targetPosition", "getColor", "getWidth", "widthUnits", "widthScale", "min", "widthMinPixels", "widthMaxPixels", "Number", "MAX_SAFE_INTEGER", "LineLayer", "Layer", "getBounds", "getAttributeManager", "getShaders", "vs", "fs", "modules", "project32", "picking", "wrapLongitude", "initializeState", "attributeManager", "addInstanced", "instanceSourcePositions", "size", "fp64", "use64bitPositions", "transition", "accessor", "instanceTargetPositions", "instanceColors", "props", "colorFormat", "length", "normalized", "defaultValue", "instanceWidths", "updateState", "params", "changeFlags", "extensionsChanged", "gl", "context", "state", "model", "delete", "_getModel", "invalidateAll", "draw", "uniforms", "setUniforms", "UNIT", "useShortestPath", "positions", "Model", "id", "geometry", "Geometry", "drawMode", "attributes", "Float32Array", "isInstanced", "DEFAULT_COLOR", "DEFAULT_NORMAL", "defaultProps", "sizeUnits", "pointSize", "type", "min", "value", "getPosition", "x", "position", "getNormal", "getColor", "material", "radiusPixels", "deprecatedFor", "normalizeData", "data", "header", "attributes", "length", "vertexCount", "POSITION", "instancePositions", "NORMAL", "instanceNormals", "COLOR_0", "instanceColors", "PointCloudLayer", "Layer", "getShaders", "vs", "fs", "modules", "project32", "gouraudLighting", "picking", "initializeState", "getAttributeManager", "addInstanced", "size", "fp64", "use64bitPositions", "transition", "accessor", "defaultValue", "props", "colorFormat", "normalized", "updateState", "params", "changeFlags", "extensionsChanged", "gl", "context", "state", "model", "delete", "_getModel", "invalidateAll", "dataChanged", "draw", "uniforms", "setUniforms", "UNIT", "positions", "i", "angle", "Math", "PI", "push", "cos", "sin", "Model", "id", "geometry", "Geometry", "drawMode", "Float32Array", "isInstanced", "DEFAULT_COLOR", "defaultProps", "radiusUnits", "radiusScale", "type", "min", "value", "radiusMinPixels", "radiusMaxPixels", "Number", "MAX_SAFE_INTEGER", "lineWidthUnits", "lineWidthScale", "lineWidthMinPixels", "lineWidthMaxPixels", "stroked", "filled", "billboard", "antialiasing", "getPosition", "x", "position", "getRadius", "getFillColor", "getLineColor", "getLineWidth", "strokeWidth", "deprecatedFor", "outline", "getColor", "ScatterplotLayer", "Layer", "getShaders", "vs", "fs", "modules", "project32", "picking", "initializeState", "getAttributeManager", "addInstanced", "instancePositions", "size", "fp64", "use64bitPositions", "transition", "accessor", "instanceRadius", "defaultValue", "instanceFillColors", "props", "colorFormat", "length", "normalized", "instanceLineColors", "instanceLineWidths", "updateState", "params", "changeFlags", "extensionsChanged", "gl", "context", "state", "model", "delete", "_getModel", "invalidateAll", "draw", "uniforms", "setUniforms", "UNIT", "positions", "Model", "id", "geometry", "Geometry", "drawMode", "vertexCount", "attributes", "Float32Array", "isInstanced", "WINDING", "CLOCKWISE", "COUNTER_CLOCKWISE", "modifyPolygonWindingDirection", "points", "direction", "options", "windingDirection", "getPolygonWindingDirection", "reversePolygon", "Math", "sign", "getPolygonSignedArea", "start", "end", "length", "dim", "size", "area", "i", "j", "reversePolygon", "points", "options", "start", "end", "length", "size", "numPoints", "numSwaps", "Math", "floor", "i", "b1", "b2", "j", "tmp", "push", "target", "source", "size", "length", "startIndex", "isDuplicate", "i", "copy", "getPointAtIndex", "positions", "index", "offset", "out", "startI", "intersect", "a", "b", "edge", "bbox", "out", "t", "snap", "i", "length", "bitCode", "p", "code", "cutPolylineByGrid", "positions", "options", "size", "broken", "gridResolution", "gridOffset", "startIndex", "endIndex", "length", "numPoints", "part", "result", "a", "getPointAtIndex", "b", "codeB", "cell", "getGridCell", "scratchPoint", "push", "i", "bitCode", "intersect", "codeAlt", "copy", "moveToNeighborCell", "TYPE_INSIDE", "TYPE_BORDER", "concatInPlace", "arr1", "arr2", "cutPolygonByGrid", "holeIndices", "edgeTypes", "queue", "pos", "types", "Array", "fill", "holes", "bbox", "shift", "getBoundingBox", "code", "parts", "bisectPolygon", "polygonLow", "polygonHigh", "polygon", "edge", "resultLow", "resultHigh", "typesLow", "typesHigh", "p", "side", "type", "prev", "prevSide", "Math", "sign", "prevType", "lowPointCount", "highPointCount", "out", "left", "floor", "bottom", "minX", "Infinity", "maxX", "minY", "maxY", "x", "y", "DEFAULT_MAX_LATITUDE", "cutPolylineByMercatorBounds", "positions", "options", "size", "startIndex", "endIndex", "length", "normalize", "newPositions", "slice", "wrapLongitudesForShortestPath", "parts", "cutPolylineByGrid", "broken", "gridResolution", "gridOffset", "part", "shiftLongitudesIntoRange", "cutPolygonByMercatorBounds", "holeIndices", "edgeTypes", "newHoleIndices", "srcStartIndex", "targetIndex", "ringIndex", "srcEndIndex", "targetStartIndex", "splitIndex", "findSplitIndex", "i", "insertPoleVertices", "maxLatitude", "pop", "cutPolygonByGrid", "maxLat", "pointIndex", "lat", "Math", "abs", "firstLng", "lastLng", "p", "getPointAtIndex", "round", "push", "sign", "prevLng", "lng", "delta", "refLng", "pointCount", "ColumnGeometry", "Geometry", "constructor", "props", "id", "uid", "indices", "attributes", "tesselateColumn", "radius", "height", "nradial", "vertices", "log", "assert", "length", "flatMap", "v", "modifyPolygonWindingDirection", "WINDING", "COUNTER_CLOCKWISE", "isExtruded", "vertsAroundEdge", "numVertices", "stepAngle", "Math", "PI", "Uint16Array", "positions", "Float32Array", "normals", "i", "j", "a", "vertexIndex", "sin", "cos", "k", "floor", "sign", "index", "POSITION", "size", "value", "NORMAL", "DEFAULT_COLOR", "defaultProps", "diskResolution", "type", "min", "value", "vertices", "radius", "angle", "offset", "coverage", "max", "elevationScale", "radiusUnits", "lineWidthUnits", "lineWidthScale", "lineWidthMinPixels", "lineWidthMaxPixels", "Number", "MAX_SAFE_INTEGER", "extruded", "wireframe", "filled", "stroked", "getPosition", "x", "position", "getFillColor", "getLineColor", "getLineWidth", "getElevation", "material", "getColor", "deprecatedFor", "ColumnLayer", "Layer", "getShaders", "gl", "context", "transpileToGLSL100", "isWebGL2", "defines", "useDerivatives", "props", "flatShading", "hasFeature", "FEATURES", "GLSL_DERIVATIVES", "FLAT_SHADING", "vs", "fs", "modules", "project32", "phongLighting", "gouraudLighting", "picking", "initializeState", "attributeManager", "getAttributeManager", "addInstanced", "instancePositions", "size", "fp64", "use64bitPositions", "transition", "accessor", "instanceElevations", "instanceFillColors", "colorFormat", "length", "normalized", "defaultValue", "instanceLineColors", "instanceStrokeWidths", "updateState", "params", "oldProps", "changeFlags", "regenerateModels", "extensionsChanged", "state", "model", "delete", "_getModel", "invalidateAll", "_updateGeometry", "getGeometry", "hasThinkness", "geometry", "ColumnGeometry", "height", "nradial", "meanVertexDistance", "i", "p", "d", "Math", "sqrt", "setState", "edgeDistance", "cos", "PI", "Model", "id", "isInstanced", "fillVertexCount", "attributes", "POSITION", "wireframeVertexCount", "indices", "setProps", "draw", "uniforms", "setUniforms", "UNIT", "widthUnits", "widthScale", "widthMinPixels", "widthMaxPixels", "isIndexed", "setVertexCount", "setDrawMode", "isStroke", "defaultProps", "cellSize", "type", "min", "value", "offset", "GridCellLayer", "ColumnLayer", "getGeometry", "diskResolution", "CubeGeometry", "draw", "uniforms", "elevationScale", "extruded", "coverage", "angle", "radiusUnits", "props", "state", "model", "setUniforms", "radius", "UNIT", "edgeDistance", "isWireframe", "normalizePath", "path", "size", "gridResolution", "wrapLongitude", "flatPath", "Array", "isArray", "length", "i", "j", "cutPolylineByGrid", "cutPolylineByMercatorBounds", "START_CAP", "END_CAP", "INVALID", "PathTesselator", "Tesselator", "constructor", "opts", "attributes", "positions", "size", "padding", "initialize", "type", "fp64", "Float64Array", "Float32Array", "segmentTypes", "Uint8ClampedArray", "get", "attributeName", "getGeometryFromBuffer", "buffer", "normalize", "normalizeGeometry", "path", "normalizePath", "positionSize", "resolution", "wrapLongitude", "getGeometrySize", "isCut", "subPath", "numPoints", "getPathLength", "isClosed", "updateGeometryAttributes", "context", "geometrySize", "vertexStart", "_updateSegmentTypes", "_updatePositions", "isPathClosed", "fill", "p", "Array", "i", "ptIndex", "getPointOnPath", "length", "index", "target", "Boolean", "loop", "lastPointIndex", "isArray", "DEFAULT_COLOR", "defaultProps", "widthUnits", "widthScale", "type", "min", "value", "widthMinPixels", "widthMaxPixels", "Number", "MAX_SAFE_INTEGER", "jointRounded", "capRounded", "miterLimit", "billboard", "_pathType", "getPath", "object", "path", "getColor", "getWidth", "rounded", "deprecatedFor", "ATTRIBUTE_TRANSITION", "enter", "chunk", "length", "subarray", "PathLayer", "Layer", "getShaders", "vs", "fs", "modules", "project32", "picking", "wrapLongitude", "initializeState", "noAlloc", "attributeManager", "getAttributeManager", "addInstanced", "positions", "size", "vertexOffset", "fp64", "use64bitPositions", "transition", "accessor", "update", "calculatePositions", "shaderAttributes", "instanceLeftPositions", "instanceStartPositions", "instanceEndPositions", "instanceRightPositions", "instanceTypes", "calculateSegmentTypes", "instanceStrokeWidths", "defaultValue", "instanceColors", "props", "colorFormat", "normalized", "instancePickingColors", "index", "target", "encodePickingColor", "__source", "setState", "pathTesselator", "PathTesselator", "updateState", "params", "changeFlags", "geometryChanged", "dataChanged", "updateTriggersChanged", "all", "state", "buffers", "data", "attributes", "updateGeometry", "geometryBuffer", "normalize", "loop", "getGeometry", "positionFormat", "resolution", "context", "viewport", "numInstances", "instanceCount", "startIndices", "vertexStarts", "invalidateAll", "extensionsChanged", "gl", "model", "delete", "_getModel", "getPickingInfo", "info", "find", "d", "disablePickingIndex", "objectIndex", "i", "_disablePickingIndex", "draw", "uniforms", "setUniforms", "jointType", "capType", "UNIT", "SEGMENT_INDICES", "SEGMENT_POSITIONS", "Model", "id", "geometry", "Geometry", "drawMode", "indices", "Uint16Array", "Float32Array", "isInstanced", "attribute", "get", "import_earcut", "OUTER_POLYGON_WINDING", "WINDING", "CLOCKWISE", "HOLE_POLYGON_WINDING", "COUNTER_CLOCKWISE", "windingOptions", "isClosed", "validate", "polygon", "positions", "Array", "isArray", "ArrayBuffer", "isView", "Error", "getPositions", "getHoleIndices", "holeIndices", "isNested", "isSimple", "length", "Number", "isFinite", "isNestedRingClosed", "simplePolygon", "p0", "p1", "isFlatRingClosed", "size", "startIndex", "endIndex", "i", "copyNestedRing", "target", "targetStartIndex", "windingDirection", "targetIndex", "len", "j", "start", "end", "modifyPolygonWindingDirection", "copyFlatRing", "srcStartIndex", "srcEndIndex", "srcLength", "normalize", "positionSize", "srcPositions", "srcHoleIndices", "push", "pop", "polygonIndex", "entries", "getPlaneArea", "xIndex", "yIndex", "numVerts", "area", "Math", "abs", "permutePositions", "zIndex", "o", "x", "y", "z", "getSurfaceIndices", "preproject", "full3d", "map", "positionIndex", "is3d", "n", "slice", "p", "xy", "xyArea", "xzArea", "yzArea", "earcut", "PolygonTesselator", "Tesselator", "constructor", "opts", "fp64", "IndexType", "Uint32Array", "attributes", "positions", "size", "type", "Float64Array", "Float32Array", "vertexValid", "Uint8ClampedArray", "indices", "get", "attributeName", "subarray", "vertexCount", "updateGeometry", "externalIndices", "buffers", "value", "length", "data", "getGeometry", "Error", "normalizeGeometry", "polygon", "normalize", "normalizedPolygon", "positionSize", "resolution", "cutPolygonByGrid", "getPositions", "getHoleIndices", "gridResolution", "edgeTypes", "wrapLongitude", "cutPolygonByMercatorBounds", "maxLatitude", "getGeometrySize", "isCut", "subPolygon", "getGeometryFromBuffer", "buffer", "updateGeometryAttributes", "context", "geometrySize", "vertexStart", "indexStart", "indexStarts", "geometryIndex", "_updateIndices", "_updatePositions", "_updateVertexValid", "offset", "typedArrayManager", "target", "i", "getSurfaceIndices", "preproject", "full3d", "allocate", "copy", "j", "polygonPositions", "x", "y", "z", "holeIndices", "set", "fill", "Array", "isArray", "Number", "isFinite", "main", "main", "DEFAULT_COLOR", "defaultProps", "filled", "extruded", "wireframe", "_normalize", "_windingOrder", "_full3d", "elevationScale", "type", "min", "value", "getPolygon", "f", "polygon", "getElevation", "getFillColor", "getLineColor", "material", "ATTRIBUTE_TRANSITION", "enter", "chunk", "length", "subarray", "SolidPolygonLayer", "Layer", "getShaders", "vs", "vsTop", "vsSide", "fs", "defines", "RING_WINDING_ORDER_CW", "props", "modules", "project32", "gouraudLighting", "picking", "wrapLongitude", "initializeState", "gl", "viewport", "context", "coordinateSystem", "isGeospatial", "COORDINATE_SYSTEM", "DEFAULT", "LNGLAT", "preproject", "projectPosition", "bind", "projectFlat", "setState", "numInstances", "polygonTesselator", "PolygonTesselator", "fp64", "use64bitPositions", "IndexType", "hasFeatures", "FEATURES", "ELEMENT_INDEX_UINT32", "Uint32Array", "Uint16Array", "attributeManager", "getAttributeManager", "noAlloc", "remove", "add", "indices", "size", "isIndexed", "update", "calculateIndices", "positions", "transition", "accessor", "calculatePositions", "shaderAttributes", "vertexOffset", "divisor", "instancePositions", "nextPositions", "vertexValid", "calculateVertexValid", "elevations", "instanceElevations", "fillColors", "colorFormat", "normalized", "defaultValue", "instanceFillColors", "lineColors", "instanceLineColors", "pickingColors", "object", "index", "target", "encodePickingColor", "__source", "instancePickingColors", "getPickingInfo", "params", "info", "data", "find", "d", "disablePickingIndex", "objectIndex", "i", "_disablePickingIndex", "draw", "uniforms", "topModel", "sideModel", "state", "renderUniforms", "Boolean", "setInstanceCount", "instanceCount", "setUniforms", "setDrawMode", "isWireframe", "setVertexCount", "vertexCount", "updateState", "updateParams", "updateGeometry", "oldProps", "changeFlags", "regenerateModels", "extensionsChanged", "models", "forEach", "model", "delete", "_getModels", "invalidateAll", "geometryConfigChanged", "dataChanged", "updateTriggersChanged", "all", "buffers", "attributes", "normalize", "geometryBuffer", "getGeometry", "positionFormat", "resolution", "full3d", "startIndices", "vertexStarts", "id", "shaders", "NON_INSTANCED_MODEL", "Model", "drawMode", "vertexPositions", "Float32Array", "isSideVertex", "geometry", "Geometry", "isInstanced", "userData", "excludeAttributes", "filter", "attribute", "indexStarts", "get", "replaceInRange", "data", "getIndex", "dataRange", "replace", "startRow", "endRow", "Infinity", "count", "length", "replaceStart", "replaceEnd", "i", "row", "index", "dataLengthChanged", "endChunk", "slice", "undefined", "defaultLineColor", "defaultFillColor", "defaultProps", "stroked", "filled", "extruded", "elevationScale", "wireframe", "_normalize", "_windingOrder", "lineWidthUnits", "lineWidthScale", "lineWidthMinPixels", "lineWidthMaxPixels", "Number", "MAX_SAFE_INTEGER", "lineJointRounded", "lineMiterLimit", "getPolygon", "type", "value", "f", "polygon", "getFillColor", "getLineColor", "getLineWidth", "getElevation", "material", "PolygonLayer", "CompositeLayer", "initializeState", "state", "paths", "props", "getLineDashArray", "log", "removed", "updateState", "changeFlags", "geometryChanged", "dataChanged", "updateTriggersChanged", "all", "Array", "isArray", "slice", "pathsDiff", "map", "dataRange", "replaceInRange", "data", "getIndex", "p", "__source", "index", "replace", "_getPaths", "setState", "positionFormat", "positionSize", "startRow", "endRow", "iterable", "objectInfo", "createIterable", "object", "normalize", "holeIndices", "positions", "i", "length", "path", "push", "getSubLayerRow", "renderLayers", "_dataDiff", "transitions", "lineDashJustified", "updateTriggers", "FillLayer", "getSubLayerClass", "SolidPolygonLayer", "StrokeLayer", "PathLayer", "polygonLayer", "shouldRenderSubLayer", "getSubLayerProps", "id", "lineColors", "polygonLineLayer", "widthUnits", "widthScale", "widthMinPixels", "widthMaxPixels", "jointRounded", "miterLimit", "dashJustified", "_pathType", "getWidth", "getColor", "getPath", "getSubLayerAccessor", "getDashArray", "x", "binaryToFeatureForAccesor", "data", "index", "featureIndex", "startIndices", "geometryIndex", "featureIds", "value", "getPropertiesForIndex", "propertiesIndex", "numericPropsIndex", "feature", "properties", "prop", "numericProps", "calculatePickingColors", "geojsonBinary", "encodePickingColor", "pickingColors", "points", "lines", "polygons", "key", "globalFeatureIds", "Uint8ClampedArray", "length", "pickingColor", "i", "DEFAULT_BUFFER", "EMPTY_ARRAY", "defaultProps", "getIconOffsets", "type", "value", "x", "offsets", "alphaCutoff", "smoothing", "outlineWidth", "outlineColor", "MultiIconLayer", "IconLayer", "getShaders", "fs", "initializeState", "attributeManager", "getAttributeManager", "addInstanced", "instanceOffsets", "size", "accessor", "instancePickingColors", "object", "index", "target", "encodePickingColor", "updateState", "params", "props", "oldProps", "map", "Number", "isFinite", "setState", "sdf", "log", "warn", "id", "draw", "state", "outlineBuffer", "Math", "max", "uniforms", "sdfBuffer", "gamma", "Boolean", "iconManager", "iconsTexture", "getTexture", "model", "getInstanceOffset", "icons", "Array", "from", "flatMap", "icon", "getInstanceColorMode", "getInstanceIconFrame", "MISSING_CHAR_WIDTH", "SINGLE_LINE", "nextPowOfTwo", "number", "Math", "pow", "ceil", "log2", "buildMapping", "characterSet", "getFontWidth", "fontHeight", "buffer", "maxCanvasWidth", "mapping", "xOffset", "yOffset", "row", "x", "rowHeight", "char", "width", "y", "height", "layoutWidth", "layoutHeight", "canvasHeight", "getTextWidth", "text", "startIndex", "endIndex", "i", "character", "breakAll", "maxWidth", "iconMapping", "target", "rowStartCharIndex", "rowOffsetLeft", "textWidth", "push", "breakWord", "groupStartCharIndex", "groupEndCharIndex", "groupWidth", "length", "autoWrapping", "wordBreak", "undefined", "result", "transformRow", "line", "leftOffsets", "rowSize", "frame", "log", "warn", "codePointAt", "transformParagraph", "paragraph", "lineHeight", "characters", "Array", "from", "numCharacters", "rowWidth", "autoWrappingEnabled", "isFinite", "size", "rowOffsetTop", "lineStartIndex", "lineEndIndex", "rows", "rowIndex", "rowStart", "rowEnd", "j", "layoutOffsetY", "max", "getTextFromBuffer", "value", "stride", "offset", "startIndices", "bytesPerElement", "BYTES_PER_ELEMENT", "elementStride", "elementOffset", "characterCount", "autoCharacterSet", "Set", "texts", "codes", "ArrayType", "constructor", "index", "codesAtIndex", "subarray", "String", "fromCodePoint", "apply", "forEach", "add", "charCode", "LRUCache", "constructor", "limit", "get", "key", "value", "_cache", "_deleteOrder", "_appendOrder", "set", "Object", "keys", "length", "delete", "_order", "index", "indexOf", "splice", "push", "getDefaultCharacterSet", "charSet", "i", "push", "String", "fromCharCode", "DEFAULT_FONT_SETTINGS", "fontFamily", "fontWeight", "characterSet", "fontSize", "buffer", "sdf", "cutoff", "radius", "smoothing", "MAX_CANVAS_WIDTH", "BASELINE_SCALE", "HEIGHT_SCALE", "CACHE_LIMIT", "cache", "LRUCache", "getNewChars", "cacheKey", "newCharSet", "Set", "Array", "from", "cachedFontAtlas", "get", "char", "mapping", "has", "delete", "populateAlphaChannel", "alphaChannel", "imageData", "length", "data", "setTextStyle", "ctx", "font", "fillStyle", "textBaseline", "textAlign", "setFontAtlasCacheLimit", "limit", "log", "assert", "Number", "isFinite", "FontAtlasManager", "texture", "_atlas", "scale", "props", "setProps", "Object", "assign", "_key", "_getKey", "size", "fontAtlas", "_generateFontAtlas", "set", "canvas", "document", "createElement", "width", "getContext", "willReadFrequently", "canvasHeight", "xOffset", "yOffset", "buildMapping", "getFontWidth", "measureText", "fontHeight", "maxCanvasWidth", "height", "getImageData", "putImageData", "tinySDF", "TinySDF", "glyphTop", "draw", "layoutOffsetY", "createImageData", "x", "y", "fillText", "defaultProps", "billboard", "sizeScale", "sizeUnits", "sizeMinPixels", "sizeMaxPixels", "Number", "MAX_SAFE_INTEGER", "padding", "type", "value", "getPosition", "x", "position", "getSize", "getAngle", "getPixelOffset", "getBoundingRect", "getFillColor", "getLineColor", "getLineWidth", "TextBackgroundLayer", "Layer", "getShaders", "vs", "fs", "modules", "project32", "picking", "initializeState", "getAttributeManager", "addInstanced", "instancePositions", "size", "fp64", "use64bitPositions", "transition", "accessor", "instanceSizes", "defaultValue", "instanceAngles", "instanceRects", "instancePixelOffsets", "instanceFillColors", "normalized", "instanceLineColors", "instanceLineWidths", "updateState", "params", "changeFlags", "extensionsChanged", "gl", "context", "state", "model", "delete", "_getModel", "invalidateAll", "draw", "uniforms", "props", "length", "setUniforms", "stroked", "Boolean", "UNIT", "positions", "Model", "id", "geometry", "Geometry", "drawMode", "vertexCount", "attributes", "Float32Array", "isInstanced", "TEXT_ANCHOR", "start", "middle", "end", "ALIGNMENT_BASELINE", "top", "center", "bottom", "DEFAULT_COLOR", "DEFAULT_LINE_HEIGHT", "defaultProps", "billboard", "sizeScale", "sizeUnits", "sizeMinPixels", "sizeMaxPixels", "Number", "MAX_SAFE_INTEGER", "background", "getBackgroundColor", "type", "value", "getBorderColor", "getBorderWidth", "backgroundPadding", "characterSet", "DEFAULT_FONT_SETTINGS", "fontFamily", "fontWeight", "lineHeight", "outlineWidth", "min", "outlineColor", "fontSettings", "compare", "wordBreak", "maxWidth", "getText", "x", "text", "getPosition", "position", "getColor", "getSize", "getAngle", "getTextAnchor", "getAlignmentBaseline", "getPixelOffset", "backgroundColor", "deprecatedFor", "TextLayer", "CompositeLayer", "object", "objectInfo", "size", "width", "height", "transformParagraph", "fontSize", "state", "fontAtlasManager", "props", "anchorX", "anchorY", "y", "rowWidth", "numCharacters", "length", "offsets", "Array", "index", "i", "rowOffset", "initializeState", "styleVersion", "FontAtlasManager", "log", "warn", "updateState", "params", "oldProps", "changeFlags", "textChanged", "dataChanged", "updateTriggersChanged", "all", "_updateText", "fontChanged", "_updateFontAtlas", "styleChanged", "setState", "getPickingInfo", "info", "data", "fontProps", "mapping", "setProps", "key", "textBuffer", "attributes", "startIndices", "numInstances", "autoCharacterSet", "Set", "texts", "characterCount", "getTextFromBuffer", "ArrayBuffer", "isView", "_", "iterable", "createIterable", "from", "forEach", "add", "push", "iconMapping", "paragraph", "renderLayers", "scale", "texture", "_dataDiff", "transitions", "updateTriggers", "CharactersLayerClass", "getSubLayerClass", "MultiIconLayer", "BackgroundLayerClass", "TextBackgroundLayer", "getFillColor", "getLineColor", "getLineWidth", "padding", "getSubLayerProps", "id", "getBoundingRect", "autoHighlight", "sdf", "smoothing", "isFinite", "radius", "iconAtlas", "getIconOffsets", "getIcon", "fontAtlasCacheLimit", "limit", "setFontAtlasCacheLimit", "POINT_LAYER", "circle", "type", "ScatterplotLayer", "props", "filled", "stroked", "lineWidthMaxPixels", "lineWidthMinPixels", "lineWidthScale", "lineWidthUnits", "pointRadiusMaxPixels", "pointRadiusMinPixels", "pointRadiusScale", "pointRadiusUnits", "pointAntialiasing", "pointBillboard", "getFillColor", "getLineColor", "getLineWidth", "getPointRadius", "icon", "IconLayer", "iconAtlas", "iconMapping", "iconSizeMaxPixels", "iconSizeMinPixels", "iconSizeScale", "iconSizeUnits", "iconAlphaCutoff", "iconBillboard", "getIcon", "getIconAngle", "getIconColor", "getIconPixelOffset", "getIconSize", "text", "TextLayer", "textSizeMaxPixels", "textSizeMinPixels", "textSizeScale", "textSizeUnits", "textBackground", "textBackgroundPadding", "textFontFamily", "textFontWeight", "textLineHeight", "textMaxWidth", "textOutlineColor", "textOutlineWidth", "textWordBreak", "textCharacterSet", "textBillboard", "textFontSettings", "getText", "getTextAngle", "getTextColor", "getTextPixelOffset", "getTextSize", "getTextAnchor", "getTextAlignmentBaseline", "getTextBackgroundColor", "getTextBorderColor", "getTextBorderWidth", "LINE_LAYER", "PathLayer", "lineJointRounded", "lineCapRounded", "lineMiterLimit", "lineBillboard", "POLYGON_LAYER", "SolidPolygonLayer", "extruded", "wireframe", "elevationScale", "material", "_full3d", "getElevation", "getDefaultProps", "result", "key", "defaultProps", "forwardProps", "layer", "mapping", "transitions", "updateTriggers", "getPosition", "geometry", "sourceKey", "targetKey", "value", "startsWith", "getSubLayerAccessor", "getGeojsonFeatures", "geojson", "Array", "isArray", "log", "assert", "type", "features", "geometry", "separateGeojsonFeatures", "wrapFeature", "dataRange", "separated", "pointFeatures", "lineFeatures", "polygonFeatures", "polygonOutlineFeatures", "startRow", "endRow", "length", "featureIndex", "feature", "geometries", "i", "subGeometry", "separateGeometry", "sourceFeature", "sourceFeatureIndex", "coordinates", "validateGeometry", "warn", "push", "forEach", "point", "path", "polygon", "COORDINATE_NEST_LEVEL", "Point", "MultiPoint", "LineString", "MultiLineString", "Polygon", "MultiPolygon", "nestLevel", "Number", "isFinite", "createEmptyLayerProps", "points", "lines", "polygons", "polygonsOutline", "getCoordinates", "f", "geometry", "coordinates", "createLayerPropsFromFeatures", "features", "featuresDiff", "layerProps", "pointFeatures", "lineFeatures", "polygonFeatures", "polygonOutlineFeatures", "data", "_dataDiff", "getPosition", "getPath", "getPolygon", "createLayerPropsFromBinary", "geojsonBinary", "encodePickingColor", "customPickingColors", "calculatePickingColors", "length", "positions", "value", "size", "attributes", "instancePickingColors", "properties", "numericProps", "featureIds", "pathIndices", "startIndices", "_pathType", "polygonIndices", "pickingColors", "_normalize", "triangles", "indices", "primitivePolygonIndices", "FEATURE_TYPES", "defaultProps", "getDefaultProps", "POINT_LAYER", "circle", "icon", "text", "LINE_LAYER", "POLYGON_LAYER", "stroked", "filled", "extruded", "wireframe", "_full3d", "iconAtlas", "type", "value", "iconMapping", "getIcon", "f", "properties", "getText", "pointType", "getRadius", "deprecatedFor", "GeoJsonLayer", "CompositeLayer", "initializeState", "state", "layerProps", "features", "updateState", "props", "changeFlags", "dataChanged", "data", "binary", "setState", "_updateStateBinary", "_updateStateJSON", "createLayerPropsFromBinary", "encodePickingColor", "getGeojsonFeatures", "wrapFeature", "getSubLayerRow", "bind", "newFeatures", "featuresDiff", "Array", "isArray", "oldFeatures", "key", "slice", "dataRange", "partialFeatures", "separateGeojsonFeatures", "push", "replaceInRange", "getIndex", "__source", "index", "replace", "createLayerPropsFromFeatures", "getPickingInfo", "params", "info", "sourceLayer", "featureType", "find", "ft", "id", "startsWith", "points", "globalFeatureIds", "_updateAutoHighlight", "pointLayerIdPrefix", "sourceIsPoints", "layer", "getSubLayers", "updateAutoHighlight", "_renderPolygonLayer", "PolygonFillLayer", "shouldRenderSubLayer", "polygons", "getSubLayerClass", "forwardedProps", "forwardProps", "useLineColor", "getLineColor", "updateTriggers", "lineColors", "getSubLayerProps", "_renderLineLayers", "polygonStrokeLayerId", "lineStringsLayerId", "PolygonStrokeLayer", "polygonsOutline", "LineStringsLayer", "lines", "_renderPointLayers", "highlightedObjectIndex", "Number", "isFinite", "findIndex", "d", "types", "Set", "split", "pointLayers", "PointLayerMapping", "PointsLayer", "pointsLayerProps", "instancePickingColors", "rest", "attributes", "renderLayers", "polygonFillLayer", "lineLayers", "getSubLayerAccessor", "accessor", "object", "feature", "binaryToFeatureForAccesor", "nop", "dimensionSteps", "defaultDimensions", "key", "accessor", "pickingInfo", "getBins", "triggers", "value", "prop", "updateTrigger", "weight", "aggregation", "filterData", "getDomain", "lowerPercentile", "upperPercentile", "scaleType", "getScaleFunc", "domain", "range", "onSet", "props", "nullValue", "defaultGetCellSize", "cellSize", "CPUAggregator", "constructor", "opts", "state", "layerData", "dimensions", "changeFlags", "dimensionUpdaters", "_getCellSize", "getCellSize", "_getAggregator", "getAggregator", "_addDimension", "updateState", "aggregationParams", "oldProps", "updateGetValueFuncs", "reprojectNeeded", "needsReProjectPoints", "aggregationDirty", "dataChanged", "getAggregatedData", "dimensionChanges", "getDimensionChanges", "forEach", "f", "setState", "updateObject", "setDimensionState", "normalizeResult", "result", "hexagons", "data", "aggregator", "getSortedBins", "getValue", "getValueChanged", "needUpdateDimensionStep", "wrapGetValueFunc", "getValueFunc", "updateTriggersChanged", "all", "getPosition", "addDimension", "dimension", "getDimensionUpdaters", "sortedBins", "scaleFunc", "updater", "getDimensionSortedBins", "getDimensionValueDomain", "getDimensionScale", "attributeAccessor", "getSubLayerDimensionAttribute", "dimensionStep", "Object", "values", "some", "item", "updaters", "needUpdate", "find", "step", "push", "bind", "length", "getUpdateTriggers", "_updateTriggers", "updateTriggers", "fromProp", "Array", "isArray", "assign", "undefined", "dimensionUpdater", "BinSorter", "_filterData", "valueDomain", "getValueDomainByScale", "dimensionRange", "dimensionDomain", "getScaleFunction", "getScaleFunctionByScaleType", "cell", "bin", "binMap", "index", "counts", "cv", "isValueInDomain", "getSubLayerAccessors", "accessors", "getPickingInfo", "info", "isPicked", "picked", "object", "binInfo", "points", "filteredPoints", "Boolean", "getAccessor", "dimensionKey", "hasOwnProperty", "nop", "defaultProps", "colorDomain", "colorRange", "defaultColorRange", "getColorValue", "type", "value", "getColorWeight", "colorAggregation", "lowerPercentile", "min", "max", "upperPercentile", "colorScaleType", "onSetColorDomain", "elevationDomain", "elevationRange", "getElevationValue", "getElevationWeight", "elevationAggregation", "elevationLowerPercentile", "elevationUpperPercentile", "elevationScale", "elevationScaleType", "onSetElevationDomain", "gridAggregator", "pointToDensityGridDataCPU", "cellSize", "coverage", "getPosition", "x", "position", "extruded", "material", "_filterData", "optional", "CPUGridLayer", "AggregationLayer", "initializeState", "cpuAggregator", "CPUAggregator", "getAggregator", "props", "getCellSize", "state", "aggregatorState", "attributeManager", "getAttributeManager", "add", "positions", "size", "accessor", "updateState", "opts", "setState", "viewport", "context", "attributes", "getAttributes", "numInstances", "getNumInstances", "getPickingInfo", "info", "_onGetSublayerColor", "cell", "getAccessor", "_onGetSublayerElevation", "_getSublayerUpdateTriggers", "getUpdateTriggers", "renderLayers", "transitions", "SubLayerClass", "getSubLayerClass", "GridCellLayer", "updateTriggers", "getFillColor", "bind", "getElevation", "getSubLayerProps", "id", "data", "layerData", "x0", "y0", "x1", "y1", "dx", "dy", "y", "x", "pointToHexbin", "props", "aggregationParams", "data", "radius", "viewport", "attributes", "centerLngLat", "length", "getPointsCenter", "radiusCommon", "getRadiusInCommon", "screenPoints", "iterable", "objectInfo", "createIterable", "positions", "value", "size", "getAccessor", "object", "index", "posIndex", "position", "arrayIsFinite", "Number", "isFinite", "push", "screenCoord", "projectFlat", "source", "log", "warn", "newHexbin", "hexbin", "x", "d", "y", "hexagonBins", "hexagons", "map", "hex", "unprojectFlat", "points", "minX", "Infinity", "minY", "maxX", "maxY", "i", "Math", "min", "max", "every", "center", "unitsPerMeter", "getDistanceScales", "nop", "defaultProps", "colorDomain", "colorRange", "defaultColorRange", "getColorValue", "type", "value", "getColorWeight", "colorAggregation", "lowerPercentile", "min", "max", "upperPercentile", "colorScaleType", "onSetColorDomain", "elevationDomain", "elevationRange", "getElevationValue", "getElevationWeight", "elevationAggregation", "elevationLowerPercentile", "elevationUpperPercentile", "elevationScale", "elevationScaleType", "onSetElevationDomain", "radius", "coverage", "extruded", "hexagonAggregator", "pointToHexbin", "getPosition", "x", "position", "material", "_filterData", "optional", "HexagonLayer", "AggregationLayer", "initializeState", "cpuAggregator", "CPUAggregator", "getAggregator", "props", "getCellSize", "state", "aggregatorState", "vertices", "attributeManager", "getAttributeManager", "add", "positions", "size", "accessor", "updateState", "opts", "changeFlags", "propsOrDataChanged", "viewport", "context", "attributes", "getAttributes", "layerData", "hexagonVertices", "setState", "convertLatLngToMeterOffset", "Array", "isArray", "length", "vertex0", "vertex3", "centroid", "centroidFlat", "projectFlat", "metersPerUnit", "getDistanceScales", "map", "vt", "vtFlat", "log", "error", "getPickingInfo", "info", "_onGetSublayerColor", "cell", "getAccessor", "_onGetSublayerElevation", "_getSublayerUpdateTriggers", "getUpdateTriggers", "renderLayers", "transitions", "SubLayerClass", "getSubLayerClass", "ColumnLayer", "updateTriggers", "geometry", "radiusCommon", "radiusUnits", "angle", "diskResolution", "getFillColor", "bind", "getElevation", "getSubLayerProps", "id", "data", "HALF", "ONE6TH", "OFFSET", "N", "E", "S", "W", "NE", "NW", "SE", "SW", "SW_TRIANGLE", "SE_TRIANGLE", "NE_TRIANGLE", "NW_TRIANGLE", "SW_TRAPEZOID", "SE_TRAPEZOID", "NE_TRAPEZOID", "NW_TRAPEZOID", "S_RECTANGLE", "E_RECTANGLE", "N_RECTANGLE", "W_RECTANGLE", "EW_RECTANGEL", "SN_RECTANGEL", "SQUARE", "SW_PENTAGON", "SE_PENTAGON", "NE_PENTAGON", "NW_PENTAGON", "NW_N_PENTAGON", "NE_E_PENTAGON", "SE_S_PENTAGON", "SW_W_PENTAGON", "NW_W_PENTAGON", "NE_N_PENTAGON", "SE_E_PENTAGON", "SW_S_PENTAGON", "S_HEXAGON", "E_HEXAGON", "N_HEXAGON", "W_HEXAGON", "SW_NE_HEXAGON", "NW_SE_HEXAGON", "NE_HEPTAGON", "SW_HEPTAGON", "NW_HEPTAGON", "SE_HEPTAGON", "OCTAGON", "ISOLINES_CODE_OFFSET_MAP", "ternaryToIndex", "ternary", "parseInt", "ISOBANDS_CODE_OFFSET_MAP", "CONTOUR_TYPE", "ISO_LINES", "ISO_BANDS", "DEFAULT_THRESHOLD_DATA", "zIndex", "zOffset", "getVertexCode", "weight", "threshold", "Array", "isArray", "getCode", "opts", "cellWeights", "x", "y", "width", "height", "thresholdValue", "log", "deprecated", "isLeftBoundary", "isRightBoundary", "isBottomBoundary", "isTopBoundary", "isBoundary", "weights", "codes", "top", "topRight", "right", "current", "code", "Number", "isFinite", "meanCode", "getVertices", "gridOrigin", "cellSize", "type", "thresholdData", "offsets", "ISOBANDS_CODE_OFFSET_MAP", "ISOLINES_CODE_OFFSET_MAP", "vZ", "rX", "rY", "refVertexX", "refVertexY", "polygons", "forEach", "polygonOffsets", "polygon", "xyOffset", "vX", "vY", "push", "lines", "xyOffsets", "offset", "generateContours", "thresholdData", "cellWeights", "gridSize", "gridOrigin", "cellSize", "contourSegments", "contourPolygons", "width", "height", "segmentIndex", "polygonIndex", "data", "contour", "threshold", "x", "y", "code", "meanCode", "getCode", "opts", "type", "CONTOUR_TYPE", "ISO_BANDS", "Array", "isArray", "polygons", "getVertices", "polygon", "vertices", "ISO_LINES", "i", "length", "start", "end", "DEFAULT_COLOR", "DEFAULT_STROKE_WIDTH", "DEFAULT_THRESHOLD", "defaultProps", "cellSize", "type", "min", "max", "value", "getPosition", "x", "position", "getWeight", "gpuAggregation", "aggregation", "contours", "threshold", "optional", "compare", "zOffset", "POSITION_ATTRIBUTE_NAME", "DIMENSIONS", "data", "props", "weights", "accessors", "ContourLayer", "GridAggregationLayer", "initializeState", "initializeAggregationLayer", "dimensions", "setState", "contourData", "projectPoints", "count", "size", "operation", "AGGREGATION_OPERATION", "SUM", "attributeManager", "getAttributeManager", "add", "accessor", "fp64", "use64bitPositions", "updateState", "opts", "contoursChanged", "oldProps", "aggregationDirty", "state", "_updateThresholdData", "getNumInstances", "_generateContours", "renderLayers", "contourSegments", "contourPolygons", "LinesSubLayerClass", "getSubLayerClass", "LineLayer", "BandsSubLayerClass", "SolidPolygonLayer", "lineLayer", "length", "getSubLayerProps", "id", "getSourcePosition", "d", "start", "getTargetPosition", "end", "getColor", "contour", "color", "getWidth", "strokeWidth", "bandsLayer", "getPolygon", "vertices", "getFillColor", "updateAggregationState", "coordinateSystem", "viewport", "context", "cellSizeChanged", "GPUGridAggregator", "isSupported", "gl", "log", "warn", "gpuAggregationChanged", "positionsChanged", "isAttributeChanged", "boundingBox", "getBoundingBox", "getAttributes", "gridOffset", "translation", "width", "height", "numCol", "numRow", "getGridParams", "allocateResources", "posOffset", "slice", "gridOrigin", "aggregationDataDirty", "isAggregationDirty", "dimension", "compareAll", "aggregationWeightsDirty", "_updateAccessors", "_resetResults", "getValue", "getValueFunc", "aggregationData", "thresholdData", "aggregationBuffer", "getData", "cellWeights", "getCellData", "countsData", "generateContours", "gridSize", "xOffset", "yOffset", "Array", "i", "zIndex", "COLOR_DATA_UBO_INDEX", "ELEVATION_DATA_UBO_INDEX", "defaultProps", "colorDomain", "colorRange", "defaultColorRange", "elevationDomain", "elevationRange", "elevationScale", "type", "min", "value", "gridSize", "gridOrigin", "gridOffset", "cellSize", "max", "offset", "coverage", "extruded", "material", "GPUGridCellLayer", "Layer", "getShaders", "vs", "fs", "modules", "project32", "gouraudLighting", "picking", "fp64arithmetic", "initializeState", "gl", "attributeManager", "getAttributeManager", "addInstanced", "colors", "size", "noAlloc", "elevations", "model", "_getModel", "_setupUniformBuffer", "setState", "Model", "id", "props", "geometry", "CubeGeometry", "isInstanced", "draw", "uniforms", "colorMaxMinBuffer", "elevationMaxMinBuffer", "gridOriginLow", "fp64LowPart", "gridOffsetLow", "domainUniforms", "getDomainUniforms", "colorRangeToFlatArray", "bindUniformBuffers", "state", "setUniforms", "unbindUniformBuffers", "bind", "target", "index", "unbind", "colorDomainValid", "elevationDomainValid", "context", "programHandle", "program", "handle", "colorIndex", "getUniformBlockIndex", "elevationIndex", "uniformBlockBinding", "defaultProps", "colorDomain", "colorRange", "defaultColorRange", "getColorWeight", "type", "value", "colorAggregation", "elevationDomain", "elevationRange", "getElevationWeight", "elevationAggregation", "elevationScale", "min", "cellSize", "max", "coverage", "getPosition", "x", "position", "extruded", "material", "DIMENSIONS", "data", "props", "POSITION_ATTRIBUTE_NAME", "GPUGridLayer", "GridAggregationLayer", "initializeState", "gl", "isSupported", "GPUGridAggregator", "log", "error", "initializeAggregationLayer", "dimensions", "setState", "gpuAggregation", "projectPoints", "weights", "color", "needMin", "needMax", "combineMaxMin", "maxMinBuffer", "Buffer", "byteLength", "accessor", "size", "divisor", "elevation", "positionAttributeName", "attributeManager", "getAttributeManager", "add", "fp64", "use64bitPositions", "updateState", "opts", "state", "aggregationDirty", "gridHash", "getHashKeyForIndex", "index", "numRow", "numCol", "boundingBox", "gridOffset", "gridSize", "gridOrigin", "xMin", "yMin", "xOffset", "yOffset", "yIndex", "Math", "floor", "xIndex", "latIdx", "lonIdx", "getPositionForIndex", "yPos", "xPos", "getPickingInfo", "info", "mode", "object", "gpuGridAggregator", "colorInfo", "getAggregationData", "pixelIndex", "getData", "elevationInfo", "colorValue", "cellWeight", "elevationValue", "count", "cellCount", "totalCount", "translation", "viewport", "context", "attributes", "getAttributes", "cpuAggregation", "pointToDensityGridDataCPU", "key", "cpuAggregationData", "Object", "assign", "picked", "Boolean", "renderLayers", "cellSizeMeters", "colorRangeToFlatArray", "SubLayerClass", "getSubLayerClass", "GPUGridCellLayer", "getSubLayerProps", "id", "colors", "aggregationBuffer", "elevations", "colorMaxMinBuffer", "elevationMaxMinBuffer", "numInstances", "finalizeState", "forEach", "weight", "delete", "updateAggregationState", "oldProps", "coordinateSystem", "cellSizeChanged", "positionsChanged", "isAttributeChanged", "attributesChanged", "getBoundingBox", "getNumInstances", "width", "height", "getGridParams", "allocateResources", "aggregationDataDirty", "isAggregationDirty", "dimension", "compareAll", "_updateAccessors", "operation", "AGGREGATION_OPERATION", "defaultProps", "GPUGridLayer", "CPUGridLayer", "gpuAggregation", "GridLayer", "CompositeLayer", "initializeState", "state", "useGPUAggregation", "updateState", "props", "setState", "canUseGPUAggregation", "renderLayers", "data", "updateTriggers", "id", "LayerType", "getSubLayerClass", "getSubLayerProps", "lowerPercentile", "upperPercentile", "getColorValue", "getElevationValue", "colorScaleType", "GPUGridAggregator", "isSupported", "context", "gl", "getBounds", "points", "x", "map", "p", "y", "xMin", "Math", "min", "apply", "xMax", "max", "yMin", "yMax", "boundsContain", "currentBounds", "targetBounds", "scratchArray", "Float32Array", "packVertices", "dimensions", "index", "point", "i", "scaleToAspectRatio", "boundingBox", "width", "height", "currentWidth", "currentHeight", "newWidth", "newHeight", "xCenter", "yCenter", "getTextureCoordinates", "bounds", "getTextureParams", "gl", "floatTargetSupport", "format", "isWebGL2", "type", "TriangleLayer", "Layer", "getShaders", "vs", "fs", "modules", "project32", "initializeState", "gl", "attributeManager", "getAttributeManager", "add", "positions", "size", "noAlloc", "texCoords", "setState", "model", "_getModel", "vertexCount", "props", "Model", "id", "geometry", "Geometry", "drawMode", "draw", "uniforms", "state", "texture", "maxTexture", "colorTexture", "intensity", "threshold", "aggregationMode", "colorDomain", "setUniforms", "RESOLUTION", "TEXTURE_OPTIONS", "mipmaps", "parameters", "dataFormat", "DEFAULT_COLOR_DOMAIN", "AGGREGATION_MODE", "SUM", "MEAN", "defaultProps", "getPosition", "type", "value", "x", "position", "getWeight", "intensity", "min", "radiusPixels", "max", "colorRange", "defaultColorRange", "threshold", "colorDomain", "optional", "aggregation", "weightsTextureSize", "debounceTimeout", "REQUIRED_FEATURES", "FEATURES", "BLEND_EQUATION_MINMAX", "TEXTURE_FLOAT", "FLOAT_TARGET_FEATURES", "COLOR_ATTACHMENT_RGBA32F", "FLOAT_BLEND", "DIMENSIONS", "data", "props", "HeatmapLayer", "AggregationLayer", "initializeState", "gl", "context", "hasFeatures", "setState", "supported", "log", "error", "id", "initializeAggregationLayer", "_setupTextureParams", "_setupAttributes", "_setupResources", "shouldUpdateState", "changeFlags", "somethingChanged", "updateState", "opts", "state", "_updateHeatmapState", "oldProps", "_getChangeFlags", "dataChanged", "viewportChanged", "boundsChanged", "_updateBounds", "_updateTextureRenderingBounds", "clearTimeout", "updateTimer", "isWeightMapDirty", "viewportZoomChanged", "_debouncedUpdateWeightmap", "_updateColorTexture", "_updateWeightmap", "zoom", "viewport", "renderLayers", "weightsTexture", "triPositionBuffer", "triTexCoordBuffer", "maxWeightsTexture", "colorTexture", "updateTriggers", "TriangleLayerClass", "getSubLayerClass", "TriangleLayer", "getSubLayerProps", "coordinateSystem", "COORDINATE_SYSTEM", "DEFAULT", "attributes", "positions", "texCoords", "vertexCount", "maxTexture", "aggregationMode", "texture", "finalizeState", "weightsTransform", "maxWeightTransform", "delete", "_getAttributeManager", "AttributeManager", "stats", "dimensions", "isAttributeChanged", "isAggregationDirty", "compareAll", "dimension", "_createTextures", "textureSize", "format", "Texture2D", "width", "height", "attributeManager", "getAttributeManager", "add", "size", "accessor", "weights", "positionAttributeName", "Math", "getParameters", "floatTargetSupport", "getTextureParams", "weightsScale", "warn", "getShaders", "vs", "vsMax", "_fs", "fsMax", "weightsVs", "weightsFs", "_createWeightsTransform", "shaders", "Transform", "elementCount", "_targetTexture", "_targetTextureVarying", "weightsTransformShaders", "maxWeightsTransformShaders", "_sourceTextures", "inTexture", "Buffer", "byteLength", "updateShaders", "shaderOptions", "_updateMaxWeightValue", "run", "blend", "depthTest", "blendFunc", "blendEquation", "forceUpdate", "viewportCorners", "unproject", "map", "p", "fround", "visibleWorldBounds", "getBounds", "newState", "worldBounds", "boundsContain", "scaledCommonBounds", "_worldToCommonBounds", "_commonToWorldBounds", "LNGLAT", "normalizedCommonBounds", "subData", "packVertices", "textureBounds", "getTextureCoordinates", "projectPosition", "colors", "colorRangeToFlatArray", "Uint8Array", "setImageData", "length", "commonBounds", "useLayerCoordinateSystem", "metersPerPixel", "distanceScales", "metersPerUnit", "uniforms", "textureWidth", "update", "getNumInstances", "withParameters", "clearColor", "clearRenderTarget", "getAttributes", "moduleSettings", "getModuleSettings", "setParameters", "fromTimer", "setTimeout", "bind", "minLong", "minLat", "maxLong", "maxLat", "offsetMode", "LNGLAT_OFFSETS", "METER_OFFSETS", "offsetOriginCommon", "coordinateOrigin", "scale", "bottomLeftCommon", "topRightCommon", "scaleToAspectRatio", "xMin", "yMin", "xMax", "yMax", "bottomLeftWorld", "unprojectPosition", "topRightWorld", "slice", "concat"]
}
